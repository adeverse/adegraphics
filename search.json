[{"path":[]},{"path":"/articles/FAQ.html","id":"how-to-update-title-axes","dir":"Articles","previous_headings":"How to personalize plots","what":"How to update title axes?","title":"Frequently Asked Questions","text":"","code":"s.value(df[, 1:2], df$ms_li,          paxes.draw = TRUE)"},{"path":"/articles/FAQ.html","id":"size-titles-on-axes","dir":"Articles","previous_headings":"How to personalize plots > How to update title axes?","what":"Size titles on axes","title":"Frequently Asked Questions","text":"xlab.cex ylab.cex manage size titles x y axes.","code":"s.value(df[, 1:2], df$ms_li,          paxes.draw = TRUE,         xlab = \"Longitude\", xlab.cex = 0.5,         ylab = \"Latitude\", ylab.cex = 0.5         )"},{"path":"/articles/FAQ.html","id":"size-labels-on-axes","dir":"Articles","previous_headings":"How to personalize plots > How to update title axes?","what":"Size labels on axes","title":"Frequently Asked Questions","text":"scales.x.cex scales.y.cex manage sizes labels x y axes.","code":"s.value(df[, 1:2], df$ms_li,          paxes.draw = TRUE,         scales.x.cex = 0.5,         scales.y.cex = 0.5         )"},{"path":"/articles/FAQ.html","id":"margin-of-axis","dir":"Articles","previous_headings":"How to personalize plots > How to update title axes?","what":"Margin of axis","title":"Frequently Asked Questions","text":"layout.heights = list(bottom.padding = 1) manages margin bottom axis. enlarges space larger title axis.","code":"s.value(df[, 1:2], df$ms_li,          paxes.draw = TRUE,         xlab = \"Longitude\", xlab.cex = 2,         ylab = \"Latitude\", ylab.cex = 2,         layout.heights = list(bottom.padding = 2)         )"},{"path":"/articles/adegraphics.html","id":"an-overview-of-object-classes","dir":"Articles","previous_headings":"","what":"An overview of object classes","title":"The `adegraphics` package","text":"adegraphics, user-level function produces plot stored (returned) object. class architecture objects created adegraphics functions described Figure 1. Figure 1: Classes structure user-level functions  class management highlights hierarchy two parent classes: ADEg simple graphs. contains display single data set using one kind representation (e.g., arrows, points, lines, etc.) ADEgS multiple graphs. contains collection least two simple graphs (ADEg, trellis ADEgS) ADEg class five child classes also subdivided several child classes. five child classes dedicated particular graphical data representation: ADEg.S1: unidimensional graph numeric score ADEg.S2: bidimensional graph xy coordinates (matrix data.frame object) ADEg.C1: bidimensional graph numeric score (bar chart curve) ADEg.T: heat map-like representation data table (matrix, data.frame, dist table object) ADEg.Tr: ternary plot xyz coordinates (matrix data.frame object) ADEg class five child classes virtual: allowed create object belonging classes. Users can create objects belonging child classes calls user functions (see User functions section).","code":""},{"path":"/articles/adegraphics.html","id":"simple-graph-adeg-object","dir":"Articles","previous_headings":"","what":"Simple graph (ADEg object)","title":"The `adegraphics` package","text":"adegraphics package, graph created call user function stored R object. functions allow display raw data also outputs multivariate analysis. following sections describe different graphical functions available package.","code":""},{"path":"/articles/adegraphics.html","id":"user-functions","dir":"Articles","previous_headings":"Simple graph (ADEg object)","what":"User functions","title":"The `adegraphics` package","text":"Several user functions available create simple graph (stored ADEg object R). function creates object given class (see Figure 1). Table 1 lists different functions, corresponding classes short description. ade4 users lost: many functions kept names adegraphics. main changes listed Table 2. Table 1: Graphical functions available adegraphics Table 2: Changes functions names ade4 adegraphics","code":""},{"path":"/articles/adegraphics.html","id":"arguments","dir":"Articles","previous_headings":"Simple graph (ADEg object)","what":"Arguments","title":"The `adegraphics` package","text":"list arguments function given args function. arguments general present user functions: plot: logical value indicating graph displayed storeData: logical value indicating data stored returned object. FALSE, names data stored. allows reduce size returned object implies data modified environment plot graph. add: logical value indicating graph superposed graph already displayed current device (replaces argument add.plot ade4). pos: integer indicating position environment data stored, relative environment function called. Useful storeData FALSE. â€¦: additional graphical parameters (see ) arguments influence graphical outputs thus specific type produced graph. Figure 2 summarizes graphical parameters available different functions. reported parameters stored g.args slot returned object (see Parameters g.args section). Figure 2: Specific arguments object class  ade4 users note names arguments modified adegraphics. Appendix gives full list modifications.","code":"library(ade4) library(adegraphics) ## Registered S3 methods overwritten by 'adegraphics': ##   method         from ##   biplot.dudi    ade4 ##   kplot.foucart  ade4 ##   kplot.mcoa     ade4 ##   kplot.mfa      ade4 ##   kplot.pta      ade4 ##   kplot.sepan    ade4 ##   kplot.statis   ade4 ##   scatter.coa    ade4 ##   scatter.dudi   ade4 ##   scatter.nipals ade4 ##   scatter.pco    ade4 ##   score.acm      ade4 ##   score.mix      ade4 ##   score.pca      ade4 ##   screeplot.dudi ade4 ##  ## Attaching package: 'adegraphics' ## The following objects are masked from 'package:ade4': ##  ##     kplotsepan.coa, s.arrow, s.class, s.corcircle, s.distri, s.image, ##     s.label, s.logo, s.match, s.traject, s.value, table.value, ##     triangle.class args(s.label) ## function (dfxy, labels = rownames(dfxy), xax = 1, yax = 2, facets = NULL,  ##     plot = TRUE, storeData = TRUE, add = FALSE, pos = -1, ...)  ## NULL"},{"path":"/articles/adegraphics.html","id":"slots-and-methods","dir":"Articles","previous_headings":"Simple graph (ADEg object)","what":"Slots and Methods","title":"The `adegraphics` package","text":"call graphical function (see User functions section) returns ADEg object. object defined number slots several methods associated class. Let us consider olympic data set available ade4 package. principal component analysis (PCA) applied olympic$tab table contains results 33 participating athletes 1988 summer olympic games: barplot eigenvalues drawn stored g1:  class g1 object C1.barchart extends ADEg class: object contains different slots: slots defined ADEg object contain different types information. package adegraphics uses capabilities lattice package display graph (generating trellis object). Hence, several slots contain information passed call lattice functions: data: list containing information data. trellis.par: list graphical parameters directly passed lattice functions using par.settings argument (see Parameters trellis.par section). adeg.par: list graphical parameters defined adegraphics. list parameters can obtained using adegpar function (see Parameters adeg.par section). lattice.call: list two elements containing information required create trellis object: graphictype (name lattice functions used) arguments (list parameter values required obtain trellis object). g.args: list containing least different values graphical arguments described Figure 2 (see Parameters g.args section). stats: list internal preliminary computations performed display graph. s.misc: list internal parameters. Call: object class call containing matched call. different slots can extracted using @ operator: slots automatically filled object creation. trellis.par, adeg.par g.args can also modified posteriori using update method (see Customizing graph section). allows customize graphs creation. consider correlation circle depicts correlation PCA axes results event:  argument fullcircle can updated posteriori original object modified:  Several methods defined ADEg class allowing extract information, modify combine objects: getcall, getlatticecall getstats: accessor methods return respectively Call, lattice.call stats slots. getparameters: method returns trellis.par /adeg.par slots. show, print plot: methods display ADEg object current device new one. gettrellis: method returns ADEg object trellis object. can exploited using lattice latticeExtra packages. superpose, + add.ADEg: methods superpose two ADEg graphs. returns multiple graph object class ADEgS (see basic methods superposition, juxtaposition insertion section). insert: method inserts ADEg graph existing one current device. returns ADEgS object (see basic methods superposition, juxtaposition insertion section). cbindADEg, rbindADEg: methods combine several ADEg graphs. returns ADEgS object (see basic methods superposition, juxtaposition insertion section). update: method modifies graphical parameters ADEg creation. updates current display returns modified ADEg (see Customizing graph section). instance: biplot-like graph can obtained using superpose method. result multiple graph:  addition, object classes specific methods. instance, zoom method available ADEg.S1 ADEg.S2 classes. ADEg.S2 class, method addhist (see basic methods superposition, juxtaposition insertion section) decorates 2-D graph adding marginal distributions histograms density lines (method replaces extends s.hist function ade4).","code":"data(olympic) pca1 <- dudi.pca(olympic$tab, scannf = FALSE) g1 <- s1d.barchart(pca1$eig, p1d.horizontal = F, ppolygons.col = \"white\") class(g1) ## [1] \"C1.barchart\" ## attr(,\"package\") ## [1] \"adegraphics\" showClass(\"C1.barchart\") ## Class \"C1.barchart\" [package \"adegraphics\"] ##  ## Slots: ##                                                                         ## Name:          data  trellis.par     adeg.par lattice.call       g.args ## Class:         list         list         list         list         list ##                                               ## Name:         stats       s.misc         Call ## Class:         list         list         call ##  ## Extends:  ## Class \"ADEg.C1\", directly ## Class \"ADEg\", by class \"ADEg.C1\", distance 2 ## Class \"ADEgORtrellis\", by class \"ADEg.C1\", distance 3 ## Class \"ADEgORADEgSORtrellis\", by class \"ADEg.C1\", distance 3 slotNames(g1) ## [1] \"data\"         \"trellis.par\"  \"adeg.par\"     \"lattice.call\" \"g.args\"       ## [6] \"stats\"        \"s.misc\"       \"Call\" g1@data ## $score ##  [1] 3.4182381 2.6063931 0.9432964 0.8780212 0.5566267 0.4912275 0.4305952 ##  [8] 0.3067981 0.2669494 0.1018542 ##  ## $at ##  [1]  1  2  3  4  5  6  7  8  9 10 ##  ## $frame ## [1] 35 ##  ## $storeData ## [1] TRUE g2 <- s.corcircle(pca1$co) class(g2) ## [1] \"S2.corcircle\" ## attr(,\"package\") ## [1] \"adegraphics\" g2@g.args ## $fullcircle ## [1] TRUE ##  ## $xlim ## [1] -1.2  1.2 ##  ## $ylim ## [1] -1.2  1.2 ##  ## $scales ## $scales$draw ## [1] FALSE update(g2, fullcircle = FALSE) g2@g.args ## $fullcircle ## [1] FALSE ##  ## $xlim ## [1] -0.8815395  0.9544397 ##  ## $ylim ## [1] -0.6344523  1.2015270 ##  ## $scales ## $scales$draw ## [1] FALSE getcall(g1) ## equivalent to g1@Call ## s1d.barchart(score = pca1$eig, p1d.horizontal = F, ppolygons.col = \"white\") g3 <- s.label(pca1$li) g4 <- s.arrow(5 * pca1$c1, add = TRUE) class(g4) ## [1] \"ADEgS\" ## attr(,\"package\") ## [1] \"adegraphics\" zoom(g3, zoom = 2, center = c(2, -2))"},{"path":"/articles/adegraphics.html","id":"multiple-graph-adegs-object","dir":"Articles","previous_headings":"","what":"Multiple graph (ADEgS object)","title":"The `adegraphics` package","text":"adegraphics package provides class ADEgS manage easily combination several graphs. class allows deal superposition, insertion juxtaposition several graphs single object. object class list containing several graphical objects information positioning. Different ways generate ADEgS objects described .","code":""},{"path":"/articles/adegraphics.html","id":"slots-and-methods-1","dir":"Articles","previous_headings":"Multiple graph (ADEgS object)","what":"Slots and Methods","title":"The `adegraphics` package","text":"class ADEgS used store multiple graphs. Different slots associated class (use symbol @ extract information): ADEglist: list graphs stored trellis, ADEg /ADEgS objects. positions: matrix containing positions graphs. four columns many rows number graphical objects ADEglist slot. graph (.e.Â row), contains coordinates bottom-left top-right corners npc units (.e.Â normalized parent coordinates varying 0 1). add: square binary matrix many rows columns number graphical objects ADEglist slot. allows manage superposition graphs: value -th row j-th column equal 1 j-th graphical object superposed -th. Otherwise, value equal 0. Call: object class call containing matched call. Several methods implemented obtain information, edit modify ADEgS objects. Several methods inspired management list R: [, [[ $: methods extract one elements ADEgS object. getpositions, getgraphics getcall: methods return positions, ADEglist Call slots, respectively. names length: methods return names number graphs contained object. [[<- names<-: methods replace graph name ADEgS object (acts ADEglist slot). show, plot print: methods display ADEgS object current device new one. superpose +: methods superpose two graphs. returns multiple graph object class ADEgS (see basic methods superposition, juxtaposition insertion section). insert: method inserts graph existing one current device. returns multiple graph object class ADEgS (see basic methods superposition, juxtaposition insertion section). cbindADEg, rbindADEg: methods combine several graphs. returns ADEgS object (see basic methods superposition, juxtaposition insertion section). update: method modifies names /positions graphs contained ADEgS object. updates current display returns modified ADEgS. show next sections methods can used deal ADEgS objects.","code":""},{"path":"/articles/adegraphics.html","id":"creating-an-adegs-object-by-hand","dir":"Articles","previous_headings":"Multiple graph (ADEgS object)","what":"Creating an ADEgS object by hand","title":"The `adegraphics` package","text":"ADEgS objects can created easy manipulation several simple graphs. methods (e.g., insert, superpose) can used create compilation graphs hand.","code":""},{"path":"/articles/adegraphics.html","id":"the-basic-methods-for-superposition-juxtaposition-and-insertion","dir":"Articles","previous_headings":"Multiple graph (ADEgS object) > Creating an ADEgS object by hand","what":"The basic methods for superposition, juxtaposition and insertion","title":"The `adegraphics` package","text":"functions superpose, + add.ADEg allow superposition ADEg/ADEgS object ADEg/ADEgS object. vector olympic$score contains total number points computed participant. vector used generate factor partitioning participants two groups according final result (less 8000 points): two groups can represented PCA factorial map using s.class function:  graph labels (object g3) can superposed one:  case superposition, graphical parameters (e.g., background limits) first graph (one ) used reference applied second one (one ). Note also possible use add = TRUE argument call simple user function (functions described Table 1) perform superposition. graph g6 can also obtained : functions cbindADEg rbindADEg allows combine several graphical objects (ADEg, ADEgS trellis) rows columns. new created ADEgS contains list reduced graphs:  function insert allows insertion graphical object another one (ADEg ADEgS). takes position inserted graph argument:  different methods associated ADEgS class allow obtain information modify multiple graph: multiple graph contains three simple graphs. can easily updated. instance, size inserted graph can modified:  graphs can modified, without affecting global structure ADEgS object. , replace correlation circle barplot eigenvalues:  addhist method adds univariate marginal distributions around ADEg.S2 returns ADEgS object:  examples available help page typing example(superpose), example(insert), example(add.ADEg) example(addhist) R session.","code":"fac.score <- factor(olympic$score < 8000, labels = c(\"MT8000\", \"LT8000\")) g5 <- s.class(pca1$li, fac.score, col = c(\"red\", \"blue\"), chullSize = 1, ellipseSize = 0,                plabels.cex = 2, pbackground.col = \"grey85\", paxes.draw = TRUE) g6 <- superpose(g5, g3, plot = TRUE) ## equivalent to g5 + g3 class(g6) ## [1] \"ADEgS\" ## attr(,\"package\") ## [1] \"adegraphics\" g5 s.label(pca1$li, add = TRUE) rbindADEg(cbindADEg(g2, g3), cbindADEg(g5, g6), plot = TRUE) g7 <- insert(g2, g6, posi = c(0.65, 0.65, 0.95, 0.95)) class(g7) ## [1] \"ADEgS\" ## attr(,\"package\") ## [1] \"adegraphics\" length(g7) ## [1] 3 names(g7) ## [1] \"g1\" \"g2\" \"X\" names(g7) <- c(\"chulls\", \"labels\", \"cor\") class(g7[1]) ## [1] \"ADEgS\" ## attr(,\"package\") ## [1] \"adegraphics\" class(g7[[1]]) ## [1] \"S2.class\" ## attr(,\"package\") ## [1] \"adegraphics\" class(g7$chulls) ## [1] \"S2.class\" ## attr(,\"package\") ## [1] \"adegraphics\" pos.mat <- getpositions(g7) pos.mat ##           [,1] [,2] [,3] [,4] ##           0.00 0.00 1.00 1.00 ##           0.00 0.00 1.00 1.00 ## positions 0.65 0.65 0.95 0.95 pos.mat[3,] <- c(0.1, 0.7, 0.3, 0.9) update(g7, positions = pos.mat) g7[[3]] <- g1 g7 addhist(g3)"},{"path":"/articles/adegraphics.html","id":"the-adegs-function","dir":"Articles","previous_headings":"Multiple graph (ADEgS object) > Creating an ADEgS object by hand","what":"The ADEgS function","title":"The `adegraphics` package","text":"ADEgS function provides elementary flexible way create ADEgS object. different arguments function : adeglist: list several trellis, ADEg /ADEgS objects. positions: matrix four columns many rows number graphical objects ADEglist slot. subgraph, .e.Â row, coordinates top-right bottom-left hand corners given npc units (.e., normalized parent coordinates varying 0 1). layout: alternative way specify positions graphs. vector length 2 indicating number rows columns used split device (similar mfrow parameter basic graphs). also matrix specifying location graphs: value matrix 0 positive integer (similar layout function basic graphs). add: square matrix many rows columns number graphical objects ADEglist slot. value -th row j-th column equal 1 j-th graphical object superposed -th one. Otherwise, value equal 0. plot: logical value indicating graphs displayed. users fill one argument among positions, layout add, values automatically computed define ADEgS object. illustrate different possibilities create objects ADEgS function. Simple juxtaposition using vector layout:  Layout specified matrix:  Using matrix positions offers flexible way arrange different graphs:  Lastly, superposition can also specified using add argument:  examples available help page typing example(ADEgS) R session.","code":"ADEgS(adeglist = list(g2, g3), layout = c(1, 2)) mlay <- matrix(c(1, 1, 0, 1, 1, 0, 0, 0, 2), byrow = T, nrow = 3) mlay ##      [,1] [,2] [,3] ## [1,]    1    1    0 ## [2,]    1    1    0 ## [3,]    0    0    2 ADEgS(adeglist = list(g6, g2), layout = mlay) mpos <- rbind(c(0, 0.3, 0.7, 1), c(0.5, 0, 1, 0.5)) ADEgS(adeglist = list(g3, g5), positions = mpos) ADEgS(list(g5, g3), add = matrix(c(0, 1, 0, 0), byrow = TRUE, ncol = 2))"},{"path":"/articles/adegraphics.html","id":"automatic-collections","dir":"Articles","previous_headings":"Multiple graph (ADEgS object)","what":"Automatic collections","title":"The `adegraphics` package","text":"package adegraphics contains functionalities create collections graphs. collections based simple graph repeated different groups individuals, variables axes. building process collections quite simple (definition arguments call user function) leads creation ADEgS object.","code":""},{"path":"/articles/adegraphics.html","id":"partitioning-the-data-facets","dir":"Articles","previous_headings":"Multiple graph (ADEgS object) > Automatic collections","what":"Partitioning the data (facets)","title":"The `adegraphics` package","text":"adegraphics package allows split data one variable (factor) plot subsets data together. possibility conditional plot available user functions (except table.* functions) setting facets argument. directly inspired functionalities offered lattice ggplot2 packages. Let us consider jv73 data set. table jv73$morpho contains measures 6 variables describing geomorphology 92 sites. PCA can performed data set:  sites located 12 rivers (jv73$fac.riv) possible represent PCA scores river using facets argument:  ADEgS returned object contains 12 plots. possible focus given river (e.g., Doubs river) considering subplot (e.g., type g8$Doubs). facets functionality general available majority adegraphics functions. instance, s.class function:","code":"data(jv73) pca2 <- dudi.pca(jv73$morpho, scannf = FALSE) s.label(pca2$li) g8 <- s.label(pca2$li, facets = jv73$fac.riv) length(g8) ## [1] 12 names(g8) ##  [1] \"Allaine\"   \"Audeux\"    \"Clauge\"    \"Cuisance\"  \"Cusancin\"  \"Dessoubre\" ##  [7] \"Doubs\"     \"Doulonnes\" \"Drugeon\"   \"Furieuse\"  \"Lison\"     \"Loue\" s.class(pca2$li, fac = jv73$fac.riv, col = rainbow(12), facets = jv73$fac.riv)"},{"path":"/articles/adegraphics.html","id":"multiple-axes","dir":"Articles","previous_headings":"Multiple graph (ADEgS object) > Automatic collections","what":"Multiple axes","title":"The `adegraphics` package","text":"2-D functions (.e.Â s.*) returning object inheriting ADEg.S2 class xax et yax arguments. arguments allow choose column main argument (.e.Â df) plotted x y axes. ade4, two arguments can simple integers. adegraphics, user can also specify vectors xax /yax arguments obtain multiple graphs. , represent different correlation circles associated first four PCA axes olympic data set:","code":"pca1 <- dudi.pca(olympic$tab, scannf = FALSE, nf = 4) g9 <- s.corcircle(pca1$co, xax = 1:2, yax = 3:4) length(g9) ## [1] 4 names(g9) ## [1] \"x1y3\" \"x2y3\" \"x1y4\" \"x2y4\" g9@positions ##      [,1] [,2] [,3] [,4] ## [1,]  0.0  0.5  0.5  1.0 ## [2,]  0.5  0.5  1.0  1.0 ## [3,]  0.0  0.0  0.5  0.5 ## [4,]  0.5  0.0  1.0  0.5"},{"path":"/articles/adegraphics.html","id":"multiple-score","dir":"Articles","previous_headings":"Multiple graph (ADEgS object) > Automatic collections","what":"Multiple score","title":"The `adegraphics` package","text":"1-D functions (.e.Â s1d.*) returning object inheriting ADEg.C1 ADEg.S1 classes score argument. Usually, argument numeric vector also possible consider object several columns (data.frame matrix). case, ADEgS object returned one graph column created. instance olympic data set, can represent link global performance (fac.score) PCA scores first four axes (pca1$li):","code":"dim(pca1$li) ## [1] 33  4 s1d.boxplot(pca1$li, fac.score, col = c(\"red\", \"blue\"),    psub = list(position = \"topleft\", cex = 2))"},{"path":"/articles/adegraphics.html","id":"multiple-variable","dir":"Articles","previous_headings":"Multiple graph (ADEgS object) > Automatic collections","what":"Multiple variable","title":"The `adegraphics` package","text":"user functions (s1d.density, s1d.gauss, s1d.boxplot, s1d.class, s.class, s.image, s.traject, s.value, triangle.class) argument named fac z. argument can several columns (data.frame matrix) column used create separate graph. instance, can represent distribution 6 environmental variables PCA factorial map jv73$tab data set:","code":"s.value(pca2$li, pca2$tab, symbol = \"circle\")"},{"path":"/articles/adegraphics.html","id":"outputs-of-the-ade4-package","dir":"Articles","previous_headings":"Multiple graph (ADEgS object) > Automatic collections","what":"Outputs of the ade4 package","title":"The `adegraphics` package","text":"Lastly, reimplemented graphical functions ade4 package designed represent outputs multivariate analysis. functions ade4::plot.*, ade4::kplot.*, ade4::scatter.* ade4::score.* return ADEgS objects. now easy represent modify graphical outputs:","code":"data(meaudret) pca3 <- dudi.pca(meaudret$env, scannf = FALSE) pca4 <- dudi.pca(meaudret$spe, scale = FALSE, scannf = FALSE) coi1 <- coinertia(pca3, pca4, scannf = FALSE, nf = 3) g10 <- plot(coi1) class(g10) ## [1] \"ADEgS\" ## attr(,\"package\") ## [1] \"adegraphics\" names(g10) ## [1] \"Xax\"       \"Yax\"       \"eig\"       \"XYmatch\"   \"Yloadings\" \"Xloadings\" g10@Call ## plot.coinertia(x = coi1)"},{"path":"/articles/adegraphics.html","id":"customizing-a-graph","dir":"Articles","previous_headings":"","what":"Customizing a graph","title":"The `adegraphics` package","text":"Compared ade4 package, main advantage adegraphics concerns numerous possibilities customize graph using several graphical parameters. parameters stored slots trellis.par, adeg.par g.args (see Slots Methods section) ADEg object. parameters can defined creation graph updated posteriori (using update method).","code":""},{"path":"/articles/adegraphics.html","id":"parameters-in-trellis-par","dir":"Articles","previous_headings":"Customizing a graph","what":"Parameters in trellis.par","title":"The `adegraphics` package","text":"trellis.par slot list parameters directly included call functions lattice package. name parameters default value given trellis.par.get function lattice. Hence, modifications parameters modify graphical display ADEg object. instance, margins defined using layout.widths layout.heights parameters, clip parameter allows overpass panel boundaries axis.line axis.text allow customize lines text axes.","code":"library(lattice) sort(names(trellis.par.get())) ##  [1] \"add.line\"          \"add.text\"          \"as.table\"          ##  [4] \"axis.components\"   \"axis.line\"         \"axis.text\"         ##  [7] \"background\"        \"box.3d\"            \"box.dot\"           ## [10] \"box.rectangle\"     \"box.umbrella\"      \"clip\"              ## [13] \"dot.line\"          \"dot.symbol\"        \"fontsize\"          ## [16] \"grid.pars\"         \"layout.heights\"    \"layout.widths\"     ## [19] \"panel.background\"  \"par.main.text\"     \"par.sub.text\"      ## [22] \"par.title.text\"    \"par.xlab.text\"     \"par.ylab.text\"     ## [25] \"par.zlab.text\"     \"plot.line\"         \"plot.polygon\"      ## [28] \"plot.symbol\"       \"reference.line\"    \"regions\"           ## [31] \"shade.colors\"      \"strip.background\"  \"strip.border\"      ## [34] \"strip.shingle\"     \"superpose.line\"    \"superpose.polygon\" ## [37] \"superpose.symbol\" d <- scale(olympic$tab) g11 <- table.image(d, plot = FALSE) g12 <- table.image(d, axis.line = list(col = \"blue\"), axis.text = list(col = \"red\"),    plot = FALSE) ADEgS(c(g11, g12), layout = c(1, 2))"},{"path":"/articles/adegraphics.html","id":"parameters-in-adeg-par","dir":"Articles","previous_headings":"Customizing a graph","what":"Parameters in adeg.par","title":"The `adegraphics` package","text":"adeg.par slot list graphical parameters specific adegraphics package. name parameters default value available using adegpar function inspired par function graphics package. description parameters available help page function (?adegpar). Note adeg.par parameter starts letter â€™pâ€™ name relates type graphical element considered (ptable tables display, ppoints points, parrows arrows, etc). element list can contain one sublists. Details sublist obtained using name either parameter adegpar function $ symbol. example, want know different parameters manage display points: full list available parameters summarized Figure 3. Figure 3: Parameters can set adegpar function.  ordinate represents different sublists abscissa gives name parameters available sublist. Note row names two keys separated dot: first key indicates first level sublist, etc. example plabels.boxes sublist boxes sublist plabels. parameters border,col, alpha, lwd, lty draw plabels.boxes allow control aspect boxes around labels. According function called, full list adeg.par parameters useful modify graphical display. Figure 4 indicates parameters can affect display object created given user function. example, background (pbackground parameter) can modified functions whereas display ellipses (pellipses parameter) affects three functions. Figure 4: Effect adeg.par parameters adegraphics functions.","code":"names(adegpar()) ##  [1] \"p1d\"         \"parrows\"     \"paxes\"       \"pbackground\" \"pellipses\"   ##  [6] \"pgrid\"       \"plabels\"     \"plegend\"     \"plines\"      \"pnb\"         ## [11] \"porigin\"     \"ppalette\"    \"ppoints\"     \"ppolygons\"   \"pSp\"         ## [16] \"psub\"        \"ptable\" adegpar(\"ppoints\") ## $ppoints ## $ppoints$alpha ## [1] 1 ##  ## $ppoints$cex ## [1] 1 ##  ## $ppoints$col ## [1] \"black\" ##  ## $ppoints$pch ## [1] 20 ##  ## $ppoints$fill ## [1] \"black\" adegpar()$ppoints ## $alpha ## [1] 1 ##  ## $cex ## [1] 1 ##  ## $col ## [1] \"black\" ##  ## $pch ## [1] 20 ##  ## $fill ## [1] \"black\""},{"path":"/articles/adegraphics.html","id":"global-assignment","dir":"Articles","previous_headings":"Customizing a graph > Parameters in adeg.par","what":"Global assignment","title":"The `adegraphics` package","text":"adegpar function allows modify globally values graphical parameters changes affect subsequent displays. example, update size/color labels add axes plot:  adegpar function can accept numerous graphical parameters, can used define graphical themes. next releases adegraphics offer functionalities easily create, edit store graphical themes. , reassign original default parameters:","code":"oldadegpar <- adegpar() adegpar(\"plabels\") ## $plabels ## $plabels$alpha ## [1] 1 ##  ## $plabels$cex ## [1] 1 ##  ## $plabels$col ## [1] \"black\" ##  ## $plabels$srt ## [1] \"horizontal\" ##  ## $plabels$optim ## [1] FALSE ##  ## $plabels$boxes ## $plabels$boxes$alpha ## [1] 1 ##  ## $plabels$boxes$border ## [1] \"black\" ##  ## $plabels$boxes$col ## [1] \"white\" ##  ## $plabels$boxes$draw ## [1] TRUE ##  ## $plabels$boxes$lwd ## [1] 1 ##  ## $plabels$boxes$lty ## [1] 1 g13 <- s.label(dfxy = pca1$li, plot = FALSE) adegpar(plabels = list(col = \"blue\", cex = 1.5), paxes.draw = TRUE) adegpar(\"plabels\") ## $plabels ## $plabels$alpha ## [1] 1 ##  ## $plabels$cex ## [1] 1.5 ##  ## $plabels$col ## [1] \"blue\" ##  ## $plabels$srt ## [1] \"horizontal\" ##  ## $plabels$optim ## [1] FALSE ##  ## $plabels$boxes ## $plabels$boxes$alpha ## [1] 1 ##  ## $plabels$boxes$border ## [1] \"black\" ##  ## $plabels$boxes$col ## [1] \"white\" ##  ## $plabels$boxes$draw ## [1] TRUE ##  ## $plabels$boxes$lwd ## [1] 1 ##  ## $plabels$boxes$lty ## [1] 1 g14 <- s.label(dfxy = pca1$li, plot = FALSE) ADEgS(c(g13, g14), layout = c(1, 2)) adegpar(oldadegpar)"},{"path":"/articles/adegraphics.html","id":"local-assignment","dir":"Articles","previous_headings":"Customizing a graph > Parameters in adeg.par","what":"Local assignment","title":"The `adegraphics` package","text":"second option update graphical parameters locally changes modify object created. done using dots (...) argument call user function. case, default values parameters global environment modified:  previous example, can see parameters can either specified using â€™.â€™ separator list. instance, using plabels.cex = 0 plabels = list(cex = 0) strictly equivalent. Moreover, partial names can used ambiguity (plab.ce = 0 example).","code":"adegpar(\"ppoints\") ## $ppoints ## $ppoints$alpha ## [1] 1 ##  ## $ppoints$cex ## [1] 1 ##  ## $ppoints$col ## [1] \"black\" ##  ## $ppoints$pch ## [1] 20 ##  ## $ppoints$fill ## [1] \"black\" s.label(dfxy = pca1$li, plabels.cex = 0, ppoints = list(col = c(2, 4, 5), cex = 1.5, pch = 15)) adegpar(\"ppoints\") ## $ppoints ## $ppoints$alpha ## [1] 1 ##  ## $ppoints$cex ## [1] 1 ##  ## $ppoints$col ## [1] \"black\" ##  ## $ppoints$pch ## [1] 20 ##  ## $ppoints$fill ## [1] \"black\""},{"path":"/articles/adegraphics.html","id":"parameters-in-g-args","dir":"Articles","previous_headings":"Customizing a graph","what":"Parameters in g.args","title":"The `adegraphics` package","text":"g.args slot list parameters specific function used (thus class returned object). Several parameters general used adegraphics functions: xlim, ylim: limits graph x y axes main, sub: main title subtitle xlab, ylab: labels x y axes scales: list determining x y axes (tick marks dans labels) drawn; scales parameter xyplot function lattice ADEg.S2 objects can also contain spatial information (map stored Spatial object neighborhood stored nb object): Sp, sp.layout: objects sp package display spatial objects, Sp maps sp.layout spatial widgets North arrow, scale, etc. nbobject: object class nb listw display neighbor graphs. facets (see Partitioning data (facets) section) argument used, users can modify parameter samelimits: TRUE, graphs limits whereas limits computed subgraph independently FALSE. example, considering jv73 data set, subgraph computed limits labels scattered:  Several g.args parameters can updated according class created object (see Figure 2).","code":"s.label(pca2$li, facets = jv73$fac.riv, samelimits = FALSE)"},{"path":"/articles/adegraphics.html","id":"parameters-applied-on-a-adegs","dir":"Articles","previous_headings":"Customizing a graph","what":"Parameters applied on a ADEgS","title":"The `adegraphics` package","text":"Users can either apply changes graphs update one graph. ADEgS, apply changes graphs contained ADEgS, syntax similar one described ADEg object. example, background color can changed graphs g10 using pbackground.col parameter.  change parameters given graph, name parameter must preceded name subgraph. supposes names subgraphs known. example, modify two graphs:","code":"g15 <- plot(coi1, pbackground.col = \"steelblue\") names(g15) ## [1] \"Xax\"       \"Yax\"       \"eig\"       \"XYmatch\"   \"Yloadings\" \"Xloadings\" plot(coi1, XYmatch.pbackground.col = \"steelblue\",  XYmatch.pgrid.col = \"red\",       eig.ppolygons.col = \"orange\")"},{"path":"/articles/adegraphics.html","id":"using-adegraphics-functions-in-your-package","dir":"Articles","previous_headings":"","what":"Using adegraphics functions in your package","title":"The `adegraphics` package","text":"section, illustrate adegraphics functionalities can used implement graphical functions package. created objet class track contains vector distance time. object class track, wish represent different components data: histogram distances histogram speeds (.e., distance / time) 2D plot representing distance, time line corresponding linear model predict distance time corresponding multiple plot can done using adegraphics functions:  facilitate graphical representation object class track, simplest solution design function plot class. illustrate define function particular emphasis management graphical parameters. function provided detail different steps. first step, arguments given user dots (â€¦) argument managed. name given subgraph stored vector graphnames. , function sortparamADEgS associates graphical parameters dots (â€¦) argument subgraph. prefix specified matches name graph (e.g., histDist.pbackground.col = grey), parameter applied graphic specified (e.g., called histDist). prefix specified (e.g., pbackground.col = grey), parameter applied subgraphs. function sortparamADEgS returns list (length equal number subgraph) lists graphical parameters. second step, default values graphical parameters modified. default parameters stored list structure one produced sortparamADEgS (.e., names corresponding contained graphsnames). , modifyList function applied merge user defaults values paramaters (parameter specified user default, value given user used). third step, subgraph created. , create two C1.hist objects superpose S2.label object trellis one. functions .call substitute used provide pretty call subgraph (stored Call slot). final step, multiple graph build creation new ADEgS object possibly plotted. plot.track function can used :  Graphical parameters can modified :","code":"tra1 <- list() tra1$time <- runif(300) tra1$distance <- tra1$time * 5 + rnorm(300) class(tra1) <- \"track\" g1 <- s1d.hist(tra1$distance, psub.text = \"distance\", ppolygons.col = \"blue\",                 pgrid.draw = FALSE, plot = FALSE) g2 <- s1d.hist(tra1$distance / tra1$time, psub.text = \"speed\", ppolygons.col = \"red\",                 plot = FALSE) g31 <- s.label(cbind(tra1$time, tra1$distance), paxes = list(aspectratio = \"fill\",                 draw = TRUE), plot = FALSE) g32 <- xyplot(tra1$distance ~ tra1$time, aspect = g31@adeg.par$paxes$aspectratio,                panel = function(x, y) {panel.lmline(x, y)}) g3 <- superpose(g31, g32) G <- ADEgS(list(g1, g2, g3)) plot.track <- function(x, pos = -1, storeData = TRUE, plot = TRUE, ...) {    ## step 1 : sort parameters for each graph  graphsnames <- c(\"histDist\", \"histSpeed\", \"regression\")  sortparameters <- sortparamADEgS(..., graphsnames = graphsnames,                                    nbsubgraphs = c(1, 1, 2))    ## step 2 : define default values for graphical parameters  params <- list()  params[[1]] <- list(psub = list(text = \"distance\"), ppolygons = list(col = \"blue\"),                       pgrid = list(draw = FALSE))  params[[2]] <- list(psub = list(text = \"speed\"), ppolygons = list(col = \"red\"),                       pgrid = list(draw = FALSE))  params[[3]] <- list()  params[[3]]$l1 <- list(paxes = list(aspectratio = \"fill\", draw = TRUE))  params[[3]]$l2 <- list()  names(params) <- graphsnames  sortparameters <- modifyList(params, sortparameters, keep.null = TRUE)    ## step 3 : create each individual plot (ADEg)  g1 <- do.call(\"s1d.hist\", c(list(score = substitute(x$distance), plot = FALSE,                 storeData = storeData, pos = pos - 2), sortparameters[[1]]))  g2 <- do.call(\"s1d.hist\", c(list(score = substitute(x$distance / x$time),                 plot = FALSE, storeData = storeData, pos = pos - 2), sortparameters[[2]]))  g31 <- do.call(\"s.label\", c(list(dfxy = substitute(cbind(x$time, x$distance)), plot =                 FALSE, storeData = storeData, pos = pos - 2), sortparameters[[3]][[1]]))  g32 <- xyplot(x$distance ~ x$time, aspect = g31@adeg.par$paxes$aspectratio,                panel = function(x, y) {panel.lmline(x, y)})  g3 <- do.call(\"superpose\", list(g31, g32))  g3@Call <- call(\"superpose\", g31@Call, g32$call)      ## step 4 : create the multiple plot (ADEgS)  lay <- matrix(1:3, 1, 3)  object <- new(Class = \"ADEgS\", ADEglist = list(g1, g2, g3), positions =                 layout2position(lay), add = matrix(0, ncol = 3, nrow = 3),                 Call = match.call())  names(object) <- graphsnames  if(plot)    print(object)  invisible(object) } plot(tra1) plot(tra1, histDist.ppoly.col = \"green\", pbackground.col = \"grey\")"},{"path":[]},{"path":"/articles/adegraphics.html","id":"labels-customization","dir":"Articles","previous_headings":"Examples","what":"Labels customization","title":"The `adegraphics` package","text":"","code":"data(meaudret) g16 <- s.label(pca3$li, plot = FALSE) g17 <- s.label(pca3$li, ppoints.col= \"red\", plabels = list(box = list(draw = FALSE),    optim = TRUE), plot = FALSE) ADEgS(c(g16, g17), layout = c(1, 2))"},{"path":"/articles/adegraphics.html","id":"ellipses-stars-and-convex-hulls","dir":"Articles","previous_headings":"Examples","what":"Ellipses, stars and convex hulls","title":"The `adegraphics` package","text":"","code":"g18 <- s.class(pca3$li, fac = meaudret$design$season, plot = FALSE) g19 <- s.class(pca3$li, fac = meaudret$design$season, ellipseSize = 0,    chullSize = 1, starSize = 0.5, col = TRUE, plot = FALSE) g20 <- s.class(pca3$li, fac = meaudret$design$season, pellipses.lwd = 2,    pellipses.border = 2:5, pellipses.col = 2:5, plot = FALSE) g21 <- s.class(pca3$li, fac = meaudret$design$season, ellipseSize = 0,    chullSize = 0, ppolygons.lwd = 2, plines.col = 2:5, starSize = 1.2, plot = FALSE) ADEgS(c(g18, g19, g20, g21), layout = c(2, 2))"},{"path":"/articles/adegraphics.html","id":"values-and-legend","dir":"Articles","previous_headings":"Examples","what":"Values and legend","title":"The `adegraphics` package","text":"","code":"data(rpjdl) coa2 <- dudi.coa(rpjdl$fau, scannf = FALSE, nf = 3) g22 <- s.value(coa2$li, coa2$li[,3], plot = FALSE) g23 <- s.value(coa2$li, coa2$li[,3], method = \"color\", ppoints.cex = 0.8,    plegend.size= 0.8, plot = FALSE) g24 <- s.value(coa2$li, coa2$li[,3], plegend.size = 0.8, ppoints.cex = 0.8,    symbol = \"square\", method = \"color\", key = list(columns = 1),    col = colorRampPalette(c(\"yellow\", \"blue\"))(6), plot = FALSE) g25 <- s.value(coa2$li, coa2$li[, 3], center = 0, method = \"size\", ppoints.cex = 0.6,    symbol = \"circle\", col = c(\"yellow\", \"red\"), plot = FALSE) ADEgS(c(g22, g23, g24, g25), layout = c(2, 2))"},{"path":"/articles/adegraphics.html","id":"d-plot","dir":"Articles","previous_headings":"Examples","what":"1-D plot","title":"The `adegraphics` package","text":"","code":"score1 <- c(rnorm(1000, mean = -0.5, sd = 0.5), rnorm(1000, mean = 1)) fac1 <- rep(c(\"A\", \"B\"), each = 1000) g26 <- s1d.density(score1, fac1, pback.col = \"grey75\", plot = FALSE) g27 <- s1d.density(score1, fac1, col = c(2, 4), plot = FALSE) g28 <- s1d.density(score1, fac1, col = c(2, 4), p1d.reverse = TRUE, p1d.horizontal = FALSE,    p1d.rug.draw = FALSE, plot = FALSE) g29 <- s1d.density(score1, fac1, col = c(2, 4), ppolygons.alpha = 0.2,    p1d = list(rug = list(tck = 1, line = FALSE)), plot = FALSE) ADEgS(c(g26, g27, g28, g29), layout = c(2, 2))"},{"path":"/articles/adegraphics.html","id":"maps-and-neighbor-graphs","dir":"Articles","previous_headings":"Examples","what":"Maps and neighbor graphs","title":"The `adegraphics` package","text":"","code":"if(require(Guerry)) {   library(sp)   data(gfrance85)   region.names <- data.frame(gfrance85)[, 5]   col.region <- colors()[c(149, 254, 468, 552, 26)]   g30 <- s.class(coordinates(gfrance85), region.names, porigin.include = FALSE, plot = FALSE)   g31 <- s.class(coordinates(gfrance85), region.names, ellipseSize = 0, starSize = 0,                  Sp = gfrance85, pgrid.draw = FALSE, pSp.col = col.region[region.names], pSp.alpha = 0.4,                  plot = FALSE)   ADEgS(c(g30, g31), layout = c(1, 2)) } ## Loading required package: Guerry # if(require(Guerry)) { #   s.Spatial(gfrance85[,7:12]) # } data(mafragh, package = \"ade4\") g32 <- s.label(mafragh$xy, nb = mafragh$nb, plot = FALSE) g33 <- s.label(mafragh$xy, nb = mafragh$nb, pnb.ed.col = \"red\", plab.cex = 0,    pnb.node = list(cex = 3, col = \"blue\"), ppoints.col = \"green\", plot = FALSE) ADEgS(c(g32, g33), layout = c(1, 2))"},{"path":"/articles/adegraphics.html","id":"ternary-plots","dir":"Articles","previous_headings":"Examples","what":"Ternary plots","title":"The `adegraphics` package","text":"","code":"data(euro123, package = \"ade4\") df <- rbind.data.frame(euro123$in78, euro123$in86, euro123$in97) row.names(df) <- paste(row.names(euro123$in78), rep(c(1, 2, 3), rep(12, 3)), sep = \"\") g34 <- triangle.label(df, label = row.names(df), showposition = TRUE, plot = FALSE) g35 <- triangle.label(euro123$in78, plabels.cex = 0, ppoints.cex = 2, addmean = TRUE,    show = FALSE, plot = FALSE) ADEgS(c(g34, g35), layout = c(1, 2))"},{"path":"/articles/adegraphics.html","id":"appendix","dir":"Articles","previous_headings":"","what":"Appendix","title":"The `adegraphics` package","text":"appendix summarizes main changes ade4 adegraphics. line corresponds graphical argument defined ade4 equivalent adegraphics given.","code":""},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"AurÃ©lie Siberchicot. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"AurÃ©lie Siberchicot, Alice Julien-LaferriÃ¨re, Anne-BÃ©atrice Dufour, Jean Thioulouse StÃ©phane Dray (2017). adegraphics: S4 Lattice-Based Package Representation Multivariate Data. R Journal. 9:2. 198--212. https://journal.r-project.org/archive/2017/RJ-2017-042/index.html Jean Thioulouse, StÃ©phane Dray, Anne-BÃ©atrice Dufour, AurÃ©lie Siberchicot, Thibaut Jombart Sandrine Pavoine (2018). Multivariate Analysis Ecological Data ade4. Springer. https://doi.org/10.1007/978-1-4939-8850-1","code":"@Article{,   title = {{adegraphics: An S4 Lattice-Based Package for the Representation of Multivariate Data}},   author = {AurÃ©lie Siberchicot and Alice Julien-LaferriÃ¨re and Anne-BÃ©atrice Dufour and Jean Thioulouse and StÃ©phane Dray},   journal = {{The R Journal}},   year = {2017},   volume = {9},   pages = {198--212},   number = {2},   url = {https://journal.r-project.org/archive/2017/RJ-2017-042/index.html}, } @Book{,   title = {Multivariate Analysis of Ecological Data with {ade4}},   author = {Jean Thioulouse and StÃ©phane Dray and Anne-BÃ©atrice Dufour and AurÃ©lie Siberchicot and Thibaut Jombart and Sandrine Pavoine},   year = {2018},   publisher = {Springer},   doi = {10.1007/978-1-4939-8850-1}, }"},{"path":"/index.html","id":"adegraphics","dir":"","previous_headings":"","what":"An S4 Lattice-Based Package for the Representation of Multivariate Data","title":"An S4 Lattice-Based Package for the Representation of Multivariate Data","text":"S4 Lattice-Based Package Representation Multivariate Data Please note! Since January 2024, repository belonged adeverse organization. avoid confusion, strongly recommend updating existing local clones point new repository URL. can using git remote command line: git remote set-url origin git@github.com:adeverse/adegraphics.git git remote set-url origin https://github.com/adeverse/adegraphics.git Read wiki information","code":""},{"path":"/index.html","id":"installing-adegraphics","dir":"","previous_headings":"","what":"Installing adegraphics","title":"An S4 Lattice-Based Package for the Representation of Multivariate Data","text":"install development version github: Install release version devtools CRAN install.packages(\"devtools\"). Make sure working development environment. Windows: Install Rtools. Mac: Install Xcode Mac App Store. Linux: Install compiler various development libraries (details vary across different flavors Linux). : stable version can installed CRAN using: installed, package can loaded using: wish install development environments Rtools (Windows) / XCode (Mac), can get binary packages : Windows macOS","code":"library(devtools) install_github(\"adeverse/adegraphics\") install.packages(\"adegraphics\") library(\"adegraphics\")"},{"path":"/reference/ADEg-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ADEg â€” ADEg-class","title":"Class ADEg â€” ADEg-class","text":"object ADEg class simple graphic.   object can blended another one (superposition, insertion /juxtaposition)    form complex graphics (ADEgS object). ADEg class virtual class, .e. class possible create objects heirs.   class five son classes : ADEg.S1, ADEg.S2, ADEg.C1, ADEg.T ADEg.Tr.","code":""},{"path":"/reference/ADEg-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class ADEg â€” ADEg-class","text":"None object class can instantiated.","code":""},{"path":"/reference/ADEg-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class ADEg â€” ADEg-class","text":"trellis.par list parameters lattice call.        passed directly par.settings arguments lattice function. adeg.par list graphical parameters, corresponding ones        given adegpar() function. lattice.call list two elements create trellis object: graphictype: lattice function use arguments: parameters obtain trellis object g.args list containing parameters linked created object ADEg class: xlim, ylim main, sub xlab, ylab samelimits scales: list scales informations (ticks, marks labels x-axis y-axis)            form lattice argument scales xyplot function stats list internal preliminary calculations s.misc list internal parameters Call object class call","code":""},{"path":"/reference/ADEg-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class ADEg â€” ADEg-class","text":"panelbase signature(object = \"ADEg\"): draws grid text produces graphical output        graphical object getcall signature(object = \"ADEg\"): returns Call slot getlatticecall signature(object = \"ADEg\"): returns lattice.call slot getstats signature(object = \"ADEg\"): returns stats slot getparameters signature(object = \"ADEg\", number):       number 1, returns trellis.par slot,         2, returns adeg.par slot       0, returns slots add.ADEg signature(object = \"ADEg\"): superposes ADEg        current one plotted + signature(e1 = \"ADEg\", e2 = \"ADEg\"): superposes e2 e1 superpose signature(g1 = \"ADEgORtrellis\", g2 = \"ADEgORtrellis\", = \"\", plot = \"\"):        creates new ADEgS object performing superposition g2 g1. printSuperpose signature(g1 = \"ADEgORtrellis\", refg = \"ADEgORtrellis\"):        internal method, users. cbindADEg signature(g1 = \"ADEgORADEgS\", g2 = \"ADEgORADEgS\"):       creates new \"ADEgS\" object combining g1 g2. rbindADEg signature(g1 = \"ADEgORADEgS\", g2 = \"ADEgORADEgS\"):       creates new \"ADEgS\" object combining g1 g2 rows. insert signature(graphics = \"ADEgORtrellis\", oldgraphics = \"missing\", posi, ratio, inset, plot, ):        creates new ADEgS object performing insertion graphics current device. insert signature(graphics = \"ADEgORtrellis\", oldgraphics = \"ADEg\", posi, ratio, inset, plot):        creates new ADEgS object performing insertion graphics oldgraphics. show signature(x = \"ADEg\"): prints ADEg object plot signature(x = \"ADEg\"): prints ADEg object print signature(x = \"ADEg\"): displays ADEg object       current device new one update signature(object = \"ADEg\"): modifies graphical parameters        ADEg creation, updates current display returns modified ADEg","code":""},{"path":"/reference/ADEg-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class ADEg â€” ADEg-class","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":"/reference/ADEg-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Class ADEg â€” ADEg-class","text":"ADEg creation, various graphical parameters can passed dots (...) arguments. parameters listed adegpar() can changed, even       modify graphic representation chosen. lattice parameters listed trellis.par.get() can also changed. limits, main sub title, axes labels can changed using keys        xlim, ylim, main, sub, xlab ylab. neighbouring graph (object class nb listw) spatial one (object       class sp) can display background using keys nbobject, Sp sp.layout.","code":""},{"path":[]},{"path":"/reference/ADEg-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class ADEg â€” ADEg-class","text":"","code":"showClass(\"ADEg\") #> Virtual Class \"ADEg\" [package \"adegraphics\"] #>  #> Slots: #>                                                                         #> Name:   trellis.par     adeg.par lattice.call       g.args        stats #> Class:         list         list         list         list         list #>                                  #> Name:        s.misc         Call #> Class:         list         call #>  #> Extends: \"ADEgORtrellis\", \"ADEgORADEgSORtrellis\" #>  #> Known Subclasses:  #> Class \"ADEg.C1\", directly #> Class \"ADEg.S1\", directly #> Class \"ADEg.S2\", directly #> Class \"ADEg.T\", directly #> Class \"ADEg.Tr\", directly #> Class \"C1.barchart\", by class \"ADEg.C1\", distance 2 #> Class \"C1.curve\", by class \"ADEg.C1\", distance 2 #> Class \"C1.density\", by class \"ADEg.C1\", distance 2 #> Class \"C1.gauss\", by class \"ADEg.C1\", distance 2 #> Class \"C1.dotplot\", by class \"ADEg.C1\", distance 2 #> Class \"C1.hist\", by class \"ADEg.C1\", distance 2 #> Class \"C1.interval\", by class \"ADEg.C1\", distance 2 #> Class \"S1.boxplot\", by class \"ADEg.S1\", distance 2 #> Class \"S1.class\", by class \"ADEg.S1\", distance 2 #> Class \"S1.distri\", by class \"ADEg.S1\", distance 2 #> Class \"S1.label\", by class \"ADEg.S1\", distance 2 #> Class \"S1.match\", by class \"ADEg.S1\", distance 2 #> Class \"S2.arrow\", by class \"ADEg.S2\", distance 2 #> Class \"S2.class\", by class \"ADEg.S2\", distance 2 #> Class \"S2.corcircle\", by class \"ADEg.S2\", distance 2 #> Class \"S2.density\", by class \"ADEg.S2\", distance 2 #> Class \"S2.distri\", by class \"ADEg.S2\", distance 2 #> Class \"S2.image\", by class \"ADEg.S2\", distance 2 #> Class \"S2.label\", by class \"ADEg.S2\", distance 2 #> Class \"S2.logo\", by class \"ADEg.S2\", distance 2 #> Class \"S2.match\", by class \"ADEg.S2\", distance 2 #> Class \"S2.traject\", by class \"ADEg.S2\", distance 2 #> Class \"S2.value\", by class \"ADEg.S2\", distance 2 #> Class \"T.image\", by class \"ADEg.T\", distance 2 #> Class \"T.value\", by class \"ADEg.T\", distance 2 #> Class \"C1.curves\", by class \"ADEg.C1\", distance 3 #> Class \"T.cont\", by class \"ADEg.T\", distance 3 #> Class \"Tr.class\", by class \"ADEg.Tr\", distance 2 #> Class \"Tr.label\", by class \"ADEg.Tr\", distance 2 #> Class \"Tr.match\", by class \"ADEg.Tr\", distance 2 #> Class \"Tr.traject\", by class \"ADEg.Tr\", distance 2"},{"path":"/reference/ADEg.C1-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ADEg.C1 â€” ADEg.C1-class","title":"Class ADEg.C1 â€” ADEg.C1-class","text":"object ADEg.C1 class represents unidimensional data two dimensions. ADEg.C1 class virtual class, .e. class possible create objects heirs.   class inherits ADEg class    three son classes : C1.barchart, C1.curve, C1.density, C1.dotplot, C1.gauss,    C1.hist, C1.interval","code":""},{"path":"/reference/ADEg.C1-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class ADEg.C1 â€” ADEg.C1-class","text":"None object class can instantiated.","code":""},{"path":"/reference/ADEg.C1-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class ADEg.C1 â€” ADEg.C1-class","text":"data list containing data data's name. score: displayed values form numeric vector, name matching call. frame: positive null integer. number frame containing data (used          sys.frame(..., env = data$frame)). data stored (.e. data$storeData = FALSE). storeData: logical indicating data stored returned object.          FALSE, names data arguments stored. trellis.par list parameters lattice call.        passed directly par.settings arguments lattice function. adeg.par list graphical parameters, corresponding ones        given adegpar() function. lattice.call list two elements create trellis object: graphictype: xyplot arguments: parameters obtain trellis object g.args list containing method parameters linked created object ADEg.C1 class stats list internal preliminary calculations s.misc list others internal parameters: hori.update: logical indicating sense direction graphics updating backgrid: list two elements grid lines. backgrid$x defines coordinates            lines (horizontal vertical depending graphics orientation) backgrid$d grid mesh Call object class call","code":""},{"path":"/reference/ADEg.C1-class.html","id":"extends","dir":"Reference","previous_headings":"","what":"Extends","title":"Class ADEg.C1 â€” ADEg.C1-class","text":"Class ADEg, directly.","code":""},{"path":"/reference/ADEg.C1-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class ADEg.C1 â€” ADEg.C1-class","text":"prepare signature(object = \"ADEg.C1\"):        performs calculations display object (e.g. limits, grid axis calculations) setlatticecall signature(object = \"ADEg.C1\"):        prepares lattice.call slot panelbase signature(object = \"ADEg.C1\"):        defines graphical background (e.g. grid, rugs box) gettrellis signature(object = \"ADEg.C1\"):        converts graphic trellis object lattice class","code":""},{"path":"/reference/ADEg.C1-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Class ADEg.C1 â€” ADEg.C1-class","text":"ADEg.S1 class ADEg.C1 class used represent unidimensional information (e.g. score).   difference two classes mainly ideological : ADEg.S1 object representation one    dimension (e.g. one line) ADEg.C1 object representation two dimensions (e.g. curves).","code":""},{"path":"/reference/ADEg.C1-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class ADEg.C1 â€” ADEg.C1-class","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/ADEg.C1-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class ADEg.C1 â€” ADEg.C1-class","text":"","code":"showClass(\"ADEg.C1\") #> Virtual Class \"ADEg.C1\" [package \"adegraphics\"] #>  #> Slots: #>                                                                         #> Name:          data  trellis.par     adeg.par lattice.call       g.args #> Class:         list         list         list         list         list #>                                               #> Name:         stats       s.misc         Call #> Class:         list         list         call #>  #> Extends:  #> Class \"ADEg\", directly #> Class \"ADEgORtrellis\", by class \"ADEg\", distance 2 #> Class \"ADEgORADEgSORtrellis\", by class \"ADEg\", distance 2 #>  #> Known Subclasses:  #> Class \"C1.barchart\", directly #> Class \"C1.curve\", directly #> Class \"C1.density\", directly #> Class \"C1.gauss\", directly #> Class \"C1.dotplot\", directly #> Class \"C1.hist\", directly #> Class \"C1.interval\", directly #> Class \"C1.curves\", by class \"C1.curve\", distance 2"},{"path":"/reference/ADEg.S1-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ADEg.S1 â€” ADEg.S1-class","title":"Class ADEg.S1 â€” ADEg.S1-class","text":"object ADEg.S1 class represents unidimensional data one dimension. ADEg.S1 class virtual class, .e. class possible create objects heirs.   class inherits ADEg class    five son classes : S1.boxplot, S1.class, S1.distri, S1.label S1.match.","code":""},{"path":"/reference/ADEg.S1-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class ADEg.S1 â€” ADEg.S1-class","text":"None object class can instantiated.","code":""},{"path":"/reference/ADEg.S1-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class ADEg.S1 â€” ADEg.S1-class","text":"data list containing data data's name. score: displayed values form numeric vector, name matching call. : index value. frame: positive null integer. number frame containing data (used          sys.frame(..., env = data$frame)). data stored (.e. data$storeData = FALSE). storeData: logical indicating data stored returned object.          FALSE, names data arguments stored. trellis.par list parameters lattice call.        passed directly par.settings arguments lattice function. adeg.par list graphical parameters, corresponding ones        given adegpar() function. lattice.call list two elements create trellis object: graphictype: xyplot arguments: parameters obtain trellis object g.args list containing method parameters linked created object ADEg.S1 class. stats list internal preliminary calculations s.misc list others internal parameters: hori.update: logical indicating sense direction graphics updating backgrid: list two elements grid lines. backgrid$x defines coordinates            lines (horizontal vertical depending graphics orientation) backgrid$d grid mesh rug: index value indicating rugs drawn Call object class call","code":""},{"path":"/reference/ADEg.S1-class.html","id":"extends","dir":"Reference","previous_headings":"","what":"Extends","title":"Class ADEg.S1 â€” ADEg.S1-class","text":"Class ADEg, directly.","code":""},{"path":"/reference/ADEg.S1-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class ADEg.S1 â€” ADEg.S1-class","text":"prepare signature(object = \"ADEg.S1\"):        performs calculations display object (e.g. limits, grid axis calculations) setlatticecall signature(object = \"ADEg.S1\"):        prepares lattice.call slot panelbase signature(object = \"ADEg.S1\"):        defines graphical background (e.g. grid, rugs box) gettrellis signature(object = \"ADEg.S1\"):        converts graphic trellis object lattice class zoom signature(object = \"ADEg.S1\", zoom = \"numeric\", center = \"missing\"):        performs zoom (zoom < 1) (zoom > 1) centered, one-dimension zoom signature(object = \"ADEg.S1\", zoom = \"numeric\", center = \"numeric\"):        performs zoom (zoom < 1) (zoom > 1) around center passed parameter, one-dimension","code":""},{"path":"/reference/ADEg.S1-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Class ADEg.S1 â€” ADEg.S1-class","text":"Various graphical parameters used display ADEg.S1 object.    list p1d adegpar() thought specific ADEg.S1 objects. ADEg.S1 class ADEg.C1 class used represent unidimensional information (e.g. score).   difference two classes mainly ideological : ADEg.S1 object representation one    dimension (e.g. one line) ADEg.C1 object representation two dimensions (e.g. curves).","code":""},{"path":"/reference/ADEg.S1-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class ADEg.S1 â€” ADEg.S1-class","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/ADEg.S1-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class ADEg.S1 â€” ADEg.S1-class","text":"","code":"showClass(\"ADEg.S1\") #> Virtual Class \"ADEg.S1\" [package \"adegraphics\"] #>  #> Slots: #>                                                                         #> Name:          data  trellis.par     adeg.par lattice.call       g.args #> Class:         list         list         list         list         list #>                                               #> Name:         stats       s.misc         Call #> Class:         list         list         call #>  #> Extends:  #> Class \"ADEg\", directly #> Class \"ADEgORtrellis\", by class \"ADEg\", distance 2 #> Class \"ADEgORADEgSORtrellis\", by class \"ADEg\", distance 2 #>  #> Known Subclasses: \"S1.boxplot\", \"S1.class\", \"S1.distri\", \"S1.label\", \"S1.match\" adegpar(\"p1d\") #> $p1d #> $p1d$horizontal #> [1] TRUE #>  #> $p1d$reverse #> [1] FALSE #>  #> $p1d$rug #> $p1d$rug$draw #> [1] TRUE #>  #> $p1d$rug$tck #> [1] 0.5 #>  #> $p1d$rug$margin #> [1] 0.07 #>  #> $p1d$rug$line #> [1] TRUE #>  #>  #>"},{"path":"/reference/ADEg.S2-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ADEg.S2 â€” ADEg.S2-class","title":"Class ADEg.S2 â€” ADEg.S2-class","text":"object ADEg.S2 class represents bi-dimensional data. ADEg.S2 class virtual class, .e. class possible create objects heirs.   class inherits ADEg class    eleven son classes : S2.arrow, S2.class, S2.corcircle, S2.density, S2.distri,    S2.image, S2.label, S2.logo, S2.match, S2.traject S2.value.","code":""},{"path":"/reference/ADEg.S2-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class ADEg.S2 â€” ADEg.S2-class","text":"None object class can instantiated.","code":""},{"path":"/reference/ADEg.S2-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class ADEg.S2 â€” ADEg.S2-class","text":"data list containing data data's name. dfxy: displayed values form data frame, name matching call. xax: integer vector indicating columns dfxy kept x-axes. yax: integer vector indicating columns dfxy kept y-axes. frame: positive null integer. number frame containing data (used          sys.frame(..., env = data$frame)). data stored (.e. data$storeData = FALSE). storeData: logical indicating data stored returned object.          FALSE, names data arguments stored. trellis.par list parameters lattice call.        passed directly par.settings arguments lattice function. adeg.par list graphical parameters, corresponding ones        given adegpar() function. lattice.call list two elements create trellis object: graphictype: xyplot arguments: parameters obtain trellis object g.args list containing method parameters linked created object ADEg.S2 class: fullcircle: S2.corcircle objects method: S2.value objects symbol: S2.value objects center: S2.value objects stats list internal preliminary calculations s.misc list others internal parameters: xfullcircle.update yfullcircle.update: logical indicating circle size updating (S2.corcircle objects) plegend.update: logical indicating legend parameters updating breaks.update: logical indicating legend breaks updating backgrid: list elements grid lines Call object class call","code":""},{"path":"/reference/ADEg.S2-class.html","id":"extends","dir":"Reference","previous_headings":"","what":"Extends","title":"Class ADEg.S2 â€” ADEg.S2-class","text":"Class ADEg, directly.","code":""},{"path":"/reference/ADEg.S2-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class ADEg.S2 â€” ADEg.S2-class","text":"prepare signature(object = \"ADEg.S2\"):        performs calculations display object (e.g. limits, grid axis calculations) setlatticecall signature(object = \"ADEg.S2\"):        prepares lattice.call slot panelbase signature(object = \"ADEg.S2\"):        defines graphical background (e.g. grid box) gettrellis signature(object = \"ADEg.S2\"):        converts graphic trellis object lattice class zoom signature(object = \"ADEg.S2\", zoom = \"numeric\", center = \"missing\"):        performs zoom (zoom < 1) (zoom > 1) centered zoom signature(object = \"ADEg.S2\", zoom = \"numeric\",\tcenter = \"numeric\"):        performs zoom (zoom < 1) (zoom > 1) around center passed parameter (center two-length vector) addhist signature(object = \"ADEg.S2\"):        adds histograms density lines bi-dimensional graphics","code":""},{"path":"/reference/ADEg.S2-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class ADEg.S2 â€” ADEg.S2-class","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/ADEg.S2-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class ADEg.S2 â€” ADEg.S2-class","text":"","code":"showClass(\"ADEg.S2\") #> Virtual Class \"ADEg.S2\" [package \"adegraphics\"] #>  #> Slots: #>                                                                         #> Name:          data  trellis.par     adeg.par lattice.call       g.args #> Class:         list         list         list         list         list #>                                               #> Name:         stats       s.misc         Call #> Class:         list         list         call #>  #> Extends:  #> Class \"ADEg\", directly #> Class \"ADEgORtrellis\", by class \"ADEg\", distance 2 #> Class \"ADEgORADEgSORtrellis\", by class \"ADEg\", distance 2 #>  #> Known Subclasses: \"S2.arrow\", \"S2.class\", \"S2.corcircle\", \"S2.density\", \"S2.distri\", \"S2.image\",  #> \"S2.label\", \"S2.logo\", \"S2.match\", \"S2.traject\", \"S2.value\""},{"path":"/reference/ADEg.T-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ADEg.T â€” ADEg.T-class","title":"Class ADEg.T â€” ADEg.T-class","text":"object ADEg.T class represents table data. ADEg.T class virtual class, .e. class possible create objects heirs.   class inherits ADEg class    two son classes : T.image T.value.","code":""},{"path":"/reference/ADEg.T-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class ADEg.T â€” ADEg.T-class","text":"None object class can instantiated.","code":""},{"path":"/reference/ADEg.T-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class ADEg.T â€” ADEg.T-class","text":"data: list containing data data's name. dftab: displayed values can table, dist matrix         form data frame, name matching call coordsx: integer vector indicating columns dftab kept coordsy: integer vector indicating rows dftab kept labelsx: columns' labels labelsy: rows' labels \"frame: positive null integer. number frame containing data (used          sys.frame(..., env = data$frame)). data stored (.e. data$storeData = FALSE). storeData: logical indicating data stored returned object.          FALSE, names data arguments stored. trellis.par list parameters lattice call.        passed directly par.settings arguments lattice function. adeg.par list graphical parameters, corresponding ones        given adegpar() function. lattice.call list two elements create trellis object: graphictype: xyplot arguments: parameters obtain trellis object g.args list containing method parameters linked created object ADEg.T class: method: T.value objects symbol: T.value objects center: T.value objects stats list internal preliminary calculations s.misc list others internal parameters: breaks.update: logical indicating legend breaks updating axes$dx axes$dy: intervals cell size Call object class call","code":""},{"path":"/reference/ADEg.T-class.html","id":"extends","dir":"Reference","previous_headings":"","what":"Extends","title":"Class ADEg.T â€” ADEg.T-class","text":"Class ADEg, directly.","code":""},{"path":"/reference/ADEg.T-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class ADEg.T â€” ADEg.T-class","text":"prepare signature(object = \"ADEg.T\"):        performs calculations display object (e.g. limits, grid axis calculations) setlatticecall signature(object = \"ADEg.T\"):        prepares lattice.call slot panelbase signature(object = \"ADEg.T\"):        defines graphical background (e.g. axes, labels, ticks, box grid) gettrellis signature(object = \"ADEg.T\"):        converts graphic trellis object lattice class","code":""},{"path":"/reference/ADEg.T-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class ADEg.T â€” ADEg.T-class","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/ADEg.T-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class ADEg.T â€” ADEg.T-class","text":"","code":"showClass(\"ADEg.T\") #> Virtual Class \"ADEg.T\" [package \"adegraphics\"] #>  #> Slots: #>                                                                         #> Name:          data  trellis.par     adeg.par lattice.call       g.args #> Class:         list         list         list         list         list #>                                               #> Name:         stats       s.misc         Call #> Class:         list         list         call #>  #> Extends:  #> Class \"ADEg\", directly #> Class \"ADEgORtrellis\", by class \"ADEg\", distance 2 #> Class \"ADEgORADEgSORtrellis\", by class \"ADEg\", distance 2 #>  #> Known Subclasses:  #> Class \"T.image\", directly #> Class \"T.value\", directly #> Class \"T.cont\", by class \"T.value\", distance 2"},{"path":"/reference/ADEg.Tr-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"object ADEg.Tr class represents triangular coordinates 2D. ADEg.Tr class virtual class, .e. class possible create objects heirs.   class inherits ADEg class    three son classes : Tr.class, Tr.label, T.match T.traject.","code":""},{"path":"/reference/ADEg.Tr-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class ","text":"None object class can instantiated.","code":""},{"path":"/reference/ADEg.Tr-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class ","text":"data: list containing data data's name. dfxyz: displayed values form data frame three columns, name matching call. frame: positive null integer. number frame containing data (used          sys.frame(..., env = data$frame)). data stored (.e. data$storeData = FALSE). storeData: logical indicating data stored returned object.          FALSE, names data arguments stored. trellis.par list parameters lattice call.        passed directly par.settings arguments lattice function. adeg.par list graphical parameters, corresponding ones        given adegpar() function. lattice.call list two elements create trellis object: graphictype: xyplot arguments: parameters obtain trellis object g.args list containing method parameters linked created object ADEg.Tr class: max3d min3d: triangular limits adjust: logical adjust device limits stats list internal preliminary calculations s.misc list others internal parameters: adjust.update: logical indicating adjust slot updating cornerp: coordinates triangle extremities. lgrid: list containing three coordinates grid segments extremities(pts1,            pts2, pts3) value division (posgrid) Call object class call","code":""},{"path":"/reference/ADEg.Tr-class.html","id":"extends","dir":"Reference","previous_headings":"","what":"Extends","title":"Class ","text":"Class ADEg, directly.","code":""},{"path":"/reference/ADEg.Tr-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class ","text":"prepare signature(object = \"ADEg.Tr\"):        performs calculations display object (e.g. limits, grid axis calculations) setlatticecall signature(object = \"ADEg.Tr\"):        prepares lattice.call slot panelbase signature(object = \"ADEg.Tr\"):        defines graphical background (e.g. triangle grid) gettrellis signature(object = \"ADEg.Tr\"):        converts graphic trellis object lattice class","code":""},{"path":"/reference/ADEg.Tr-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class ","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/ADEg.Tr-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class ","text":"","code":"showClass(\"ADEg.Tr\") #> Virtual Class \"ADEg.Tr\" [package \"adegraphics\"] #>  #> Slots: #>                                                                         #> Name:          data  trellis.par     adeg.par lattice.call       g.args #> Class:         list         list         list         list         list #>                                               #> Name:         stats       s.misc         Call #> Class:         list         list         call #>  #> Extends:  #> Class \"ADEg\", directly #> Class \"ADEgORtrellis\", by class \"ADEg\", distance 2 #> Class \"ADEgORADEgSORtrellis\", by class \"ADEg\", distance 2 #>  #> Known Subclasses: \"Tr.class\", \"Tr.label\", \"Tr.match\", \"Tr.traject\""},{"path":"/reference/ADEgS-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"object ADEgS class complex graphic.   class allows superposition, insertion /juxtaposition several ADEg, trellis /ADEgS objects. ADEgS class neither father class son classes.","code":""},{"path":"/reference/ADEgS-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class ","text":"ADEgS objects can created calls form new(\"ADEgS\", ...). regular usage package use ADEgS, add.ADEg, superpose, insert + functions.","code":""},{"path":"/reference/ADEgS-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class ","text":"ADEglist list several trellis, ADEg /ADEgS objects. positions matrix four columns many rows number graphical objects ADEglist slot.       simple graphic, .e. row, coordinates top-right bottom-left hand corners npc unit (normalized parent coordinates). add square matrix many rows columns number graphical objects ADEglist slot.       value -th row j-th column equal 1 whether j-th graphical object ADEglist slot superpose -th graphical one.       Otherwise, value equal 0. Call object class call","code":""},{"path":"/reference/ADEgS-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class ","text":"[ signature(x = \"ADEgS\", = \"numeric\", j = \"missing\", drop = \"logical\"):       extracts -th sub-graphics x@ADEglist. can vector.        single number extracted graphic ADEg object, sub-selection        form ADEg drop TRUE form ADEgS otherwise. [ signature(x = \"ADEgS\", = \"numeric\", j = \"missing\", drop = \"missing\"):        previous method. drop FALSE default [[ signature(x = \"ADEgS\", = \"numeric\", j = \"missing\"):        extracts one sub-graphic, -th one, x@ADEglist [[ signature(x = \"ADEgS\", = \"character\", j = \"missing\"):        extracts one sub-graphic, named x@ADEglist [[<- signature(x = \"ADEgS\", = \"numeric\", j = \"missing\", value = \"ADEg\"):        replaces one sub graphic, -th one, ADEg object x@ADEglist [[<- signature(x = \"ADEgS\", = \"numeric\", j = \"missing\", value = \"ADEgS\"):        replaces one sub graphic, -th one, ADEgS object x@ADEglist $ signature(x = \"ADEgS\"):        extracts one sub-graphic name x@ADEglist getpositions signature(object = \"ADEgS\"):        returns positions matrix object, .e. object@positions getgraphics signature(object = \"ADEgS\"):        returns list graphics object,        .e. object@ADEglist getcall signature(object = \"ADEgS\"):        returns call object, .e. object@Call names signature(object = \"ADEgS\"):        returns graphics' names object, .e. names object@ADEglist names<- signature(object = \"ADEgS\"):        replaces graphics' names object, .e. names object@ADEglist length signature(x = \"ADEgS\"):        returns number graphics x, .e. length x@ADEglist plot signature(x = \"ADEgS\"): print print signature(x = \"ADEgS\"):        displays graphical elements one device using positions superposition management (x@add matrix) show signature(object = \"ADEgS\"): print superpose signature(g1 = \"ADEgS\", g2 = \"ADEg\", = \"numeric\", plot = \"logical\"):        creates new \"ADEgS\" object performing superposition g2 -th ADEg object g1.        object printed plot TRUE. superpose signature(g1 = \"ADEgS\", g2 = \"ADEg\", = \"numeric\", plot = \"\"):        creates new \"ADEgS\" object performing superposition g2 -th ADEg object g1.        object printed plot TRUE. superpose signature(g1 = \"ADEgS\", g2 = \"ADEg\", = \"missing\", plot = \"\"):        creates new \"ADEgS\" object performing superposition g2 last ADEg object g1.        object printed plot TRUE. superpose signature(g1 = \"ADEgS\", g2 = \"ADEgS\", = \"missing\", plot = \"\"):       creates new \"ADEgS\" object performing superposition two ADEgS length positions slot.        used g1 g2 created partition individual groups, variables analysis' axis. + signature(e1 = \"ADEg\", e2 = \"ADEgS\"):       creates new \"ADEgS\" object performing superposition e1 e2. + signature(e1 = \"ADEgS\", e2 = \"ADEg\"):       creates new \"ADEgS\" object performing superposition e2 e1. cbindADEg signature(g1 = \"ADEgORADEgS\", g2 = \"ADEgORADEgS\"):       creates new \"ADEgS\" object combining g1 g2 columns. rbindADEg signature(g1 = \"ADEgORADEgS\", g2 = \"ADEgORADEgS\"):       creates new \"ADEgS\" object combining g1 g2 rows. update signature(object = \"ADEgS\"):        modifies graphical parameters sub-graphics listed object@ADEglist /object's names        (key word names) /object@positions slot (key word positions), creation object.       current display updated modified object returned. insert signature(graphics = \"ADEgS\", oldgraphics = \"missing\", posi, ratio, inset, plot, , dispatch):        creates new \"ADEgS\" object performing insertion graphics current device. insert signature(graphics = \"ADEgS\", oldgraphics = \"ADEg\", posi, ratio, inset, plot):        creates new \"ADEgS\" object performing insertion graphics oldgraphics. insert signature(graphics = \"ADEgORtrellis\", oldgraphics = \"ADEgS\", posi, ratio, inset, plot, ):        creates new \"ADEgS\" object performing insertion graphics oldgraphics. insert signature(graphics = \"ADEgS\", oldgraphics = \"ADEgS\", posi, ratio, inset, plot, , dispatch):        creates new \"ADEgS\" object performing insertion graphics oldgraphics.","code":""},{"path":"/reference/ADEgS-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class ","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/ADEgS-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class ","text":"","code":"showClass(\"ADEgS\") #> Class \"ADEgS\" [package \"adegraphics\"] #>  #> Slots: #>                                                #> Name:   ADEglist positions       add      Call #> Class:      list    matrix    matrix      call #>  #> Extends: \"ADEgORADEgSORtrellis\""},{"path":"/reference/ADEgS.html","id":null,"dir":"Reference","previous_headings":"","what":"Creation of ADEgS objects â€” ADEgS","title":"Creation of ADEgS objects â€” ADEgS","text":"Creates displays \"ADEgS\" object, set ADEg, trellis /ADEgS objects,   managed superposition, insertion /juxtaposition.","code":""},{"path":"/reference/ADEgS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creation of ADEgS objects â€” ADEgS","text":"","code":"ADEgS(adeglist, positions, layout, add = NULL, plot = TRUE)"},{"path":"/reference/ADEgS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creation of ADEgS objects â€” ADEgS","text":"adeglist list several trellis, ADEg /ADEgS objects. positions matrix four columns many rows number graphical objects ADEglist slot.       simple graphic, .e. row, coordinates top-right bottom-left hand corners npc unit (normalized parent coordinates). layout layout indication two possible forms: list containing arguments layout function two-length vector containing rows' columns' number layout add square matrix many rows columns number graphical objects ADEglist slot.       value -th row j-th column equal 1 whether j-th graphical object ADEglist slot superpose -th graphical one.       Otherwise, value equal 0. plot logical. graphics displayed","code":""},{"path":"/reference/ADEgS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creation of ADEgS objects â€” ADEgS","text":"ADEgS object. plot = TRUE, created object displayed.","code":""},{"path":"/reference/ADEgS.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Creation of ADEgS objects â€” ADEgS","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/ADEgS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creation of ADEgS objects â€” ADEgS","text":"","code":"xy <- matrix(rnorm(20), ncol = 2) g1 <- s.label(xy)  g2 <- s.class(xy, fac = as.factor(rep(LETTERS[1:2], length.out = 10)), ppoints.cex = 0,   col = c(\"blue\", \"red\"))  g3 <- ADEgS(list(g1, g2), rbind(c(0, 0, 0.5, 1), c(0.5, 0, 1, 1)))  g4 <- ADEgS(list(g1, g2), layout = c(2, 1))  g5 <- ADEgS(list(g1, g2))  g6 <- ADEgS(list(g1, g2), add = matrix(c(0, 1, 0, 0), byrow = TRUE, ncol = 2))   data(olympic, package = \"ade4\") dudi1 <- ade4::dudi.pca(olympic$tab, scan = FALSE) g7 <- s.arrow(dudi1$li)  g8 <- s.corcircle(dudi1$co, lab = names(olympic$tab))  g9 <- ADEgS(list(g7, g8), rbind(c(0, 0, 0.5, 1), c(0.5, 0, 1, 1)))  g9[[1]]  g9[1, drop = FALSE]  length(g9) #> [1] 2"},{"path":"/reference/C1.barchart-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class C1.barchart â€” C1.barchart-class","title":"Class C1.barchart â€” C1.barchart-class","text":"class creation display numeric score using barcharts.","code":""},{"path":"/reference/C1.barchart-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class C1.barchart â€” C1.barchart-class","text":"C1.barchart objects can created calls form new(\"C1.barchart\", ...). regular usage package use s1d.barchart function.","code":""},{"path":"/reference/C1.barchart-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class C1.barchart â€” C1.barchart-class","text":"data list containing data data's name. score: displayed values form vector, factor, name matching call. labels: labels' names drawn top bars. : index value. frame: positive null integer. number frame containing data (used          sys.frame(..., env = data$frame)). data stored (.e. data$storeData = FALSE). storeData: logical indicating data stored returned object.          FALSE, names data arguments stored. trellis.par list parameters lattice call.        passed directly par.settings arguments lattice function. adeg.par list graphical parameters, corresponding ones        given adegpar() function. lattice.call list create trellis object. g.args list containing method parameters linked created object ADEg.C1 class.       specific slot C1.barchart objects : sort: logical indicating score sorted ascending order. stats list internal preliminary calculations s.misc list others internal parameters Call object class call","code":""},{"path":"/reference/C1.barchart-class.html","id":"extends","dir":"Reference","previous_headings":"","what":"Extends","title":"Class C1.barchart â€” C1.barchart-class","text":"Class ADEg.C1, directly.   Class ADEg, class ADEg.C1, distance 2.   Class ADEgORtrellis, class ADEg.C1, distance 3.   Class ADEgORADEgSORtrellis, class ADEg.C1, distance 3.","code":""},{"path":"/reference/C1.barchart-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class C1.barchart â€” C1.barchart-class","text":"methods father classes \"ADEg.C1\" \"ADEg\" can used inheritance.   specific methods C1.barchart : prepare signature(object = \"C1.barchart\"):        calls parent method (prepare ADEg.C1) modifies graphical parameters used default. panel signature(object = \"C1.barchart\"):        draws bar charts labels.","code":""},{"path":"/reference/C1.barchart-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class C1.barchart â€” C1.barchart-class","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/C1.barchart-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class C1.barchart â€” C1.barchart-class","text":"","code":"showClass(\"C1.barchart\") #> Class \"C1.barchart\" [package \"adegraphics\"] #>  #> Slots: #>                                                                         #> Name:          data  trellis.par     adeg.par lattice.call       g.args #> Class:         list         list         list         list         list #>                                               #> Name:         stats       s.misc         Call #> Class:         list         list         call #>  #> Extends:  #> Class \"ADEg.C1\", directly #> Class \"ADEg\", by class \"ADEg.C1\", distance 2 #> Class \"ADEgORtrellis\", by class \"ADEg.C1\", distance 3 #> Class \"ADEgORADEgSORtrellis\", by class \"ADEg.C1\", distance 3"},{"path":"/reference/C1.curve-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class C1.curve â€” C1.curve-class","title":"Class C1.curve â€” C1.curve-class","text":"class creation display numeric score linked curves.   C1.curves allows deal multiple scores.","code":""},{"path":"/reference/C1.curve-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class C1.curve â€” C1.curve-class","text":"C1.curve objects can created calls form new(\"C1.curve\", ...). regular usage package use s1d.curve function. C1.curves objects can created calls form new(\"C1.curves\", ...). regular usage package use s1d.curves function. Class C1.curves extends C1.curve directly.","code":""},{"path":"/reference/C1.curve-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class C1.curve â€” C1.curve-class","text":"data list containing data data's name. score: displayed values form vector, factor, name matching call. : index value. frame: positive null integer. number frame containing data (used          sys.frame(..., env = data$frame)). data stored (.e. data$storeData = FALSE). storeData: logical indicating data stored returned object.          FALSE, names data arguments stored. trellis.par list parameters lattice call.        passed directly par.settings arguments lattice function. adeg.par list graphical parameters, corresponding ones        given adegpar() function. lattice.call list create trellis object. g.args list containing method parameters linked created object ADEg.C1 class. stats list internal preliminary calculations s.misc list others internal parameters Call object class call","code":""},{"path":"/reference/C1.curve-class.html","id":"extends","dir":"Reference","previous_headings":"","what":"Extends","title":"Class C1.curve â€” C1.curve-class","text":"Class ADEg.C1, directly.   Class ADEg, class ADEg.C1, distance 2.   Class ADEgORtrellis, class ADEg.C1, distance 3.   Class ADEgORADEgSORtrellis, class ADEg.C1, distance 3.","code":""},{"path":"/reference/C1.curve-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class C1.curve â€” C1.curve-class","text":"methods father classes \"ADEg.C1\" \"ADEg\" can used inheritance.   specific methods C1.curve C1.curves : prepare signature(object = \"C1.curve\"):        calls parent method (prepare ADEg.C1) modifies graphical parameters used default. panel signature(object = \"C1.curve\"):        draws points curves. panel signature(object = \"C1.curves\"):        draws points curves.","code":""},{"path":"/reference/C1.curve-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class C1.curve â€” C1.curve-class","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/C1.curve-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class C1.curve â€” C1.curve-class","text":"","code":"showClass(\"C1.curve\") #> Class \"C1.curve\" [package \"adegraphics\"] #>  #> Slots: #>                                                                         #> Name:          data  trellis.par     adeg.par lattice.call       g.args #> Class:         list         list         list         list         list #>                                               #> Name:         stats       s.misc         Call #> Class:         list         list         call #>  #> Extends:  #> Class \"ADEg.C1\", directly #> Class \"ADEg\", by class \"ADEg.C1\", distance 2 #> Class \"ADEgORtrellis\", by class \"ADEg.C1\", distance 3 #> Class \"ADEgORADEgSORtrellis\", by class \"ADEg.C1\", distance 3 #>  #> Known Subclasses: \"C1.curves\" showClass(\"C1.curves\") #> Class \"C1.curves\" [package \"adegraphics\"] #>  #> Slots: #>                                                                         #> Name:          data  trellis.par     adeg.par lattice.call       g.args #> Class:         list         list         list         list         list #>                                               #> Name:         stats       s.misc         Call #> Class:         list         list         call #>  #> Extends:  #> Class \"C1.curve\", directly #> Class \"ADEg.C1\", by class \"C1.curve\", distance 2 #> Class \"ADEg\", by class \"C1.curve\", distance 3 #> Class \"ADEgORtrellis\", by class \"C1.curve\", distance 4 #> Class \"ADEgORADEgSORtrellis\", by class \"C1.curve\", distance 4"},{"path":"/reference/C1.density-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class C1.density â€” C1.density-class","title":"Class C1.density â€” C1.density-class","text":"class creation display numeric score using density curves.","code":""},{"path":"/reference/C1.density-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class C1.density â€” C1.density-class","text":"C1.density objects can created calls form new(\"C1.density\", ...). regular usage package use s1d.density function.","code":""},{"path":"/reference/C1.density-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class C1.density â€” C1.density-class","text":"data list containing data data's name. score: displayed values form numeric vector, name matching call. fac: factor score split form vector, factor, name matching call. frame: positive null integer. number frame containing data (used          sys.frame(..., env = data$frame)). data stored (.e. data$storeData = FALSE). storeData: logical indicating data stored returned object.          FALSE, names data arguments stored. trellis.par list parameters lattice call.        passed directly par.settings arguments lattice function. adeg.par list graphical parameters, corresponding ones        given adegpar() function. lattice.call list create trellis object. g.args list containing method parameters linked created object ADEg.C1 class.       specific slots C1.density objects : kernel, bandwidth gridsize: passed parameters bkde function          KernSmooth package. fill: logical yield polygons density curves filled. col: logical, color colors vector color labels, rugs, lines polygons. stats list internal preliminary calculations.        specific slot C1.density objects : densit: values density curve calculated factor fac computes          bkde function KernSmooth package. s.misc list others internal parameters.       specific slot C1.density objects : rug: index value indicating rugs drawn Call object class call","code":""},{"path":"/reference/C1.density-class.html","id":"extends","dir":"Reference","previous_headings":"","what":"Extends","title":"Class C1.density â€” C1.density-class","text":"Class ADEg.C1, directly.   Class ADEg, class ADEg.C1, distance 2.   Class ADEgORtrellis, class ADEg.C1, distance 3.   Class ADEgORADEgSORtrellis, class ADEg.C1, distance 3.","code":""},{"path":"/reference/C1.density-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class C1.density â€” C1.density-class","text":"methods father classes \"ADEg.C1\" \"ADEg\" can used inheritance.   specific methods C1.density : prepare signature(object = \"C1.density\"):        calls parent method (prepare ADEg.C1), modifies graphical parameters used default        calculates density curves according numeric score values' categories. panel signature(object = \"C1.density\"):        draws density curves.","code":""},{"path":"/reference/C1.density-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class C1.density â€” C1.density-class","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/C1.density-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class C1.density â€” C1.density-class","text":"","code":"showClass(\"C1.density\") #> Class \"C1.density\" [package \"adegraphics\"] #>  #> Slots: #>                                                                         #> Name:          data  trellis.par     adeg.par lattice.call       g.args #> Class:         list         list         list         list         list #>                                               #> Name:         stats       s.misc         Call #> Class:         list         list         call #>  #> Extends:  #> Class \"ADEg.C1\", directly #> Class \"ADEg\", by class \"ADEg.C1\", distance 2 #> Class \"ADEgORtrellis\", by class \"ADEg.C1\", distance 3 #> Class \"ADEgORADEgSORtrellis\", by class \"ADEg.C1\", distance 3"},{"path":"/reference/C1.dotplot-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class C1.dotplot â€” C1.dotplot-class","title":"Class C1.dotplot â€” C1.dotplot-class","text":"class creation display numeric score using dots.","code":""},{"path":"/reference/C1.dotplot-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class C1.dotplot â€” C1.dotplot-class","text":"C1.dotplot objects can created calls form new(\"C1.dotplot\", ...). regular usage package use s1d.dotplot function.","code":""},{"path":"/reference/C1.dotplot-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class C1.dotplot â€” C1.dotplot-class","text":"data list containing data data's name. score: displayed values form vector, factor, name matching call. : index value. frame: positive null integer. number frame containing data (used          sys.frame(..., env = data$frame)). data stored (.e. data$storeData = FALSE). storeData: logical indicating data stored returned object.          FALSE, names data arguments stored. trellis.par list parameters lattice call.        passed directly par.settings arguments lattice function. adeg.par list graphical parameters, corresponding ones        given adegpar() function. lattice.call list create trellis object. g.args list containing method parameters linked created object ADEg.C1 class. stats list internal preliminary calculations s.misc list others internal parameters Call object class call","code":""},{"path":"/reference/C1.dotplot-class.html","id":"extends","dir":"Reference","previous_headings":"","what":"Extends","title":"Class C1.dotplot â€” C1.dotplot-class","text":"Class ADEg.C1, directly.   Class ADEg, class ADEg.C1, distance 2.   Class ADEgORtrellis, class ADEg.C1, distance 3.   Class ADEgORADEgSORtrellis, class ADEg.C1, distance 3.","code":""},{"path":"/reference/C1.dotplot-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class C1.dotplot â€” C1.dotplot-class","text":"methods father classes \"ADEg.C1\" \"ADEg\" can used inheritance.   specific methods C1.dotplot : prepare signature(object = \"C1.dotplot\"):        calls parent method (prepare ADEg.C1) modifies graphical parameters used default. panel signature(object = \"C1.dotplot\"):        draws segments dots.","code":""},{"path":"/reference/C1.dotplot-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class C1.dotplot â€” C1.dotplot-class","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/C1.dotplot-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class C1.dotplot â€” C1.dotplot-class","text":"","code":"showClass(\"C1.dotplot\") #> Class \"C1.dotplot\" [package \"adegraphics\"] #>  #> Slots: #>                                                                         #> Name:          data  trellis.par     adeg.par lattice.call       g.args #> Class:         list         list         list         list         list #>                                               #> Name:         stats       s.misc         Call #> Class:         list         list         call #>  #> Extends:  #> Class \"ADEg.C1\", directly #> Class \"ADEg\", by class \"ADEg.C1\", distance 2 #> Class \"ADEgORtrellis\", by class \"ADEg.C1\", distance 3 #> Class \"ADEgORADEgSORtrellis\", by class \"ADEg.C1\", distance 3"},{"path":"/reference/C1.gauss-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class C1.gauss â€” C1.gauss-class","title":"Class C1.gauss â€” C1.gauss-class","text":"class creation display numeric score using gauss' curves.","code":""},{"path":"/reference/C1.gauss-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class C1.gauss â€” C1.gauss-class","text":"C1.gauss objects can created calls form new(\"C1.gauss\", ...). regular usage package use s1d.gauss function.","code":""},{"path":"/reference/C1.gauss-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class C1.gauss â€” C1.gauss-class","text":"data list containing data data's name. score: displayed values form numeric vector, name matching call. fac: factor score splitting form vector, factor, name matching call. wt: vector weights score frame: positive null integer. number frame containing data (used          sys.frame(..., env = data$frame)). data stored (.e. data$storeData = FALSE). storeData: logical indicating data stored returned object.          FALSE, names data arguments stored. trellis.par list parameters lattice call.        passed directly par.settings arguments lattice function. adeg.par list graphical parameters, corresponding ones        given adegpar() function. lattice.call list create trellis object. g.args list containing method parameters linked created object ADEg.C1 class.       specific slots C1.gauss objects : fill: logical yield gauss curves transparent. col: logical, color colors vector color labels, rugs, lines polygons. steps: value number segments used draw Gauss curves. stats list internal preliminary calculations.        specific slots C1.gauss objects : means: weighted mean calculated fac value. var: weighted variance calculated fac value. gausscurves: density gauss curve calculated fac value. s.misc list others internal parameters.       specific slot C1.gauss objects : rug: index value indicating rugs drawn Call object class call","code":""},{"path":"/reference/C1.gauss-class.html","id":"extends","dir":"Reference","previous_headings":"","what":"Extends","title":"Class C1.gauss â€” C1.gauss-class","text":"Class ADEg.C1, directly.   Class ADEg, class ADEg.C1, distance 2.   Class ADEgORtrellis, class ADEg.C1, distance 3.   Class ADEgORADEgSORtrellis, class ADEg.C1, distance 3.","code":""},{"path":"/reference/C1.gauss-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class C1.gauss â€” C1.gauss-class","text":"methods father classes \"ADEg.C1\" \"ADEg\" can used inheritance.   specific methods C1.gauss : prepare signature(object = \"C1.gauss\"):        calls parent method (prepare ADEg.C1), modifies graphical parameters used default        calculates Gauss curves according numeric score values' categories (using weighted mean standard deviation). panel signature(object = \"C1.gauss\"):        draws Gauss curves level names curve.","code":""},{"path":"/reference/C1.gauss-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class C1.gauss â€” C1.gauss-class","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/C1.gauss-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class C1.gauss â€” C1.gauss-class","text":"","code":"showClass(\"C1.gauss\") #> Class \"C1.gauss\" [package \"adegraphics\"] #>  #> Slots: #>                                                                         #> Name:          data  trellis.par     adeg.par lattice.call       g.args #> Class:         list         list         list         list         list #>                                               #> Name:         stats       s.misc         Call #> Class:         list         list         call #>  #> Extends:  #> Class \"ADEg.C1\", directly #> Class \"ADEg\", by class \"ADEg.C1\", distance 2 #> Class \"ADEgORtrellis\", by class \"ADEg.C1\", distance 3 #> Class \"ADEgORADEgSORtrellis\", by class \"ADEg.C1\", distance 3"},{"path":"/reference/C1.hist-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class C1.hist â€” C1.hist-class","title":"Class C1.hist â€” C1.hist-class","text":"class creation display numeric score using histogram.","code":""},{"path":"/reference/C1.hist-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class C1.hist â€” C1.hist-class","text":"C1.hist objects can created calls form new(\"C1.hist\", ...). regular usage package use s1d.hist function.","code":""},{"path":"/reference/C1.hist-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class C1.hist â€” C1.hist-class","text":"data list containing data data's name. score: displayed values form vector, factor, name matching call. frame: positive null integer. number frame containing data (used          sys.frame(..., env = data$frame)). data stored (.e. data$storeData = FALSE). storeData: logical indicating data stored returned object.          FALSE, names data arguments stored. trellis.par list parameters lattice call.        passed directly par.settings arguments lattice function. adeg.par list graphical parameters, corresponding ones        given adegpar() function. lattice.call list create trellis object. g.args list containing method parameters linked created object ADEg.C1 class.       specific slots C1.hist objects : breaks: vector values split score. NULL, pretty(score, nclass) used. nclass: integer number desired intervals, ignored breaks missing. type: value among count, density, percent indicate unit cell height. right: logical indicating histogram cells right-closed (left open) intervals. stats list internal preliminary calculations.       specific slots C1.hist objects : heights: cell height. breaks: cell boundaries. s.misc list others internal parameters Call object class call","code":""},{"path":"/reference/C1.hist-class.html","id":"extends","dir":"Reference","previous_headings":"","what":"Extends","title":"Class C1.hist â€” C1.hist-class","text":"Class ADEg.C1, directly.   Class ADEg, class ADEg.C1, distance 2.   Class ADEgORtrellis, class ADEg.C1, distance 3.   Class ADEgORADEgSORtrellis, class ADEg.C1, distance 3.","code":""},{"path":"/reference/C1.hist-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class C1.hist â€” C1.hist-class","text":"methods father classes \"ADEg.C1\" \"ADEg\" can used inheritance.   specific methods C1.hist : prepare signature(object = \"C1.hist\"):        calls parent method (prepare ADEg.C1), modifies graphical parameters used default        calculates boundaries height cells. panel signature(object = \"C1.hist\"):        draws rectangles.","code":""},{"path":"/reference/C1.hist-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class C1.hist â€” C1.hist-class","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/C1.hist-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class C1.hist â€” C1.hist-class","text":"","code":"showClass(\"C1.hist\") #> Class \"C1.hist\" [package \"adegraphics\"] #>  #> Slots: #>                                                                         #> Name:          data  trellis.par     adeg.par lattice.call       g.args #> Class:         list         list         list         list         list #>                                               #> Name:         stats       s.misc         Call #> Class:         list         list         call #>  #> Extends:  #> Class \"ADEg.C1\", directly #> Class \"ADEg\", by class \"ADEg.C1\", distance 2 #> Class \"ADEgORtrellis\", by class \"ADEg.C1\", distance 3 #> Class \"ADEgORADEgSORtrellis\", by class \"ADEg.C1\", distance 3"},{"path":"/reference/C1.interval-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class C1.interval â€” C1.interval-class","title":"Class C1.interval â€” C1.interval-class","text":"class creation display interval two numeric scores.","code":""},{"path":"/reference/C1.interval-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class C1.interval â€” C1.interval-class","text":"C1.interval objects can created calls form new(\"C1.interval\", ...). regular usage package use s1d.interval function.","code":""},{"path":"/reference/C1.interval-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class C1.interval â€” C1.interval-class","text":"data list containing data data's name. score: displayed values form vector, factor, name matching call. : index value. frame: positive null integer. number frame containing data (used          sys.frame(..., env = data$frame)). data stored (.e. data$storeData = FALSE). storeData: logical indicating data stored returned object.          FALSE, names data arguments stored. trellis.par list parameters lattice call.        passed directly par.settings arguments lattice function. adeg.par list graphical parameters, corresponding ones        given adegpar() function. lattice.call list create trellis object. g.args list containing method parameters linked created object ADEg.C1 class.       specific slot C1.density objects : method: value, bars area, represent either segments areas scores. stats list internal preliminary calculations s.misc list others internal parameters Call object class call","code":""},{"path":"/reference/C1.interval-class.html","id":"extends","dir":"Reference","previous_headings":"","what":"Extends","title":"Class C1.interval â€” C1.interval-class","text":"Class ADEg.C1, directly.   Class ADEg, class ADEg.C1, distance 2.   Class ADEgORtrellis, class ADEg.C1, distance 3.   Class ADEgORADEgSORtrellis, class ADEg.C1, distance 3.","code":""},{"path":"/reference/C1.interval-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class C1.interval â€” C1.interval-class","text":"methods father classes \"ADEg.C1\" \"ADEg\" can used inheritance.   specific methods C1.interval : prepare signature(object = \"C1.interval\"):        calls parent method (prepare ADEg.C1) modifies graphical parameters used default. panel signature(object = \"C1.interval\"):        draws segments polygons.","code":""},{"path":"/reference/C1.interval-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class C1.interval â€” C1.interval-class","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/C1.interval-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class C1.interval â€” C1.interval-class","text":"","code":"showClass(\"C1.interval\") #> Class \"C1.interval\" [package \"adegraphics\"] #>  #> Slots: #>                                                                         #> Name:          data  trellis.par     adeg.par lattice.call       g.args #> Class:         list         list         list         list         list #>                                               #> Name:         stats       s.misc         Call #> Class:         list         list         call #>  #> Extends:  #> Class \"ADEg.C1\", directly #> Class \"ADEg\", by class \"ADEg.C1\", distance 2 #> Class \"ADEgORtrellis\", by class \"ADEg.C1\", distance 3 #> Class \"ADEgORADEgSORtrellis\", by class \"ADEg.C1\", distance 3"},{"path":"/reference/S1.boxplot-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class S1.boxplot â€” S1.boxplot-class","title":"Class S1.boxplot â€” S1.boxplot-class","text":"class representation link variable qualitative variable using box--whisker plots.","code":""},{"path":"/reference/S1.boxplot-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class S1.boxplot â€” S1.boxplot-class","text":"S1.boxplot objects can created calls form new(\"S1.boxplot\", ...). regular usage package use s1d.boxplot function.","code":""},{"path":"/reference/S1.boxplot-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class S1.boxplot â€” S1.boxplot-class","text":"data list containing data data's name. score: displayed values form numeric vector, name matching call. fac: factor score splitting form vector, factor, name matching call. : index value. frame: positive null integer. number frame containing data (used          sys.frame(..., env = data$frame)). data stored (.e. data$storeData = FALSE). storeData: logical indicating data stored returned object.          FALSE, names data arguments stored. trellis.par list parameters lattice call.        passed directly par.settings arguments lattice function. adeg.par list graphical parameters, corresponding ones        given adegpar() function. lattice.call list create trellis object. g.args list containing method parameters linked created object ADEg.S1 class.       specific slot S1.boxplot objects : col: NULL value, color colors vector color points, labels, lines polygons. stats list internal preliminary calculations s.misc list others internal parameters Call object class call","code":""},{"path":"/reference/S1.boxplot-class.html","id":"extends","dir":"Reference","previous_headings":"","what":"Extends","title":"Class S1.boxplot â€” S1.boxplot-class","text":"Class ADEg.S1, directly.   Class ADEg, class ADEg.S1, distance 2.   Class ADEgORtrellis, class ADEg.S1, distance 3.   Class ADEgORADEgSORtrellis, class ADEg.S1, distance 3.","code":""},{"path":"/reference/S1.boxplot-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class S1.boxplot â€” S1.boxplot-class","text":"methods father classes \"ADEg.S1\" \"ADEg\" can used inheritance.   specific methods S1.boxplot : prepare signature(object = \"S1.boxplot\"):        calls parent method (prepare ADEg.S1) modifies graphical parameters used default. panel signature(object = \"S1.boxplot\"):        draws box--wiskers diagrams, mean points labels. setlatticecall signature(object = \"S1.boxplot\"):        prepares lattice.call slot","code":""},{"path":"/reference/S1.boxplot-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class S1.boxplot â€” S1.boxplot-class","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/S1.boxplot-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class S1.boxplot â€” S1.boxplot-class","text":"","code":"showClass(\"S1.boxplot\") #> Class \"S1.boxplot\" [package \"adegraphics\"] #>  #> Slots: #>                                                                         #> Name:          data  trellis.par     adeg.par lattice.call       g.args #> Class:         list         list         list         list         list #>                                               #> Name:         stats       s.misc         Call #> Class:         list         list         call #>  #> Extends:  #> Class \"ADEg.S1\", directly #> Class \"ADEg\", by class \"ADEg.S1\", distance 2 #> Class \"ADEgORtrellis\", by class \"ADEg.S1\", distance 3 #> Class \"ADEgORADEgSORtrellis\", by class \"ADEg.S1\", distance 3"},{"path":"/reference/S1.class-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class S1.class â€” S1.class-class","title":"Class S1.class â€” S1.class-class","text":"class creation display numeric score aggregated class associated factor.","code":""},{"path":"/reference/S1.class-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class S1.class â€” S1.class-class","text":"S1.class objects can created calls form new(\"S1.class\", ...). regular usage package use s1d.class function.","code":""},{"path":"/reference/S1.class-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class S1.class â€” S1.class-class","text":"data list containing data data's name. score: displayed values form numeric vector, name matching call. fac: factor score splitting form vector, factor, name matching call. wt: vector weights score labels: labels' names drawn class. : index value. frame: positive null integer. number frame containing data (used          sys.frame(..., env = data$frame)). data stored (.e. data$storeData = FALSE). storeData: logical indicating data stored returned object.          FALSE, names data arguments stored. trellis.par list parameters lattice call.        passed directly par.settings arguments lattice function. adeg.par list graphical parameters, corresponding ones        given adegpar() function. lattice.call list create trellis object. g.args list containing method parameters linked created object ADEg.S1 class.       specific slots S1.class objects : col: NULL value, color colors vector color points, labels lines. poslabel: label position class, can regular value. stats list internal preliminary calculations.        specific slot S1.class objects : means: weighted mean calculated fac value. s.misc list others internal parameters.     specific slot S1.class objects : rug: index value indicating rugs drawn. Call object class call","code":""},{"path":"/reference/S1.class-class.html","id":"extends","dir":"Reference","previous_headings":"","what":"Extends","title":"Class S1.class â€” S1.class-class","text":"Class ADEg.S1, directly.   Class ADEg, class ADEg.S1, distance 2.   Class ADEgORtrellis, class ADEg.S1, distance 3.   Class ADEgORADEgSORtrellis, class ADEg.S1, distance 3.","code":""},{"path":"/reference/S1.class-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class S1.class â€” S1.class-class","text":"methods father classes \"ADEg.S1\" \"ADEg\" can used inheritance.   specific methods S1.class : prepare signature(object = \"S1.class\"):        calls parent method (prepare ADEg.S1) modifies graphical parameters used default. panel signature(object = \"S1.class\"):        draws labels lines matching score values.","code":""},{"path":"/reference/S1.class-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class S1.class â€” S1.class-class","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/S1.class-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class S1.class â€” S1.class-class","text":"","code":"showClass(\"S1.class\") #> Class \"S1.class\" [package \"adegraphics\"] #>  #> Slots: #>                                                                         #> Name:          data  trellis.par     adeg.par lattice.call       g.args #> Class:         list         list         list         list         list #>                                               #> Name:         stats       s.misc         Call #> Class:         list         list         call #>  #> Extends:  #> Class \"ADEg.S1\", directly #> Class \"ADEg\", by class \"ADEg.S1\", distance 2 #> Class \"ADEgORtrellis\", by class \"ADEg.S1\", distance 3 #> Class \"ADEgORADEgSORtrellis\", by class \"ADEg.S1\", distance 3"},{"path":"/reference/S1.distri-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class S1.distri â€” S1.distri-class","title":"Class S1.distri â€” S1.distri-class","text":"class representation set distributions numeric score.","code":""},{"path":"/reference/S1.distri-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class S1.distri â€” S1.distri-class","text":"S1.distri objects can created calls form new(\"S1.distri\", ...). regular usage package use s1d.distri function.","code":""},{"path":"/reference/S1.distri-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class S1.distri â€” S1.distri-class","text":"data list containing data data's name. score: displayed values form numeric vector, name matching call. dfdistri: mass distribution column class. labels: labels' names drawn distribution. : index value. frame: positive null integer. number frame containing data (used          sys.frame(..., env = data$frame)). data stored (.e. data$storeData = FALSE). storeData: logical indicating data stored returned object.          FALSE, names data arguments stored. trellis.par list parameters lattice call.        passed directly par.settings arguments lattice function. adeg.par list graphical parameters, corresponding ones        given adegpar() function. lattice.call list create trellis object. g.args list containing method parameters linked created object ADEg.S1 class.       specific slots S1.distri objects : sdSize: size standard deviation segments. yrank: logical draw distributions sorted means ascending order. stats list internal preliminary calculations.        specific slots S1.distri objects : means: weighted mean calculated distribution. sds: weighted variance calculated distribution. s.misc list others internal parameters Call object class call","code":""},{"path":"/reference/S1.distri-class.html","id":"extends","dir":"Reference","previous_headings":"","what":"Extends","title":"Class S1.distri â€” S1.distri-class","text":"Class ADEg.S1, directly.   Class ADEg, class ADEg.S1, distance 2.   Class ADEgORtrellis, class ADEg.S1, distance 3.   Class ADEgORADEgSORtrellis, class ADEg.S1, distance 3.","code":""},{"path":"/reference/S1.distri-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class S1.distri â€” S1.distri-class","text":"methods father classes \"ADEg.S1\" \"ADEg\" can used inheritance.   specific methods S1.distri : prepare signature(object = \"S1.distri\"):        calls parent method (prepare ADEg.S1), modifies graphical parameters used default calculates weighted mean standard deviation. panel signature(object = \"S1.distri\"):        draws mean points segments matching labels.","code":""},{"path":"/reference/S1.distri-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class S1.distri â€” S1.distri-class","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/S1.distri-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class S1.distri â€” S1.distri-class","text":"","code":"showClass(\"S1.distri\") #> Class \"S1.distri\" [package \"adegraphics\"] #>  #> Slots: #>                                                                         #> Name:          data  trellis.par     adeg.par lattice.call       g.args #> Class:         list         list         list         list         list #>                                               #> Name:         stats       s.misc         Call #> Class:         list         list         call #>  #> Extends:  #> Class \"ADEg.S1\", directly #> Class \"ADEg\", by class \"ADEg.S1\", distance 2 #> Class \"ADEgORtrellis\", by class \"ADEg.S1\", distance 3 #> Class \"ADEgORADEgSORtrellis\", by class \"ADEg.S1\", distance 3"},{"path":"/reference/S1.label-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class S1.label â€” S1.label-class","title":"Class S1.label â€” S1.label-class","text":"class creation display numeric score labels.","code":""},{"path":"/reference/S1.label-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class S1.label â€” S1.label-class","text":"S1.label objects can created calls form new(\"S1.label\", ...). regular usage package use s1d.label function.","code":""},{"path":"/reference/S1.label-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class S1.label â€” S1.label-class","text":"data list containing data data's name. score: displayed values form numeric vector, name matching call. labels: labels' names drawn score value. : index value. frame: positive null integer. number frame containing data (used          sys.frame(..., env = data$frame)). data stored (.e. data$storeData = FALSE). storeData: logical indicating data stored returned object.          FALSE, names data arguments stored. trellis.par list parameters lattice call.        passed directly par.settings arguments lattice function. adeg.par list graphical parameters, corresponding ones        given adegpar() function. lattice.call list create trellis object. g.args list containing method parameters linked created object ADEg.S1 class.       specific slot S1.class objects : poslabel: label position score value, can \"regular\" \"value\". stats list internal preliminary calculations s.misc list others internal parameters.     specific slot S1.label objects : rug: index value indicating rugs drawn. Call object class call","code":""},{"path":"/reference/S1.label-class.html","id":"extends","dir":"Reference","previous_headings":"","what":"Extends","title":"Class S1.label â€” S1.label-class","text":"Class ADEg.S1, directly.   Class ADEg, class ADEg.S1, distance 2.   Class ADEgORtrellis, class ADEg.S1, distance 3.   Class ADEgORADEgSORtrellis, class ADEg.S1, distance 3.","code":""},{"path":"/reference/S1.label-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class S1.label â€” S1.label-class","text":"methods father classes \"ADEg.S1\" \"ADEg\" can used inheritance.   specific methods S1.label : prepare signature(object = \"S1.label\"):        calls parent method (prepare ADEg.S1) modifies graphical parameters used default. panel signature(object = \"S1.label\"):        draws labels links score points.","code":""},{"path":"/reference/S1.label-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class S1.label â€” S1.label-class","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/S1.label-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class S1.label â€” S1.label-class","text":"","code":"showClass(\"S1.label\") #> Class \"S1.label\" [package \"adegraphics\"] #>  #> Slots: #>                                                                         #> Name:          data  trellis.par     adeg.par lattice.call       g.args #> Class:         list         list         list         list         list #>                                               #> Name:         stats       s.misc         Call #> Class:         list         list         call #>  #> Extends:  #> Class \"ADEg.S1\", directly #> Class \"ADEg\", by class \"ADEg.S1\", distance 2 #> Class \"ADEgORtrellis\", by class \"ADEg.S1\", distance 3 #> Class \"ADEgORADEgSORtrellis\", by class \"ADEg.S1\", distance 3"},{"path":"/reference/S1.match-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class S1.match â€” S1.match-class","title":"Class S1.match â€” S1.match-class","text":"class creation display paired scores.","code":""},{"path":"/reference/S1.match-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class S1.match â€” S1.match-class","text":"S1.match objects can created calls form new(\"S1.match\", ...). regular usage package use s1d.match function.","code":""},{"path":"/reference/S1.match-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class S1.match â€” S1.match-class","text":"data list containing data data's name. score: displayed values form numeric vector, name matching call. labels: labels' names drawn score. : index value. frame: positive null integer. number frame containing data (used          sys.frame(..., env = data$frame)). data stored (.e. data$storeData = FALSE). storeData: logical indicating data stored returned object.          FALSE, names data arguments stored. trellis.par list parameters lattice call.        passed directly par.settings arguments lattice function. adeg.par list graphical parameters, corresponding ones        given adegpar() function. lattice.call list create trellis object. g.args list containing method parameters linked created object ADEg.S1 class. stats list internal preliminary calculations s.misc list others internal parameters.     specific slot S1.match objects : rug: index value indicating rugs drawn. Call object class call","code":""},{"path":"/reference/S1.match-class.html","id":"extends","dir":"Reference","previous_headings":"","what":"Extends","title":"Class S1.match â€” S1.match-class","text":"Class ADEg.S1, directly.   Class ADEg, class ADEg.S1, distance 2.   Class ADEgORtrellis, class ADEg.S1, distance 3.   Class ADEgORADEgSORtrellis, class ADEg.S1, distance 3.","code":""},{"path":"/reference/S1.match-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class S1.match â€” S1.match-class","text":"methods father classes \"ADEg.S1\" \"ADEg\" can used inheritance.   specific methods S1.match : prepare signature(object = \"S1.match\"):        calls parent method (prepare ADEg.S1) modifies graphical parameters used default. panel signature(object = \"S1.match\"):        draws score points matching segments labels.","code":""},{"path":"/reference/S1.match-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class S1.match â€” S1.match-class","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/S1.match-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class S1.match â€” S1.match-class","text":"","code":"showClass(\"S1.match\") #> Class \"S1.match\" [package \"adegraphics\"] #>  #> Slots: #>                                                                         #> Name:          data  trellis.par     adeg.par lattice.call       g.args #> Class:         list         list         list         list         list #>                                               #> Name:         stats       s.misc         Call #> Class:         list         list         call #>  #> Extends:  #> Class \"ADEg.S1\", directly #> Class \"ADEg\", by class \"ADEg.S1\", distance 2 #> Class \"ADEgORtrellis\", by class \"ADEg.S1\", distance 3 #> Class \"ADEgORADEgSORtrellis\", by class \"ADEg.S1\", distance 3"},{"path":"/reference/S2.arrow-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class S2.arrow â€” S2.arrow-class","title":"Class S2.arrow â€” S2.arrow-class","text":"class creating drawing bi-dimensional plot arrows origin coordinates labeled.","code":""},{"path":"/reference/S2.arrow-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class S2.arrow â€” S2.arrow-class","text":"S2.arrow objects can created calls form new(\"S2.arrow\", ...). regular usage package use s.arrow function.","code":""},{"path":"/reference/S2.arrow-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class S2.arrow â€” S2.arrow-class","text":"data list containing data data's name. dfxy: displayed values form data frame, name matching call. xax: integer vector indicating columns dfxy kept x-axes. yax: integer vector indicating columns dfxy kept y-axes. labels: vector containing arrows' labels. frame: positive null integer. number frame containing data (used          sys.frame(..., env = data$frame)). data stored (.e. data$storeData = FALSE). storeData: logical indicating data stored returned object.          FALSE, names data arguments stored. trellis.par list parameters lattice call.        passed directly par.settings arguments lattice function. adeg.par list graphical parameters, corresponding ones        given adegpar() function. lattice.call list create trellis object. g.args list containing method parameters linked created object ADEg.S2 class.       specific slot S2.arrow objects : Sp: spatial object stem Sp package. stats list internal preliminary calculations s.misc list others internal parameters: lim.update: logical indicating limits updating Call object class call","code":""},{"path":"/reference/S2.arrow-class.html","id":"extends","dir":"Reference","previous_headings":"","what":"Extends","title":"Class S2.arrow â€” S2.arrow-class","text":"Class ADEg.S2, directly.   Class ADEg, class ADEg.S2, distance 2.   Class ADEgORtrellis, class ADEg.S2, distance 3.   Class ADEgORADEgSORtrellis, class ADEg.S2, distance 3.","code":""},{"path":"/reference/S2.arrow-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class S2.arrow â€” S2.arrow-class","text":"methods father classes \"ADEg.S2\" \"ADEg\" can used inheritance.   specific methods S2.arrow : prepare signature(object = \"S2.arrow\"):        calls parent method (prepare ADEg.S2), modifies graphical parameters used default calculates limits. panel signature(object = \"S2.arrow\"):        draws points, arrows labels.","code":""},{"path":"/reference/S2.arrow-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class S2.arrow â€” S2.arrow-class","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/S2.arrow-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class S2.arrow â€” S2.arrow-class","text":"","code":"showClass(\"S2.arrow\") #> Class \"S2.arrow\" [package \"adegraphics\"] #>  #> Slots: #>                                                                         #> Name:          data  trellis.par     adeg.par lattice.call       g.args #> Class:         list         list         list         list         list #>                                               #> Name:         stats       s.misc         Call #> Class:         list         list         call #>  #> Extends:  #> Class \"ADEg.S2\", directly #> Class \"ADEg\", by class \"ADEg.S2\", distance 2 #> Class \"ADEgORtrellis\", by class \"ADEg.S2\", distance 3 #> Class \"ADEgORADEgSORtrellis\", by class \"ADEg.S2\", distance 3"},{"path":"/reference/S2.class-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class S2.class â€” S2.class-class","title":"Class S2.class â€” S2.class-class","text":"class group representation bi-dimensional plot.","code":""},{"path":"/reference/S2.class-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class S2.class â€” S2.class-class","text":"S2.class objects can created calls form new(\"S2.class\", ...). regular usage package use s.class function.","code":""},{"path":"/reference/S2.class-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class S2.class â€” S2.class-class","text":"data list containing data data's name. dfxy: displayed values form data frame, name matching call. fac: factor (matrix factors) splitting rows dfxy. xax: integer vector indicating columns dfxy kept x-axes. yax: integer vector indicating columns dfxy kept y-axes. wt: vector weights fac. labels: vector containing class' labels. frame: positive null integer. number frame containing data (used          sys.frame(..., env = data$frame)). data stored (.e. data$storeData = FALSE). storeData: logical indicating data stored returned object.          FALSE, names data arguments stored. trellis.par list parameters lattice call.        passed directly par.settings arguments lattice function. adeg.par list graphical parameters, corresponding ones        given adegpar() function. lattice.call list create trellis object. g.args list containing method parameters linked created object ADEg.S2 class.       specific slots S2.class objects : ellipseSize: positive number ellipse size. starSize: number 0 1 star size. chullSize: NULL vector numbers 0 1 convex hulls. col: logical vector colors apply points, ellipses, labels, lines polygons. stats list internal preliminary calculations.        specific slots S2.class objects : means: matrix containing weighted mean calculated fac value. covvar: list containing weighted variance-covariance matrices calculated fac value. s.misc list others internal parameters: ellipses: ellipses' coordinates. chullcoord: convex hulls' coordinates. Call object class call","code":""},{"path":"/reference/S2.class-class.html","id":"extends","dir":"Reference","previous_headings":"","what":"Extends","title":"Class S2.class â€” S2.class-class","text":"Class ADEg.S2, directly.   Class ADEg, class ADEg.S2, distance 2.   Class ADEgORtrellis, class ADEg.S2, distance 3.   Class ADEgORADEgSORtrellis, class ADEg.S2, distance 3.","code":""},{"path":"/reference/S2.class-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class S2.class â€” S2.class-class","text":"methods father classes \"ADEg.S2\" \"ADEg\" can used inheritance.   specific methods S2.class : prepare signature(object = \"S2.class\"):        calls parent method (prepare ADEg.S2), modifies graphical parameters used        default calculates ellipses, convex hulls centroids. panel signature(object = \"S2.class\"):        draws ellipses, convex hulls, stars, labels points.","code":""},{"path":"/reference/S2.class-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class S2.class â€” S2.class-class","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/S2.class-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class S2.class â€” S2.class-class","text":"","code":"showClass(\"S2.class\") #> Class \"S2.class\" [package \"adegraphics\"] #>  #> Slots: #>                                                                         #> Name:          data  trellis.par     adeg.par lattice.call       g.args #> Class:         list         list         list         list         list #>                                               #> Name:         stats       s.misc         Call #> Class:         list         list         call #>  #> Extends:  #> Class \"ADEg.S2\", directly #> Class \"ADEg\", by class \"ADEg.S2\", distance 2 #> Class \"ADEgORtrellis\", by class \"ADEg.S2\", distance 3 #> Class \"ADEgORADEgSORtrellis\", by class \"ADEg.S2\", distance 3"},{"path":"/reference/S2.corcircle-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class S2.corcircle â€” S2.corcircle-class","title":"Class S2.corcircle â€” S2.corcircle-class","text":"class creating drawing correlation circle.","code":""},{"path":"/reference/S2.corcircle-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class S2.corcircle â€” S2.corcircle-class","text":"S2.corcircle objects can created calls form new(\"S2.corcircle\", ...). regular usage package use s.corcircle function.","code":""},{"path":"/reference/S2.corcircle-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class S2.corcircle â€” S2.corcircle-class","text":"data list containing data data's name. dfxy: displayed values form data frame, name matching call. xax: integer vector indicating columns dfxy kept x-axes. yax: integer vector indicating columns dfxy kept y-axes. labels: vector containing points' labels. frame: positive null integer. number frame containing data (used          sys.frame(..., env = data$frame)). data stored (.e. data$storeData = FALSE). storeData: logical indicating data stored returned object.          FALSE, names data arguments stored. trellis.par list parameters lattice call.        passed directly par.settings arguments lattice function. adeg.par list graphical parameters, corresponding ones        given adegpar() function. lattice.call list create trellis object. g.args list containing method parameters linked created object ADEg.S2 class.       specific slot S2.corcircle objects : fullcircle: logical include complete circle (limits c(-1, 1)). stats list internal preliminary calculations s.misc list others internal parameters: backgrid: list elements grid lines Call object class call","code":""},{"path":"/reference/S2.corcircle-class.html","id":"extends","dir":"Reference","previous_headings":"","what":"Extends","title":"Class S2.corcircle â€” S2.corcircle-class","text":"Class ADEg.S2, directly.   Class ADEg, class ADEg.S2, distance 2.   Class ADEgORtrellis, class ADEg.S2, distance 3.   Class ADEgORADEgSORtrellis, class ADEg.S2, distance 3.","code":""},{"path":"/reference/S2.corcircle-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class S2.corcircle â€” S2.corcircle-class","text":"methods father classes \"ADEg.S2\" \"ADEg\" can used inheritance.   specific methods S2.corcircle : prepare signature(object = \"S2.corcircle\"):        calls parent method (prepare ADEg.S2), modifies graphical parameters used default prepares drawn grid. panel signature(object = \"S2.corcircle\"):        draws arrows, labels axes.","code":""},{"path":"/reference/S2.corcircle-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class S2.corcircle â€” S2.corcircle-class","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/S2.corcircle-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class S2.corcircle â€” S2.corcircle-class","text":"","code":"showClass(\"S2.corcircle\") #> Class \"S2.corcircle\" [package \"adegraphics\"] #>  #> Slots: #>                                                                         #> Name:          data  trellis.par     adeg.par lattice.call       g.args #> Class:         list         list         list         list         list #>                                               #> Name:         stats       s.misc         Call #> Class:         list         list         call #>  #> Extends:  #> Class \"ADEg.S2\", directly #> Class \"ADEg\", by class \"ADEg.S2\", distance 2 #> Class \"ADEgORtrellis\", by class \"ADEg.S2\", distance 3 #> Class \"ADEgORADEgSORtrellis\", by class \"ADEg.S2\", distance 3"},{"path":"/reference/S2.density-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class S2.density â€” S2.density-class","title":"Class S2.density â€” S2.density-class","text":"class creation display bi-dimensional plot density estimation.","code":""},{"path":"/reference/S2.density-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class S2.density â€” S2.density-class","text":"S2.density objects can created calls form new(\"S2.density\", ...). regular usage package use s.density function.","code":""},{"path":"/reference/S2.density-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class S2.density â€” S2.density-class","text":"data list containing data data's name. dfxy: displayed values form data frame, name matching call. xax: integer vector indicating columns dfxy kept x-axes. yax: integer vector indicating columns dfxy kept y-axes. frame: positive null integer. number frame containing data (used          sys.frame(..., env = data$frame)). data stored (.e. data$storeData = FALSE). storeData: logical indicating data stored returned object.          FALSE, names data arguments stored. trellis.par list parameters lattice call.        passed directly par.settings arguments lattice function. adeg.par list graphical parameters, corresponding ones        given adegpar() function. lattice.call list create trellis object. g.args list containing method parameters linked created object ADEg.S2 class.       specific slots S2.density objects : bandwidth: bandwidth density calculations passed parameters bkde2D function KernSmooth package. gridsize: grid dimension. threshold: value 0 1 draw densities greater threshold. density visible whether equal 1. col: NULL value, color colors vector color densities. nrpoints: number points density image. contour: logical draw contour lines. region: logical fill grid regions col. nclass: number class density. stats list internal preliminary calculations.        specific slot S2.density objects : densit: list containing results bkde2D function. s.misc list others internal parameters Call object class call","code":""},{"path":"/reference/S2.density-class.html","id":"extends","dir":"Reference","previous_headings":"","what":"Extends","title":"Class S2.density â€” S2.density-class","text":"Class ADEg.S2, directly.   Class ADEg, class ADEg.S2, distance 2.   Class ADEgORtrellis, class ADEg.S2, distance 3.   Class ADEgORADEgSORtrellis, class ADEg.S2, distance 3.","code":""},{"path":"/reference/S2.density-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class S2.density â€” S2.density-class","text":"methods father classes \"ADEg.S2\" \"ADEg\" can used inheritance.   specific methods S2.density : prepare signature(object = \"S2.density\"):        calls parent method (prepare ADEg.S2), modifies graphical parameters used default calculates densities. panel signature(object = \"S2.density\"):        draws densities external points.","code":""},{"path":"/reference/S2.density-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class S2.density â€” S2.density-class","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/S2.density-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class S2.density â€” S2.density-class","text":"","code":"showClass(\"S2.density\") #> Class \"S2.density\" [package \"adegraphics\"] #>  #> Slots: #>                                                                         #> Name:          data  trellis.par     adeg.par lattice.call       g.args #> Class:         list         list         list         list         list #>                                               #> Name:         stats       s.misc         Call #> Class:         list         list         call #>  #> Extends:  #> Class \"ADEg.S2\", directly #> Class \"ADEg\", by class \"ADEg.S2\", distance 2 #> Class \"ADEgORtrellis\", by class \"ADEg.S2\", distance 3 #> Class \"ADEgORADEgSORtrellis\", by class \"ADEg.S2\", distance 3"},{"path":"/reference/S2.distri-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class S2.distri â€” S2.distri-class","title":"Class S2.distri â€” S2.distri-class","text":"class distributions numeric score using mean-standard deviation display.","code":""},{"path":"/reference/S2.distri-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class S2.distri â€” S2.distri-class","text":"S2.distri objects can created calls form new(\"S2.distri\", ...). regular usage package use s.distri function.","code":""},{"path":"/reference/S2.distri-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class S2.distri â€” S2.distri-class","text":"data list containing data data's name. dfxy: displayed values form data frame, name matching call. dfdistri: mass distribution column class. xax: integer vector indicating columns dfxy kept x-axes. yax: integer vector indicating columns dfxy kept y-axes. frame: positive null integer. number frame containing data (used          sys.frame(..., env = data$frame)). data stored (.e. data$storeData = FALSE). storeData: logical indicating data stored returned object.          FALSE, names data arguments stored. trellis.par list parameters lattice call.        passed directly par.settings arguments lattice function. adeg.par list graphical parameters, corresponding ones        given adegpar() function. lattice.call list create trellis object. g.args list containing method parameters linked created object ADEg.S2 class.       specific slots S2.distri objects : ellipseSize: NULL number 0 1 ellipse size. starSize: NULL number 0 1 star size. col: NULL value, color colors vector color ellipses, labels, lines polygons. stats list internal preliminary calculations.        specific slots S2.distri objects : means: matrix containing weighted mean calculated class indfdistri. covvar: list containing weighted variance-covariance matrices calculated class indfdistri. s.misc list others internal parameters: ellipses: ellipses' coordinates. Call object class call","code":""},{"path":"/reference/S2.distri-class.html","id":"extends","dir":"Reference","previous_headings":"","what":"Extends","title":"Class S2.distri â€” S2.distri-class","text":"Class ADEg.S2, directly.   Class ADEg, class ADEg.S2, distance 2.   Class ADEgORtrellis, class ADEg.S2, distance 3.   Class ADEgORADEgSORtrellis, class ADEg.S2, distance 3.","code":""},{"path":"/reference/S2.distri-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class S2.distri â€” S2.distri-class","text":"methods father classes \"ADEg.S2\" \"ADEg\" can used inheritance.   specific methods S2.distri : prepare signature(object = \"S2.distri\"):        calls parent method (prepare ADEg.S2), modifies graphical parameters used default calculates ellipses centroids. panel signature(object = \"S2.distri\"):        draws ellipses, stars, labels points.","code":""},{"path":"/reference/S2.distri-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class S2.distri â€” S2.distri-class","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/S2.distri-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class S2.distri â€” S2.distri-class","text":"","code":"showClass(\"S2.distri\") #> Class \"S2.distri\" [package \"adegraphics\"] #>  #> Slots: #>                                                                         #> Name:          data  trellis.par     adeg.par lattice.call       g.args #> Class:         list         list         list         list         list #>                                               #> Name:         stats       s.misc         Call #> Class:         list         list         call #>  #> Extends:  #> Class \"ADEg.S2\", directly #> Class \"ADEg\", by class \"ADEg.S2\", distance 2 #> Class \"ADEgORtrellis\", by class \"ADEg.S2\", distance 3 #> Class \"ADEgORADEgSORtrellis\", by class \"ADEg.S2\", distance 3"},{"path":"/reference/S2.image-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class S2.image â€” S2.image-class","title":"Class S2.image â€” S2.image-class","text":"class creation bi-dimensional plot third value represented continuous colored surface.","code":""},{"path":"/reference/S2.image-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class S2.image â€” S2.image-class","text":"S2.image objects can created calls form new(\"S2.image\", ...). regular usage package use s.image function.","code":""},{"path":"/reference/S2.image-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class S2.image â€” S2.image-class","text":"data list containing data data's name. dfxy: displayed values form data frame, name matching call. z: vector (matrix) values dfxy rows. xax: integer vector indicating columns dfxy kept x-axes. yax: integer vector indicating columns dfxy kept y-axes. frame: positive null integer. number frame containing data (used          sys.frame(..., env = data$frame)). data stored (.e. data$storeData = FALSE). storeData: logical indicating data stored returned object.          FALSE, names data arguments stored. trellis.par list parameters lattice call.        passed directly par.settings arguments lattice function. adeg.par list graphical parameters, corresponding ones        given adegpar() function. lattice.call list create trellis object. g.args list containing method parameters linked created object ADEg.S2 class.       specific slots S2.image objects : gridsize: 1 2-length vector indicating cell numbers (horizontally vertically) grid colored surface. outsideLimits: specific limits surface set polygons. must SpatialPolygons object. Hole authorized. span: value control degree smoothing. contour: logical draw contour lines. region: logical fill inter-contour regions. col: NULL value, color colors vector used colored cells. stats list internal preliminary calculations.        specific slot S2.image objects : value: prediction value yielded local polynomial regression fitting. s.misc list others internal parameters: newgrid: grid expansion calculated within prepare method. Call object class call","code":""},{"path":"/reference/S2.image-class.html","id":"extends","dir":"Reference","previous_headings":"","what":"Extends","title":"Class S2.image â€” S2.image-class","text":"Class ADEg.S2, directly.   Class ADEg, class ADEg.S2, distance 2.   Class ADEgORtrellis, class ADEg.S2, distance 3.   Class ADEgORADEgSORtrellis, class ADEg.S2, distance 3.","code":""},{"path":"/reference/S2.image-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class S2.image â€” S2.image-class","text":"methods father classes \"ADEg.S2\" \"ADEg\" can used inheritance.   specific methods S2.image : prepare signature(object = \"S2.image\"):        calls parent method (prepare ADEg.S2), modifies graphical parameters used default calculates grid expansion limits. panel signature(object = \"S2.image\"):        draws raster image.","code":""},{"path":"/reference/S2.image-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class S2.image â€” S2.image-class","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/S2.image-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class S2.image â€” S2.image-class","text":"","code":"showClass(\"S2.image\") #> Class \"S2.image\" [package \"adegraphics\"] #>  #> Slots: #>                                                                         #> Name:          data  trellis.par     adeg.par lattice.call       g.args #> Class:         list         list         list         list         list #>                                               #> Name:         stats       s.misc         Call #> Class:         list         list         call #>  #> Extends:  #> Class \"ADEg.S2\", directly #> Class \"ADEg\", by class \"ADEg.S2\", distance 2 #> Class \"ADEgORtrellis\", by class \"ADEg.S2\", distance 3 #> Class \"ADEgORADEgSORtrellis\", by class \"ADEg.S2\", distance 3"},{"path":"/reference/S2.label-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class S2.label â€” S2.label-class","title":"Class S2.label â€” S2.label-class","text":"class creating drawing bi-dimensional plot point label.","code":""},{"path":"/reference/S2.label-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class S2.label â€” S2.label-class","text":"S2.label objects can created calls form new(\"S2.label\", ...). regular usage package use s.label function.","code":""},{"path":"/reference/S2.label-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class S2.label â€” S2.label-class","text":"data list containing data data's name. dfxy: displayed values form data frame, name matching call. labels: vector character strings points' labels xax: integer vector indicating columns dfxy kept x-axes. yax: integer vector indicating columns dfxy kept y-axes. frame: positive null integer. number frame containing data (used          sys.frame(..., env = data$frame)). data stored (.e. data$storeData = FALSE). storeData: logical indicating data stored returned object.         FALSE, names data arguments stored. trellis.par list parameters lattice call.        passed directly par.settings arguments lattice function. adeg.par list graphical parameters, corresponding ones        given adegpar() function. lattice.call list create trellis object. g.args list containing method parameters linked created object ADEg.S2 class. stats list internal preliminary calculations s.misc list others internal parameters Call object class call","code":""},{"path":"/reference/S2.label-class.html","id":"extends","dir":"Reference","previous_headings":"","what":"Extends","title":"Class S2.label â€” S2.label-class","text":"Class ADEg.S2, directly.   Class ADEg, class ADEg.S2, distance 2.   Class ADEgORtrellis, class ADEg.S2, distance 3.   Class ADEgORADEgSORtrellis, class ADEg.S2, distance 3.","code":""},{"path":"/reference/S2.label-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class S2.label â€” S2.label-class","text":"methods father classes \"ADEg.S2\" \"ADEg\" can used inheritance.   specific methods S2.label : prepare signature(object = \"S2.label\"):        calls parent method (prepare ADEg.S2) modifies graphical parameters used default. panel signature(object = \"S2.label\"):        draws points labels.","code":""},{"path":"/reference/S2.label-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class S2.label â€” S2.label-class","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/S2.label-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class S2.label â€” S2.label-class","text":"","code":"showClass(\"S2.label\") #> Class \"S2.label\" [package \"adegraphics\"] #>  #> Slots: #>                                                                         #> Name:          data  trellis.par     adeg.par lattice.call       g.args #> Class:         list         list         list         list         list #>                                               #> Name:         stats       s.misc         Call #> Class:         list         list         call #>  #> Extends:  #> Class \"ADEg.S2\", directly #> Class \"ADEg\", by class \"ADEg.S2\", distance 2 #> Class \"ADEgORtrellis\", by class \"ADEg.S2\", distance 3 #> Class \"ADEgORADEgSORtrellis\", by class \"ADEg.S2\", distance 3"},{"path":"/reference/S2.logo-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class S2.logo â€” S2.logo-class","title":"Class S2.logo â€” S2.logo-class","text":"class creation bi-dimensional plot pictures points representation.","code":""},{"path":"/reference/S2.logo-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class S2.logo â€” S2.logo-class","text":"S2.logo objects can created calls form new(\"S2.logo\", ...). regular usage package use s.logo function.","code":""},{"path":"/reference/S2.logo-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class S2.logo â€” S2.logo-class","text":"data list containing data data's name. dfxy: displayed values form data frame, name matching call. logos: list containing picture use point. xax: integer vector indicating columns dfxy kept x-axes. yax: integer vector indicating columns dfxy kept y-axes. frame: positive null integer. number frame containing data (used          sys.frame(..., env = data$frame)). data stored (.e. data$storeData = FALSE). storeData: logical indicating data stored returned object.          FALSE, names data arguments stored. trellis.par list parameters lattice call.        passed directly par.settings arguments lattice function. adeg.par list graphical parameters, corresponding ones        given adegpar() function. lattice.call list create trellis object. g.args list containing method parameters linked created object ADEg.S2 class.       specific slot S2.logo objects : rect: logical frame logos. stats list internal preliminary calculations s.misc list others internal parameters Call object class call","code":""},{"path":"/reference/S2.logo-class.html","id":"extends","dir":"Reference","previous_headings":"","what":"Extends","title":"Class S2.logo â€” S2.logo-class","text":"Class ADEg.S2, directly.   Class ADEg, class ADEg.S2, distance 2.   Class ADEgORtrellis, class ADEg.S2, distance 3.   Class ADEgORADEgSORtrellis, class ADEg.S2, distance 3.","code":""},{"path":"/reference/S2.logo-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class S2.logo â€” S2.logo-class","text":"methods father classes \"ADEg.S2\" \"ADEg\" can used inheritance.   specific methods S2.class : prepare signature(object = \"S2.class\"):        calls parent method (prepare ADEg.S2) modifies graphical parameters used default. panel signature(object = \"S2.class\"):        displays logos.","code":""},{"path":"/reference/S2.logo-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class S2.logo â€” S2.logo-class","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/S2.logo-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class S2.logo â€” S2.logo-class","text":"","code":"showClass(\"S2.logo\") #> Class \"S2.logo\" [package \"adegraphics\"] #>  #> Slots: #>                                                                         #> Name:          data  trellis.par     adeg.par lattice.call       g.args #> Class:         list         list         list         list         list #>                                               #> Name:         stats       s.misc         Call #> Class:         list         list         call #>  #> Extends:  #> Class \"ADEg.S2\", directly #> Class \"ADEg\", by class \"ADEg.S2\", distance 2 #> Class \"ADEgORtrellis\", by class \"ADEg.S2\", distance 3 #> Class \"ADEgORADEgSORtrellis\", by class \"ADEg.S2\", distance 3"},{"path":"/reference/S2.match-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class S2.match â€” S2.match-class","title":"Class S2.match â€” S2.match-class","text":"class creation display paired coordinates bi-dimensional plot.","code":""},{"path":"/reference/S2.match-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class S2.match â€” S2.match-class","text":"S2.match objects can created calls form new(\"S2.match\", ...). regular usage package use s.match function.","code":""},{"path":"/reference/S2.match-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class S2.match â€” S2.match-class","text":"data list containing data data's name. dfxy: displayed values form data frame, name matching call. xax: integer vector indicating columns dfxy kept x-axes. yax: integer vector indicating columns dfxy kept y-axes. labels: vector character strings containing matches' labels. frame: positive null integer. number frame containing data (used          sys.frame(..., env = data$frame)). data stored (.e. data$storeData = FALSE). storeData: logical indicating data stored returned object.          FALSE, names data arguments stored. trellis.par list parameters lattice call.        passed directly par.settings arguments lattice function. adeg.par list graphical parameters, corresponding ones        given adegpar() function. lattice.call list create trellis object. g.args list containing method parameters linked created object ADEg.S2 class.       specific slot S2.match objects : arrows: logical draw arrows. stats list internal preliminary calculations s.misc list others internal parameters Call object class call","code":""},{"path":"/reference/S2.match-class.html","id":"extends","dir":"Reference","previous_headings":"","what":"Extends","title":"Class S2.match â€” S2.match-class","text":"Class ADEg.S2, directly.   Class ADEg, class ADEg.S2, distance 2.   Class ADEgORtrellis, class ADEg.S2, distance 3.   Class ADEgORADEgSORtrellis, class ADEg.S2, distance 3.","code":""},{"path":"/reference/S2.match-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class S2.match â€” S2.match-class","text":"methods father classes \"ADEg.S2\" \"ADEg\" can used inheritance.   specific methods S2.match : prepare signature(object = \"S2.match\"):        calls parent method (prepare ADEg.S2) modifies graphical parameters used default. panel signature(object = \"S2.match\"):        draws arrows labels.","code":""},{"path":"/reference/S2.match-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class S2.match â€” S2.match-class","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/S2.match-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class S2.match â€” S2.match-class","text":"","code":"showClass(\"S2.match\") #> Class \"S2.match\" [package \"adegraphics\"] #>  #> Slots: #>                                                                         #> Name:          data  trellis.par     adeg.par lattice.call       g.args #> Class:         list         list         list         list         list #>                                               #> Name:         stats       s.misc         Call #> Class:         list         list         call #>  #> Extends:  #> Class \"ADEg.S2\", directly #> Class \"ADEg\", by class \"ADEg.S2\", distance 2 #> Class \"ADEgORtrellis\", by class \"ADEg.S2\", distance 3 #> Class \"ADEgORADEgSORtrellis\", by class \"ADEg.S2\", distance 3"},{"path":"/reference/S2.traject-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class S2.traject â€” S2.traject-class","title":"Class S2.traject â€” S2.traject-class","text":"class creation bi-dimensional plot trajectories linking points.","code":""},{"path":"/reference/S2.traject-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class S2.traject â€” S2.traject-class","text":"S2.traject objects can created calls form new(\"S2.traject\", ...). regular usage package use s.traject function.","code":""},{"path":"/reference/S2.traject-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class S2.traject â€” S2.traject-class","text":"data list containing data data's name. dfxy: displayed values form data frame, name matching call. fac: factor (matrix factors) splitting rows dfxy. labels: vector character strings containing trajectories' labels. xax: integer vector indicating columns dfxy kept x-axes. yax: integer vector indicating columns dfxy kept y-axes. frame: positive null integer. number frame containing data (used          sys.frame(..., env = data$frame)). data stored (.e. data$storeData = FALSE). storeData: logical indicating data stored returned object.          FALSE, names data arguments stored. trellis.par list parameters lattice call.        passed directly par.settings arguments lattice function. adeg.par list graphical parameters, corresponding ones        given adegpar() function. lattice.call list create trellis object. g.args list containing method parameters linked created object ADEg.S2 class.       specific slots S2.traject objects : order: vector containing drawing order trajectories. vector length equal factor. col: NULL value, color colors vector color points, labels lines. stats list internal preliminary calculations s.misc list others internal parameters Call object class call","code":""},{"path":"/reference/S2.traject-class.html","id":"extends","dir":"Reference","previous_headings":"","what":"Extends","title":"Class S2.traject â€” S2.traject-class","text":"Class ADEg.S2, directly.   Class ADEg, class ADEg.S2, distance 2.   Class ADEgORtrellis, class ADEg.S2, distance 3.   Class ADEgORADEgSORtrellis, class ADEg.S2, distance 3.","code":""},{"path":"/reference/S2.traject-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class S2.traject â€” S2.traject-class","text":"methods father classes \"ADEg.S2\" \"ADEg\" can used inheritance.   specific methods S2.traject : prepare signature(object = \"S2.traject\"):        calls parent method (prepare ADEg.S2) modifies graphical parameters used default. panel signature(object = \"S2.traject\"):        draws points, arrows labels.","code":""},{"path":"/reference/S2.traject-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class S2.traject â€” S2.traject-class","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/S2.traject-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class S2.traject â€” S2.traject-class","text":"","code":"showClass(\"S2.traject\") #> Class \"S2.traject\" [package \"adegraphics\"] #>  #> Slots: #>                                                                         #> Name:          data  trellis.par     adeg.par lattice.call       g.args #> Class:         list         list         list         list         list #>                                               #> Name:         stats       s.misc         Call #> Class:         list         list         call #>  #> Extends:  #> Class \"ADEg.S2\", directly #> Class \"ADEg\", by class \"ADEg.S2\", distance 2 #> Class \"ADEgORtrellis\", by class \"ADEg.S2\", distance 3 #> Class \"ADEgORADEgSORtrellis\", by class \"ADEg.S2\", distance 3"},{"path":"/reference/S2.value-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class S2.value â€” S2.value-class","title":"Class S2.value â€” S2.value-class","text":"class creation display bi-dimensional plot third value represented (variable) symbols.","code":""},{"path":"/reference/S2.value-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class S2.value â€” S2.value-class","text":"S2.value objects can created calls form new(\"S2.value\", ...). regular usage package use s.value function.","code":""},{"path":"/reference/S2.value-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class S2.value â€” S2.value-class","text":"data: list containing data data's name. dfxy: displayed values form data frame, name matching call. z: vector (matrix) many values rows dfxy. xax: integer vector indicating columns dfxy kept x-axes. yax: integer vector indicating columns dfxy kept y-axes. frame: positive null integer. number frame containing data (used          sys.frame(..., env = data$frame)). data stored (.e. data$storeData = FALSE). storeData: logical indicating data stored returned object.          FALSE, names data arguments stored. trellis.par list parameters lattice call.        passed directly par.settings arguments lattice function. adeg.par list graphical parameters, corresponding ones        given adegpar() function. lattice.call list create trellis object. g.args list containing method parameters linked created object ADEg.S2 class.       specific slots S2.value objects : method: method representation z (color shading proportional size). symbol: type symbol (square circle). center: center value method size. centerpar: logical list represent center value using elements            adegpar(\"ppoints\") list. breaks: vector containing breaks used splitting z value. NULL, pretty(z, n) used. nclass: integer number desired intervals, ignored breaks missing. col: NULL value, color colors vector color symbols. stats list internal preliminary calculations s.misc list others internal parameters: plegend.update: logical indicating legend parameters updating breaks.update: logical indicating legend breaks updating lim.update: logical indicating limits updating Call object class call","code":""},{"path":"/reference/S2.value-class.html","id":"extends","dir":"Reference","previous_headings":"","what":"Extends","title":"Class S2.value â€” S2.value-class","text":"Class ADEg.S2, directly.   Class ADEg, class ADEg.S2, distance 2.   Class ADEgORtrellis, class ADEg.S2, distance 3.   Class ADEgORADEgSORtrellis, class ADEg.S2, distance 3.","code":""},{"path":"/reference/S2.value-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class S2.value â€” S2.value-class","text":"methods father classes \"ADEg.S2\" \"ADEg\" can used inheritance.   specific methods S2.value : prepare signature(object = \"S2.value\"):        calls parent method (prepare ADEg.S2), modifies graphical parameters used default calculates limits. panel signature(object = \"S2.value\"):        draws symbols.","code":""},{"path":"/reference/S2.value-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Class S2.value â€” S2.value-class","text":"symbol size, method size, use perceptual scaling (Tanimura et al. 2006).","code":""},{"path":"/reference/S2.value-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Class S2.value â€” S2.value-class","text":"Tanimura, S. Kuroiwa, C. Mizota, T. 2006. Proportional symbol   mapping R. Journal Statistical Software. 15, 1--7","code":""},{"path":"/reference/S2.value-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class S2.value â€” S2.value-class","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/S2.value-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class S2.value â€” S2.value-class","text":"","code":"showClass(\"S2.value\") #> Class \"S2.value\" [package \"adegraphics\"] #>  #> Slots: #>                                                                         #> Name:          data  trellis.par     adeg.par lattice.call       g.args #> Class:         list         list         list         list         list #>                                               #> Name:         stats       s.misc         Call #> Class:         list         list         call #>  #> Extends:  #> Class \"ADEg.S2\", directly #> Class \"ADEg\", by class \"ADEg.S2\", distance 2 #> Class \"ADEgORtrellis\", by class \"ADEg.S2\", distance 3 #> Class \"ADEgORADEgSORtrellis\", by class \"ADEg.S2\", distance 3"},{"path":"/reference/T.cont-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class T.cont â€” T.cont-class","title":"Class T.cont â€” T.cont-class","text":"class representation contingency table object statistical information (mean regression lines).","code":""},{"path":"/reference/T.cont-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class T.cont â€” T.cont-class","text":"T.cont objects can created calls form new(\"T.cont\", ...). regular usage package use table.value function table object.","code":""},{"path":"/reference/T.cont-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class T.cont â€” T.cont-class","text":"data: list containing data data's name. dftab: contingency table object form data frame, name matching call coordsx: integer vector indicating columns dftab kept coordsy: integer vector indicating rows dftab kept labelsx: columns' labels labelsy: rows' labels \"frame: positive null integer. number frame containing data (used          sys.frame(..., env = data$frame)). data stored (.e. data$storeData = FALSE). storeData: logical indicating data stored returned object.          FALSE, names data arguments stored. trellis.par list parameters lattice call.        passed directly par.settings arguments lattice function. adeg.par list graphical parameters, corresponding ones        given adegpar() function. lattice.call list create trellis object. g.args list containing method parameters linked created object T.value class.       specific slots T.cont objects : meanX: logical represent columns' means points. meanY: logical represent rows' means points. ablineX: logical represent columns' regression lines. ablineY: logical represent columns' regression lines. stats list internal preliminary calculations s.misc list others internal parameters Call object class call","code":""},{"path":"/reference/T.cont-class.html","id":"extends","dir":"Reference","previous_headings":"","what":"Extends","title":"Class T.cont â€” T.cont-class","text":"Class T.value, directly.   Class ADEg.T, class T.value, distance 2.   Class ADEg, class T.value, distance 3.   Class ADEgORtrellis, class T.value, distance 4.   Class ADEgORADEgSORtrellis, class T.value, distance 4.","code":""},{"path":"/reference/T.cont-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class T.cont â€” T.cont-class","text":"methods father classes \"T.value\", \"ADEg.T\" \"ADEg\" can used inheritance.   specific methods T.cont : panel signature(object = \"T.cont\"):        draws mean points regression lines.","code":""},{"path":"/reference/T.cont-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class T.cont â€” T.cont-class","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/T.cont-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class T.cont â€” T.cont-class","text":"","code":"showClass(\"T.cont\") #> Class \"T.cont\" [package \"adegraphics\"] #>  #> Slots: #>                                                                         #> Name:          data  trellis.par     adeg.par lattice.call       g.args #> Class:         list         list         list         list         list #>                                               #> Name:         stats       s.misc         Call #> Class:         list         list         call #>  #> Extends:  #> Class \"T.value\", directly #> Class \"ADEg.T\", by class \"T.value\", distance 2 #> Class \"ADEg\", by class \"T.value\", distance 3 #> Class \"ADEgORtrellis\", by class \"T.value\", distance 4 #> Class \"ADEgORADEgSORtrellis\", by class \"T.value\", distance 4"},{"path":"/reference/T.image-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class T.image â€” T.image-class","title":"Class T.image â€” T.image-class","text":"class representation matrix table object values different colors.","code":""},{"path":"/reference/T.image-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class T.image â€” T.image-class","text":"T.image objects can created calls form new(\"T.image\", ...). regular usage package use table.image function.","code":""},{"path":"/reference/T.image-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class T.image â€” T.image-class","text":"data list containing data data's name. dftab: displayed values can table, dist matrix         form data frame, name matching call coordsx: integer vector indicating columns dftab kept coordsy: integer vector indicating rows dftab kept labelsx: columns labels labelsy: rows labels frame: positive null integer. number frame containing data (used          sys.frame(..., env = data$frame)). data stored (.e. data$storeData = FALSE). storeData: logical indicating data stored returned object.          FALSE, names data arguments stored. trellis.par list parameters lattice call.        passed directly par.settings arguments lattice function. adeg.par list graphical parameters, corresponding ones        given adegpar() function. lattice.call list create trellis object. g.args list containing method parameters linked created object ADEg.T class.       specific slots T.image objects : breaks: vector values split dftab. NULL, pretty(dftab, nclass) used. nclass: integer number desired intervals, ignored breaks missing. col: NULL value, color colors vector used cells. stats list internal preliminary calculations s.misc list others internal parameters: breaks.update: logical indicating legend breaks updating. Call object class call","code":""},{"path":"/reference/T.image-class.html","id":"extends","dir":"Reference","previous_headings":"","what":"Extends","title":"Class T.image â€” T.image-class","text":"Class ADEg.T, directly.   Class ADEg, class ADEg.T, distance 2.   Class ADEgORtrellis, class ADEg.T, distance 3.   Class ADEgORADEgSORtrellis, class ADEg.T, distance 3.","code":""},{"path":"/reference/T.image-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class T.image â€” T.image-class","text":"methods father classes \"ADEg.T\" \"ADEg\" can used inheritance.   specific methods T.image : prepare signature(object = \"T.image\"):        calls parent method (prepare ADEg.T) modifies graphical parameters used default calculates limits grid. panel signature(object = \"T.image\"):        draws raster image.","code":""},{"path":"/reference/T.image-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class T.image â€” T.image-class","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/T.image-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class T.image â€” T.image-class","text":"","code":"showClass(\"T.image\") #> Class \"T.image\" [package \"adegraphics\"] #>  #> Slots: #>                                                                         #> Name:          data  trellis.par     adeg.par lattice.call       g.args #> Class:         list         list         list         list         list #>                                               #> Name:         stats       s.misc         Call #> Class:         list         list         call #>  #> Extends:  #> Class \"ADEg.T\", directly #> Class \"ADEg\", by class \"ADEg.T\", distance 2 #> Class \"ADEgORtrellis\", by class \"ADEg.T\", distance 3 #> Class \"ADEgORADEgSORtrellis\", by class \"ADEg.T\", distance 3"},{"path":"/reference/T.value-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class T.value â€” T.value-class","title":"Class T.value â€” T.value-class","text":"class representation matrix, data frame, distance matrix using symbols, varying size color.","code":""},{"path":"/reference/T.value-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class T.value â€” T.value-class","text":"T.value objects can created calls form new(\"T.value\", ...). regular usage package use table.value function.","code":""},{"path":"/reference/T.value-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class T.value â€” T.value-class","text":"data: list containing data data's name. dftab: displayed values can table, dist matrix         form data frame, name matching call coordsx: integer vector indicating columns dftab kept coordsy: integer vector indicating rows dftab kept labelsx: columns' labels labelsy: rows' labels frame: positive null integer. number frame containing data (used          sys.frame(..., env = data$frame)). data stored (.e. data$storeData = FALSE). storeData: logical indicating data stored returned object.          FALSE, names data arguments stored. trellis.par list parameters lattice call.        passed directly par.settings arguments lattice function. adeg.par list graphical parameters, corresponding ones        given adegpar() function. lattice.call list create trellis object. g.args list containing method parameters linked created object ADEg.T class.       specific slots T.value objects : breaks: vector values split dftab. NULL, pretty(dftab, nclass) used. nclass: integer number desired intervals, ignored breaks missing. col: NULL value, color colors vector color symbols. method: method representation dftab (color shading proportional size). symbol: type symbol (square circle). center: center value method size. centerpar: logical list represent center value using elements          adegpar(\"ppoints\") list. stats list internal preliminary calculations s.misc list others internal parameters: breaks.update: logical indicating legend breaks updating. Call object class call","code":""},{"path":"/reference/T.value-class.html","id":"extends","dir":"Reference","previous_headings":"","what":"Extends","title":"Class T.value â€” T.value-class","text":"Class ADEg.T, directly.   Class ADEg, class ADEg.T, distance 2.   Class ADEgORtrellis, class ADEg.T, distance 3.   Class ADEgORADEgSORtrellis, class ADEg.T, distance 3.","code":""},{"path":"/reference/T.value-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class T.value â€” T.value-class","text":"methods father classes \"ADEg.T\" \"ADEg\" can used inheritance.   specific methods T.value : prepare signature(object = \"T.value\"):        calls parent method (prepare ADEg.T) modifies graphical parameters used default calculates limits grid. panel signature(object = \"T.value\"):        draws symbols.","code":""},{"path":"/reference/T.value-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Class T.value â€” T.value-class","text":"symbol size, method size, use perceptual scaling (Tanimura et al. 2006) .","code":""},{"path":"/reference/T.value-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Class T.value â€” T.value-class","text":"Tanimura, S. Kuroiwa, C. Mizota, T. 2006 Proportional symbol   mapping R Journal Statistical Software 15, 1--7","code":""},{"path":"/reference/T.value-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class T.value â€” T.value-class","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/T.value-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class T.value â€” T.value-class","text":"","code":"showClass(\"T.value\") #> Class \"T.value\" [package \"adegraphics\"] #>  #> Slots: #>                                                                         #> Name:          data  trellis.par     adeg.par lattice.call       g.args #> Class:         list         list         list         list         list #>                                               #> Name:         stats       s.misc         Call #> Class:         list         list         call #>  #> Extends:  #> Class \"ADEg.T\", directly #> Class \"ADEg\", by class \"ADEg.T\", distance 2 #> Class \"ADEgORtrellis\", by class \"ADEg.T\", distance 3 #> Class \"ADEgORADEgSORtrellis\", by class \"ADEg.T\", distance 3 #>  #> Known Subclasses: \"T.cont\""},{"path":"/reference/Tr.class-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class Tr.class â€” Tr.class-class","title":"Class Tr.class â€” Tr.class-class","text":"class group representation triangular plot.","code":""},{"path":"/reference/Tr.class-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class Tr.class â€” Tr.class-class","text":"Tr.class objects can created calls form new(\"Tr.class\", ...). regular usage package use triangle.class function.","code":""},{"path":"/reference/Tr.class-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class Tr.class â€” Tr.class-class","text":"data list containing data data's name. dfxyz: displayed values form data frame three columns, name matching call. fac: factor partitionning rows dfxyz. wt: vector weights fac. labels: vector containing class' labels. frame: positive null integer. number frame containing data (used          sys.frame(..., env = data$frame)). data stored (.e. data$storeData = FALSE). storeData: logical indicating data stored returned object.          FALSE, names data arguments stored. trellis.par list parameters lattice call.        passed directly par.settings arguments lattice function. adeg.par list graphical parameters, corresponding ones        given adegpar() function. lattice.call list create trellis object. g.args list containing method parameters linked created object ADEg.Tr class.       specific slots Tr.class objects : ellipseSize: positive number ellipse size. starSize: number 0 1 star size. chullSize: NULL vector numbers 0 1 convex hulls. col: NULL value, color colors vector color points, ellipses, labels, lines polygons. max3d min3d: vectors three values triangular maximal minimal limits. adjust: logical adjust device limits smaller equilateral triangle containing values. stats list internal preliminary calculations.        specific slots S2.class objects : means: matrix containing weighted mean calculated fac value. mean2d: matrix containing weighted mean calculated fac value two-dimension. covvar: list containing weighted variance-covariance matrices calculated fac value. covvar2d: list containing weighted variance-covariance matrices calculated fac value two-dimension. s.misc list others internal parameters: ellipses: ellipses' coordinates. chullcoord: convex hulls' coordinates. Call object class call","code":""},{"path":"/reference/Tr.class-class.html","id":"extends","dir":"Reference","previous_headings":"","what":"Extends","title":"Class Tr.class â€” Tr.class-class","text":"Class ADEg.Tr, directly.   Class ADEg, class ADEg.Tr, distance 2.   Class ADEgORtrellis, class ADEg.Tr, distance 3.   Class ADEgORADEgSORtrellis, class ADEg.Tr, distance 3.","code":""},{"path":"/reference/Tr.class-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class Tr.class â€” Tr.class-class","text":"methods father classes \"ADEg.Tr\" \"ADEg\" can used inheritance.   specific methods Tr.class : prepare signature(object = \"Tr.class\"):        calls parent method (prepare ADEg.Tr), modifies graphical parameters used        default calculates ellipses, convex hulls centroids. panel signature(object = \"Tr.class\"):        draws arrows, labels points.","code":""},{"path":"/reference/Tr.class-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class Tr.class â€” Tr.class-class","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/Tr.class-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class Tr.class â€” Tr.class-class","text":"","code":"showClass(\"Tr.class\") #> Class \"Tr.class\" [package \"adegraphics\"] #>  #> Slots: #>                                                                         #> Name:          data  trellis.par     adeg.par lattice.call       g.args #> Class:         list         list         list         list         list #>                                               #> Name:         stats       s.misc         Call #> Class:         list         list         call #>  #> Extends:  #> Class \"ADEg.Tr\", directly #> Class \"ADEg\", by class \"ADEg.Tr\", distance 2 #> Class \"ADEgORtrellis\", by class \"ADEg.Tr\", distance 3 #> Class \"ADEgORADEgSORtrellis\", by class \"ADEg.Tr\", distance 3"},{"path":"/reference/Tr.label-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class Tr.label â€” Tr.label-class","title":"Class Tr.label â€” Tr.label-class","text":"class creating drawing triangular plot point label.","code":""},{"path":"/reference/Tr.label-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class Tr.label â€” Tr.label-class","text":"Tr.label objects can created calls form new(\"Tr.label\", ...). regular usage package use triangle.label function.","code":""},{"path":"/reference/Tr.label-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class Tr.label â€” Tr.label-class","text":"data list containing data data's name. dfxyz: displayed values form three columns data frame, name matching call. labels: character vector containing labels points. frame: positive null integer. number frame containing data (used          sys.frame(..., env = data$frame)). data stored (.e. data$storeData = FALSE). storeData: logical indicating data stored returned object.          FALSE, names data arguments stored. trellis.par list parameters lattice call.        passed directly par.settings arguments lattice function. adeg.par list graphical parameters, corresponding ones        given adegpar() function. lattice.call list create trellis object. g.args list containing method parameters linked created object ADEg.Tr class.       specific slots Tr.class objects : addmean: logical plot mean. addaxes: logical draw principal axes. meanpar: list represent mean points using pch, cex col. axespar: list represent axes lines using col, lwd lty. max3d min3d: vectors three values triangular maximal minimal limits. adjust: logical adjust device limits smaller equilateral triangle containing values. stats list internal preliminary calculations s.misc list others internal parameters: cornerp: coordinates triangle extremities. Call object class call","code":""},{"path":"/reference/Tr.label-class.html","id":"extends","dir":"Reference","previous_headings":"","what":"Extends","title":"Class Tr.label â€” Tr.label-class","text":"Class ADEg.Tr, directly.   Class ADEg, class ADEg.Tr, distance 2.   Class ADEgORtrellis, class ADEg.Tr, distance 3.   Class ADEgORADEgSORtrellis, class ADEg.Tr, distance 3.","code":""},{"path":"/reference/Tr.label-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class Tr.label â€” Tr.label-class","text":"methods father classes \"ADEg.Tr\" \"ADEg\" can used inheritance.   specific methods Tr.label : prepare signature(object = \"Tr.label\"):        calls parent method (prepare ADEg.Tr), modifies graphical parameters used        default defines mean point axes. panel signature(object = \"Tr.label\"):        draws lines, labels points.","code":""},{"path":"/reference/Tr.label-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class Tr.label â€” Tr.label-class","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/Tr.label-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class Tr.label â€” Tr.label-class","text":"","code":"showClass(\"Tr.label\") #> Class \"Tr.label\" [package \"adegraphics\"] #>  #> Slots: #>                                                                         #> Name:          data  trellis.par     adeg.par lattice.call       g.args #> Class:         list         list         list         list         list #>                                               #> Name:         stats       s.misc         Call #> Class:         list         list         call #>  #> Extends:  #> Class \"ADEg.Tr\", directly #> Class \"ADEg\", by class \"ADEg.Tr\", distance 2 #> Class \"ADEgORtrellis\", by class \"ADEg.Tr\", distance 3 #> Class \"ADEgORADEgSORtrellis\", by class \"ADEg.Tr\", distance 3"},{"path":"/reference/Tr.match-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class Tr.match â€” Tr.match-class","title":"Class Tr.match â€” Tr.match-class","text":"class creation display paired coordinates triangular plot.","code":""},{"path":"/reference/Tr.match-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class Tr.match â€” Tr.match-class","text":"Tr.match objects can created calls form new(\"Tr.match\", ...). regular usage package use triangle.match function.","code":""},{"path":"/reference/Tr.match-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class Tr.match â€” Tr.match-class","text":"data list containing data data's name. dfxyz: displayed values form three columns data frame, name matching call. labels: vector character strings containing matches' labels. frame: positive null integer. number frame containing data (used          sys.frame(..., env = data$frame)). data stored (.e. data$storeData = FALSE). storeData: logical indicating data stored returned object.          FALSE, names data arguments stored. trellis.par list parameters lattice call.        passed directly par.settings arguments lattice function. adeg.par list graphical parameters, corresponding ones        given adegpar() function. lattice.call list create trellis object. g.args list containing method parameters linked created object ADEg.Tr class.       specific slots Tr.match objects : max3d min3d: vectors three values triangular maximal minimal limits. adjust: logical adjust device limits smaller equilateral triangle containing values stats list internal preliminary calculations s.misc list others internal parameters Call object class call","code":""},{"path":"/reference/Tr.match-class.html","id":"extends","dir":"Reference","previous_headings":"","what":"Extends","title":"Class Tr.match â€” Tr.match-class","text":"Class ADEg.Tr, directly.   Class ADEg, class ADEg.Tr, distance 2.   Class ADEgORtrellis, class ADEg.Tr, distance 3.   Class ADEgORADEgSORtrellis, class ADEg.Tr, distance 3.","code":""},{"path":"/reference/Tr.match-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class Tr.match â€” Tr.match-class","text":"methods father classes \"ADEg.Tr\" \"ADEg\" can used inheritance.   specific methods Tr.match : prepare signature(object = \"Tr.match\"):        calls parent method (prepare ADEg.Tr) modifies graphical parameters used default. panel signature(object = \"Tr.match\"):        draws arrows, labels points.","code":""},{"path":"/reference/Tr.match-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class Tr.match â€” Tr.match-class","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/Tr.match-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class Tr.match â€” Tr.match-class","text":"","code":"showClass(\"Tr.match\") #> Class \"Tr.match\" [package \"adegraphics\"] #>  #> Slots: #>                                                                         #> Name:          data  trellis.par     adeg.par lattice.call       g.args #> Class:         list         list         list         list         list #>                                               #> Name:         stats       s.misc         Call #> Class:         list         list         call #>  #> Extends:  #> Class \"ADEg.Tr\", directly #> Class \"ADEg\", by class \"ADEg.Tr\", distance 2 #> Class \"ADEgORtrellis\", by class \"ADEg.Tr\", distance 3 #> Class \"ADEgORADEgSORtrellis\", by class \"ADEg.Tr\", distance 3"},{"path":"/reference/Tr.traject-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class Tr.traject â€” Tr.traject-class","title":"Class Tr.traject â€” Tr.traject-class","text":"class creation display triangular plot trajectories linking points.","code":""},{"path":"/reference/Tr.traject-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class Tr.traject â€” Tr.traject-class","text":"Tr.traject objects can created calls form new(\"Tr.traject\", ...). regular usage package use triangle.traject function.","code":""},{"path":"/reference/Tr.traject-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class Tr.traject â€” Tr.traject-class","text":"data list containing data data's name. dfxyz: displayed values form three columns data frame, name matching call. fac: factor (matrix factors) splitting rows dfxyz. labels: vector character strings containing trajectories' labels. frame: positive null integer. number frame containing data (used          sys.frame(..., env = data$frame)). data stored (.e. data$storeData = FALSE). storeData: logical indicating data stored returned object.          FALSE, names data arguments stored. trellis.par list parameters lattice call.        passed directly par.settings arguments lattice function. adeg.par list graphical parameters, corresponding ones        given adegpar() function. lattice.call list create trellis object. g.args list containing method parameters linked created object ADEg.Tr class.       specific slots Tr.traject objects : max3d min3d: vectors three values triangular maximal minimal limits. adjust: logical adjust device limits smaller equilateral triangle containing values order: vector containing drawing order trajectories. vector length equal factor. col: NULL value, color colors vector color points, labels lines. stats list internal preliminary calculations s.misc list others internal parameters Call object class call","code":""},{"path":"/reference/Tr.traject-class.html","id":"extends","dir":"Reference","previous_headings":"","what":"Extends","title":"Class Tr.traject â€” Tr.traject-class","text":"Class ADEg.Tr, directly.   Class ADEg, class ADEg.Tr, distance 2.   Class ADEgORtrellis, class ADEg.Tr, distance 3.   Class ADEgORADEgSORtrellis, class ADEg.Tr, distance 3.","code":""},{"path":"/reference/Tr.traject-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class Tr.traject â€” Tr.traject-class","text":"methods father classes \"ADEg.Tr\" \"ADEg\" can used inheritance.   specific methods Tr.traject : prepare signature(object = \"Tr.traject\"):        calls parent method (prepare ADEg.Tr) modifies graphical parameters used default. panel signature(object = \"Tr.traject\"):        draws arrows, labels points.","code":""},{"path":"/reference/Tr.traject-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class Tr.traject â€” Tr.traject-class","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/Tr.traject-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class Tr.traject â€” Tr.traject-class","text":"","code":"showClass(\"Tr.traject\") #> Class \"Tr.traject\" [package \"adegraphics\"] #>  #> Slots: #>                                                                         #> Name:          data  trellis.par     adeg.par lattice.call       g.args #> Class:         list         list         list         list         list #>                                               #> Name:         stats       s.misc         Call #> Class:         list         list         call #>  #> Extends:  #> Class \"ADEg.Tr\", directly #> Class \"ADEg\", by class \"ADEg.Tr\", distance 2 #> Class \"ADEgORtrellis\", by class \"ADEg.Tr\", distance 3 #> Class \"ADEgORADEgSORtrellis\", by class \"ADEg.Tr\", distance 3"},{"path":"/reference/add.ADEg.html","id":null,"dir":"Reference","previous_headings":"","what":"Superpose an new ADEg graph to the previous ones plotted â€” add.ADEg","title":"Superpose an new ADEg graph to the previous ones plotted â€” add.ADEg","text":"Adds ADEg current ADEg ADEgS plot.","code":""},{"path":"/reference/add.ADEg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Superpose an new ADEg graph to the previous ones plotted â€” add.ADEg","text":"","code":"add.ADEg(object)"},{"path":"/reference/add.ADEg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Superpose an new ADEg graph to the previous ones plotted â€” add.ADEg","text":"object ADEg object","code":""},{"path":"/reference/add.ADEg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Superpose an new ADEg graph to the previous ones plotted â€” add.ADEg","text":"function uses last plotted ADEg ADEgS object.   calls superpose.","code":""},{"path":"/reference/add.ADEg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Superpose an new ADEg graph to the previous ones plotted â€” add.ADEg","text":"ADEgS object","code":""},{"path":"/reference/add.ADEg.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Superpose an new ADEg graph to the previous ones plotted â€” add.ADEg","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/add.ADEg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Superpose an new ADEg graph to the previous ones plotted â€” add.ADEg","text":"","code":"df1 <- cbind(rnorm(24), rnorm(24)) df2 <- cbind(rnorm(24), rnorm(24)) g1 <- s.label(df1, ppoints.col = \"blue\") g2 <- s.label(df2, ppoints.col = \"red\", plot = FALSE) add.ADEg(g2)   data(jv73, package = \"ade4\") pca1 <- ade4::dudi.pca(jv73$morpho, scannf = FALSE) g5 <- s.label(pca1$li, plabels.optim = TRUE) g6 <- s.class(pca1$li, jv73$fac.riv, starSize = 0, ellipseSize = 0, chullSize = 1,    ppolygons.alpha = 0.4, col = rainbow(12), ppoints.cex = 0, plot = FALSE) add.ADEg(g6)"},{"path":"/reference/addhist.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds histograms and density lines against a bi-dimensional graphics. â€” addhist","title":"Adds histograms and density lines against a bi-dimensional graphics. â€” addhist","text":"Adds two marginal histograms density lines axis ADEg.S2 object.","code":""},{"path":"/reference/addhist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds histograms and density lines against a bi-dimensional graphics. â€” addhist","text":"","code":"addhist(object, bandwidth, gridsize = 60, kernel = \"normal\", cbreaks = 2,    storeData = TRUE, plot = TRUE, pos = -1, ...)"},{"path":"/reference/addhist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds histograms and density lines against a bi-dimensional graphics. â€” addhist","text":"object ADEg.S2 object bandwidth used calculations density lines      (see bkde function KernSmooth package). gridsize used calculations density lines      (see bkde function KernSmooth package). kernel used calculations density lines      (see bkde function KernSmooth package). cbreaks number cells histograms per interval      grid bi-dimensional graphics. plot logical indicating graphics displayed storeData logical indicating data stored     returned object. FALSE, names data     arguments stored pos integer indicating position     environment data stored, relative environment     function called. Useful storeData     FALSE ... Additional graphical parameters (see     adegpar trellis.par.get)","code":""},{"path":"/reference/addhist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adds histograms and density lines against a bi-dimensional graphics. â€” addhist","text":"Density calculated using function bkde KernSmooth package.","code":""},{"path":"/reference/addhist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds histograms and density lines against a bi-dimensional graphics. â€” addhist","text":"ADEgS object, list four graphical objects,   one ADEg.S2 three trellis (lattice).   names : object ADEg.S2 object densX top histogram, trellis object densY right histogram, trellis object link corner graphics linking two histograms, trellis object","code":""},{"path":"/reference/addhist.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Adds histograms and density lines against a bi-dimensional graphics. â€” addhist","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":"/reference/addhist.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Adds histograms and density lines against a bi-dimensional graphics. â€” addhist","text":"dots arguments, usual parameters s.label   can given object key. Trellis parameters used three remaining graphics.   plot.polygon handles histogram aspect, add.line   graduations lines plot.line density lines. Finally, link graphic, labels aspect can changed   using plabels list, S2.label object.","code":""},{"path":[]},{"path":"/reference/addhist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds histograms and density lines against a bi-dimensional graphics. â€” addhist","text":"","code":"data(rpjdl, package = \"ade4\") coa1 <- ade4::dudi.coa(rpjdl$fau, scannf = FALSE, nf = 4) labli <- s.label(coa1$li)  g1 <- addhist(labli) #> Error in eval(dfxycall): object 'labli' not found g2 <- addhist(labli, plabels.cex = 0, cbreaks = 3) #> Error in eval(dfxycall): object 'labli' not found labco <- s.label(coa1$co)  g3 <- addhist(labco, plabels.cex = 0, cbreaks = 3) #> Error in eval(dfxycall): object 'labco' not found update(g3, pbackground.col = \"grey85\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'object' in selecting a method for function 'update': object 'g3' not found"},{"path":"/reference/addline.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds lines on graphics. â€” addline","title":"Adds lines on graphics. â€” addline","text":"Adds trellis object containing one several lines one several graphical objects.","code":""},{"path":"/reference/addline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds lines on graphics. â€” addline","text":"","code":"addline(object, a = NULL, b = 0, h = NULL, v = NULL, plot = TRUE, ...)"},{"path":"/reference/addline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds lines on graphics. â€” addline","text":"object object class ADEg ADEgS , b coefficients line added, passed panel.abline      function lattice package h, v numeric vectors giving locations respectively horizontal      vertical lines added plot, native coordinates, passed      panel.abline function lattice package plot logical indicating graphics displayed ... arguments. Additional graphical parameters (see plines list     adegpar trellis.par.get).      object ADEgS, argument identify      ADEg /used superposition.","code":""},{"path":"/reference/addline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds lines on graphics. â€” addline","text":"object class ADEgS.","code":""},{"path":"/reference/addline.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Adds lines on graphics. â€” addline","text":"Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/addline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds lines on graphics. â€” addline","text":"","code":"# example extracted from the pedagogic file, here: http://pbil.univ-lyon1.fr/R/pdf/tdr65.pdf data(monde84, package = \"ade4\") dfX <- cbind.data.frame(lpib = log(monde84$pib), croipop = monde84$croipop) dfY <- cbind.data.frame(lmorta = log(monde84$morta), lanal = log(monde84$anal + 1),    rscol = sqrt(100 - monde84$scol)) dfX0 <- ade4::scalewt(dfX) dfY0 <- ade4::scalewt(dfY) can1 <- cancor(dfX0, dfY0) varcanoX <- dfX0 %*% can1$xcoef[,1] varcanoY <- dfY0 %*% can1$ycoef[,1] g1 <- s.label(cbind(varcanoY,varcanoX), labels = row.names(monde84), plabel.cex = 0.8, plot = FALSE) addline(g1, 0, 1, plines.col = \"red\", plines.lwd = 0.5, plines.lty = 2)"},{"path":"/reference/addpoint.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds points on graphics. â€” addpoint","title":"Adds points on graphics. â€” addpoint","text":"Adds trellis object containing one several points one several graphical objects.","code":""},{"path":"/reference/addpoint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds points on graphics. â€” addpoint","text":"","code":"addpoint(object, xcoord, ycoord, plot = TRUE, ...)"},{"path":"/reference/addpoint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds points on graphics. â€” addpoint","text":"object object class ADEg ADEgS xcoord integer (vector) indicating label () plotted      x-axis, passed panel.points function lattice package ycoord integer (vector) indicating label () plotted     y-axis, passed panel.points function lattice package plot logical indicating graphics displayed ... arguments. Additional graphical parameters (see ppoints list     adegpar trellis.par.get).      object ADEgS, argument identify      ADEg /used superposition.","code":""},{"path":"/reference/addpoint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds points on graphics. â€” addpoint","text":"object class \"ADEgS\".","code":""},{"path":"/reference/addpoint.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Adds points on graphics. â€” addpoint","text":"Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/addpoint.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds points on graphics. â€” addpoint","text":"","code":"data(deug, package = \"ade4\") deug$cent[1] #> Algebra  #>      50  g1 <- s1d.density(deug$tab[, 1], plot = FALSE) addpoint(g1, xcoord = deug$cent[1], ycoord = 0, ppoints = list(col = \"black\",   pch = \"*\", cex = 3))"},{"path":"/reference/addsegment.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds segments on graphics. â€” addsegment","title":"Adds segments on graphics. â€” addsegment","text":"Adds trellis object containing one several segments one several graphical objects.","code":""},{"path":"/reference/addsegment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds segments on graphics. â€” addsegment","text":"","code":"addsegment(object, x0 = NULL, y0 = NULL, x1, y1, plot = TRUE, ...)"},{"path":"/reference/addsegment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds segments on graphics. â€” addsegment","text":"object object class ADEg ADEgS x0, y0 coordinates points draw, passed      panel.segments function lattice package. See Details. x1, y1 coordinates points draw, passed      panel.segments function lattice package. See Details. plot logical indicating graphics displayed ... arguments. Additional graphical parameters (see plines list     adegpar trellis.par.get).      object ADEgS, argument identify      ADEg /used superposition.","code":""},{"path":"/reference/addsegment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds segments on graphics. â€” addsegment","text":"object class ADEgS.","code":""},{"path":"/reference/addsegment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adds segments on graphics. â€” addsegment","text":"x0, y0, x1 y1 can vectors. line segment     drawn, , point (x0[], y0[]) point    (x1[], y1[]). coordinate vectors recycled length longest.","code":""},{"path":"/reference/addsegment.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Adds segments on graphics. â€” addsegment","text":"Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/addsegment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds segments on graphics. â€” addsegment","text":"","code":"data(deug, package = \"ade4\") g11 <- s1d.density(deug$tab[, 1], plot = FALSE) g12 <- addsegment(g11, x0 = deug$cent[1], x1 = deug$cent[1], y0 = 0, y1 = 1,    plines = list(col = \"grey30\", lwd = 3))  g13 <- addsegment(g11,    x0 = deug$cent + seq(0, 1, length.out = length(deug$cent)),    x1 = deug$cent + seq(0, 1, length.out = length(deug$cent)),    y0 = 0, y1 = 1,    plines = list(col = 1:length(deug$cent), lty = 1:length(deug$cent)))     # example extracted from the pedagogic file, here: http://pbil.univ-lyon1.fr/R/pdf/tdr65.pdf data(monde84, package = \"ade4\") dfX <- cbind.data.frame(lpib = log(monde84$pib), croipop = monde84$croipop) dfY <- cbind.data.frame(lmorta = log(monde84$morta), lanal = log(monde84$anal + 1),    rscol = sqrt(100 - monde84$scol)) dfX0 <- ade4::scalewt(dfX) dfY0 <- ade4::scalewt(dfY) can1 <- cancor(dfX0, dfY0) varcanoX <- dfX0 %*% can1$xcoef[,1] varcanoY <- dfY0 %*% can1$ycoef[,1] g21 <- s.label(cbind(varcanoY,varcanoX), labels = row.names(monde84), plabel.cex = 0.8,    plot = FALSE) g22 <- addsegment(g21, -1.25, -1.25, 1.25, 1.25, plines.col = \"purple\", plines.lwd = 1.5,    plines.lty = 2)"},{"path":"/reference/addtext.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds labels on graphics. â€” addtext","title":"Adds labels on graphics. â€” addtext","text":"Adds trellis object containing one several labels one several graphical objects.","code":""},{"path":"/reference/addtext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds labels on graphics. â€” addtext","text":"","code":"addtext(object, xcoord, ycoord, label, plot = TRUE, ...)"},{"path":"/reference/addtext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds labels on graphics. â€” addtext","text":"object object class ADEg, trellis ADEgS xcoord integer (vector) indicating label () plotted x-axis,      passed adeg.panel.label ycoord integer (vector) indicating label () plotted y-axis,     passed adeg.panel.label label character string (vector) containing label(s) displayed object plot logical indicating graphics displayed ... arguments. Additional graphical parameters (see plabels list     adegpar trellis.par.get).      object ADEgS, argument identify      ADEg /used superposition.","code":""},{"path":"/reference/addtext.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds labels on graphics. â€” addtext","text":"object class ADEgS.","code":""},{"path":"/reference/addtext.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Adds labels on graphics. â€” addtext","text":"Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/addtext.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds labels on graphics. â€” addtext","text":"","code":"data(dunedata, package = \"ade4\") afc1 <- ade4::dudi.coa(dunedata$veg, scannf = FALSE) g1 <- table.value(dunedata$veg, symbol = \"circle\", ppoints.cex = 0.5, plot = FALSE) addtext(g1, 1, 20, \"A\", plabels.srt = 45, plabels.box.draw = FALSE, plabels.col = \"red\")   xy <- cbind.data.frame(x = runif(200, -1, 1), y = runif(200, -1, 1)) posi <- factor(xy$x > 0) : factor(xy$y > 0) g2 <- s.class(xy, fac = posi, facets = posi, pellipses.col = 1:4, plabels.cex = 0,    plegend.drawKey = FALSE, psub.cex = 0, plot = FALSE) #> Error in multi.facets.S2(thecall, sortparameters$adepar, samelimits = sortparameters$g.args$samelimits): object 'xy' not found addtext(g2, c(0.5, 0.5, -0.5, -0.5), c(0.5, -0.5), levels(posi), plabels.cex = 2, plabels.col = 1:4) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'object' in selecting a method for function 'addtext': object 'g2' not found"},{"path":"/reference/adeg.panel.Spatial.html","id":null,"dir":"Reference","previous_headings":"","what":"Panel function for adding spatial objects. â€” adeg.panel.Spatial","title":"Panel function for adding spatial objects. â€” adeg.panel.Spatial","text":"Panel function adapted Sp package displaying kind spatial   objects handled Sp (classes inherited superclass Spatial)   trellis graphic (lattice package).","code":""},{"path":"/reference/adeg.panel.Spatial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Panel function for adding spatial objects. â€” adeg.panel.Spatial","text":"","code":"adeg.panel.Spatial(SpObject, sp.layout = NULL, col = 1, border = 1, lwd = 1,    lty = 1, alpha = 0.8, cex = 1, pch = 20, n = length(col), spIndex = 1, ...)"},{"path":"/reference/adeg.panel.Spatial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Panel function for adding spatial objects. â€” adeg.panel.Spatial","text":"SpObject object class \"SpatialPoints\", \"SpatialPointsDataFrame\",\"SpatialPixels\", \"SpatialPixelsDataFrame\", \"SpatialGrid\",\"SpatialGridDataFrame\", \"SpatialLines\", \"SpatialLinesDataFrame\",\"SpatialPolygons\" \"SpatialPolygonsDataFrame\" sp.layout list layout items. See spplot information col background color (fill) Spobject border border color lwd line width (border) lty line type (border) alpha background transparency Spobject cex point size pch point type n SpObject contains data,  _desired_ number     intervals splitting data (using pretty). spIndex SpObject contains data frame, values     represented color code. spIndex data frame     represented ... coherence panel functions","code":""},{"path":"/reference/adeg.panel.Spatial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Panel function for adding spatial objects. â€” adeg.panel.Spatial","text":"Draws Spatial object layout.","code":""},{"path":"/reference/adeg.panel.Spatial.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Panel function for adding spatial objects. â€” adeg.panel.Spatial","text":"Package Sp. Author: Edzer Pebesma, Roger Bivand, Barry Rowlingson Virgilo Gomez-Rubio.","code":""},{"path":"/reference/adeg.panel.Spatial.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Panel function for adding spatial objects. â€” adeg.panel.Spatial","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":"/reference/adeg.panel.Spatial.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Panel function for adding spatial objects. â€” adeg.panel.Spatial","text":"SpObject contains several maps, first one selected.    Also objects containing data (classes data.frame slot data), information also shown.    , various colors can used (according col arguments). information use panel functions, please see lattice package developed Deepayan Sarkar.","code":""},{"path":[]},{"path":"/reference/adeg.panel.Spatial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Panel function for adding spatial objects. â€” adeg.panel.Spatial","text":"","code":"if(require(lattice, quietly = TRUE) & require(sp, quietly = TRUE)) { data(elec88, package = \"ade4\")  xy <- elec88$xy arrow <- list(\"SpatialPolygonsRescale\", offset = c(150000,1700000), layout.north.arrow(), scale = 100000)  xyplot(xy[, 2] ~ xy[, 1], aspect = \"iso\", panel = function(...){   adeg.panel.Spatial(SpObject = elec88$Spatial, sp.layout = list(arrow),    col = colorRampPalette(c(\"yellow\", \"blue\"))(5), border =   \"transparent\")}) }"},{"path":"/reference/adeg.panel.hist.html","id":null,"dir":"Reference","previous_headings":"","what":"Panel function for adding histograms. â€” adeg.panel.hist","title":"Panel function for adding histograms. â€” adeg.panel.hist","text":"Panel function displaying histograms trellis graphic (lattice   package) level lines.","code":""},{"path":"/reference/adeg.panel.hist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Panel function for adding histograms. â€” adeg.panel.hist","text":"","code":"adeg.panel.hist(histValues, horizontal = TRUE, densi, drawLines, params = list(),    identifier = \"histogramADEg\")"},{"path":"/reference/adeg.panel.hist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Panel function for adding histograms. â€” adeg.panel.hist","text":"histValues object class histogram. See hist. horizontal logical indicating plot horizontal densi list returns bkde containing coordinates binned      kernel density estimate probability density data drawLines vector containing level values params graphical parameters : plot.polygon, add.line plot.line (lattice) identifier character string prepended name grob created.","code":""},{"path":"/reference/adeg.panel.hist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Panel function for adding histograms. â€” adeg.panel.hist","text":"Displays histogram level lines.","code":""},{"path":"/reference/adeg.panel.hist.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Panel function for adding histograms. â€” adeg.panel.hist","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/adeg.panel.hist.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Panel function for adding histograms. â€” adeg.panel.hist","text":"information use panel functions, please see lattice package developed Deepayan Sarkar.","code":""},{"path":"/reference/adeg.panel.hist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Panel function for adding histograms. â€” adeg.panel.hist","text":"","code":"if(require(KernSmooth, quietly = TRUE) & require(lattice, quietly = TRUE)) {    z <- round(rnorm(100, 30, 5))   h <- hist(z, plot = FALSE)   d <- bkde(z, kernel = \"normal\", gridsize = 60)   l <- c(10, 20, 30, 40)   xyplot(1:50 ~ 1:50, histValues = h, densi = d, drawLines = l,      panel = function(drawLines, histValues, densi){       adeg.panel.hist(histValues = histValues, drawLines = drawLines, densi = densi)}) } #> KernSmooth 2.23 loaded #> Copyright M. P. Wand 1997-2009"},{"path":"/reference/adeg.panel.join.html","id":null,"dir":"Reference","previous_headings":"","what":"Panel function for joining lines. â€” adeg.panel.join","title":"Panel function for joining lines. â€” adeg.panel.join","text":"Panel function drawing lines part circle centred (0, 0) trellis graphic (lattice   package).","code":""},{"path":"/reference/adeg.panel.join.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Panel function for joining lines. â€” adeg.panel.join","text":"","code":"adeg.panel.join(drawLines, params = list())"},{"path":"/reference/adeg.panel.join.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Panel function for joining lines. â€” adeg.panel.join","text":"drawLines vector containing level values used radius circle params graphical parameters : plabels add.line (lattice)","code":""},{"path":"/reference/adeg.panel.join.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Panel function for joining lines. â€” adeg.panel.join","text":"Displays level lines values.","code":""},{"path":"/reference/adeg.panel.join.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Panel function for joining lines. â€” adeg.panel.join","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":"/reference/adeg.panel.join.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Panel function for joining lines. â€” adeg.panel.join","text":"information use panel functions, please see lattice package developed Deepayan Sarkar.","code":""},{"path":"/reference/adeg.panel.join.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Panel function for joining lines. â€” adeg.panel.join","text":"","code":"if(require(lattice, quietly = TRUE)) {   xyplot(0:20 ~ 0:20, drawLines = c(5, 10, 15), params = list(plabels.cex = 2),      panel = function(drawLines, params){       adeg.panel.join(drawLines = drawLines, params = params)}) }"},{"path":"/reference/adeg.panel.label.html","id":null,"dir":"Reference","previous_headings":"","what":"Panel function for adding labels. â€” adeg.panel.label","title":"Panel function for adding labels. â€” adeg.panel.label","text":"Panel function drawing labels trellis graphic (lattice   package) without boxes around labels.","code":""},{"path":"/reference/adeg.panel.label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Panel function for adding labels. â€” adeg.panel.label","text":"","code":"adeg.panel.label(x, y, labels, plabels, pos = NULL)"},{"path":"/reference/adeg.panel.label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Panel function for adding labels. â€” adeg.panel.label","text":"x numeric vector, x-coordinates labels y numeric vector,  y-coordinates labels labels vector character string, labels plabels list parameters extract adegpar(\"plabels\"), used labels' drawing.      value can vector recycled necessary: alpha, cex, col: drawing parameters text srt: orientation labels, horizontal, vertical angle indication (degrees).          Boxes rotated. orientation near horizontal/vertical (0/90), best draw boxes optim: logical. TRUE, uses algorithm trying avoid labels' overlapping outside limits boxes: concerns label's boxes. list: draw: logical. TRUE, labels framed alpha, border, col, lwd, lty: rule transparency, border lines background color pos position specifier text, used panel.text.     Values 1, 2, 3 4 respectively indicate positions , left ,      right specified coordinates.","code":""},{"path":"/reference/adeg.panel.label.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Panel function for adding labels. â€” adeg.panel.label","text":"Draws labels.","code":""},{"path":"/reference/adeg.panel.label.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Panel function for adding labels. â€” adeg.panel.label","text":"algorithm used labels positions optimization inspired pointLabel    function car package (since 2022-10-22, moved maptools package, developed Tom Short).","code":""},{"path":"/reference/adeg.panel.label.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Panel function for adding labels. â€” adeg.panel.label","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/adeg.panel.label.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Panel function for adding labels. â€” adeg.panel.label","text":"information use panel functions, please see lattice package developed Deepayan Sarkar.","code":""},{"path":"/reference/adeg.panel.label.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Panel function for adding labels. â€” adeg.panel.label","text":"","code":"if(require(lattice, quietly = TRUE)) { param <- adegpar(\"plabels\")[[1]] xyplot(1:10 ~ 1:10, panel = function(x, y, ...){   adeg.panel.label(x, y, LETTERS[1:10], plabels = param)}) }   if(require(lattice, quietly = TRUE)) { param$boxes$draw <- FALSE param$col <- \"blue\" xyplot(1:10 ~ 1:10, panel = function(x, y, ...){   adeg.panel.label(x, y, LETTERS[1:10], plabels = param)}) }"},{"path":"/reference/adeg.panel.nb.html","id":null,"dir":"Reference","previous_headings":"","what":"Panel functions for adding graphs. â€” adeg.panel.nb","title":"Panel functions for adding graphs. â€” adeg.panel.nb","text":"Panel function representing graph trellis graphic (lattice package).   Two types graph objects can used: nb listw object (spdep package) simple edges informations.   Directions associated edges displayed.","code":""},{"path":"/reference/adeg.panel.nb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Panel functions for adding graphs. â€” adeg.panel.nb","text":"","code":"adeg.panel.nb(nbobject, coords, col.edge = \"black\", lwd = 1, lty = 1, pch = 20,    cex = 1, col.node = \"black\", alpha = 1)  adeg.panel.edges(edges, coords, col.edge = \"black\", lwd = 1, lty = 1, pch = 20,    cex = 1, col.node = \"black\", alpha = 1)"},{"path":"/reference/adeg.panel.nb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Panel functions for adding graphs. â€” adeg.panel.nb","text":"nbobject object class nb listw edges two columns matrix, representing edges     nodes. row , x[, 1] x[, 2] linked, x[, 1] x[, 2] vertices number. coords two columns matrix containing vertices' coordinates col.edge edges' color(s) lwd line width (edges). Can vector lty line type (edges). Can vector pch vertices' representation type (symbols). Can vector cex symbols' size(s) (vertices). Can vector col.node vertices' color(s). Can vector alpha symbols' transparency","code":""},{"path":"/reference/adeg.panel.nb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Panel functions for adding graphs. â€” adeg.panel.nb","text":"Displays neighboring graph.","code":""},{"path":"/reference/adeg.panel.nb.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Panel functions for adding graphs. â€” adeg.panel.nb","text":"Package spdep. Author: Roger Bivand","code":""},{"path":"/reference/adeg.panel.nb.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Panel functions for adding graphs. â€” adeg.panel.nb","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":"/reference/adeg.panel.nb.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Panel functions for adding graphs. â€” adeg.panel.nb","text":"information use panel functions, please see lattice package developed Deepayan Sarkar.","code":""},{"path":[]},{"path":"/reference/adeg.panel.nb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Panel functions for adding graphs. â€” adeg.panel.nb","text":"","code":"if(require(lattice, quietly = TRUE) &   require(spdep, quietly = TRUE)) {    data(elec88, package = \"ade4\")   coords <- elec88$xy   xyplot(coords[, 2] ~ coords[, 1],     panel = function(...){adeg.panel.nb(elec88$nb, coords, col.edge = c(\"blue\", \"red\"))}) } #> To access larger datasets in this package, install the spDataLarge #> package with: `install.packages('spDataLarge', #> repos='https://nowosad.github.io/drat/', type='source')` #> Linking to GEOS 3.10.2, GDAL 3.4.1, PROJ 8.2.1; sf_use_s2() is TRUE   if(require(lattice, quietly = TRUE)) {   edges <- matrix(c(1, 2, 3, 2, 4, 1, 3, 4), byrow = TRUE, ncol = 2)   coords <- matrix(c(0, 1, 1, 0, 0, -1, -1, 0), byrow = TRUE, ncol = 2)   xyplot(coords[,2] ~ coords[,1],     panel = function(...){adeg.panel.edges(edges, coords, lty = 1:4, cex = 5)}) }"},{"path":"/reference/adeg.panel.values.html","id":null,"dir":"Reference","previous_headings":"","what":"Panel function drawing a third variable into a two-dimensional scatterplot â€” adeg.panel.values","title":"Panel function drawing a third variable into a two-dimensional scatterplot â€” adeg.panel.values","text":"Panel function drawing coordinates variable representation.   values can represented symbols proportional size various colors.","code":""},{"path":"/reference/adeg.panel.values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Panel function drawing a third variable into a two-dimensional scatterplot â€” adeg.panel.values","text":"","code":"adeg.panel.values(x, y, z, method, symbol, ppoints, breaks, centerpar = NULL,    center = 0)"},{"path":"/reference/adeg.panel.values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Panel function drawing a third variable into a two-dimensional scatterplot â€” adeg.panel.values","text":"x numeric vector, x-coordinates symbols y numeric vector,  y-coordinates symbols z numeric vector, third variable one value per coordinates (x, y) method character string equal color size.     color, palette color used symbols (one color per interval defined breaks).     size, symbols' area proportional value. Area 0 values equals center.      Two colors used, one values smaller center values larger center. symbol character string equal square circle. ppoints list parameters extract adegpar(\"ppoints\"), used points' drawing. alpha: transparency points cex: size points col: border color points pch: symbol use fill: filling color breaks vector, breaks used splitting z method color centerpar list represent center value using elements adegpar(\"ppoints\") list NULL value.     method size, z-values equals center size zero.      centerpar NULL, z-values shown points centerpar drawing parameters. center center value method size","code":""},{"path":"/reference/adeg.panel.values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Panel function drawing a third variable into a two-dimensional scatterplot â€” adeg.panel.values","text":"Draws points.","code":""},{"path":"/reference/adeg.panel.values.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Panel function drawing a third variable into a two-dimensional scatterplot â€” adeg.panel.values","text":"Tanimura, S. Kuroiwa, C. Mizota, T. 2006 Proportional symbol   mapping R Journal Statistical Software 15, 1--7","code":""},{"path":"/reference/adeg.panel.values.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Panel function drawing a third variable into a two-dimensional scatterplot â€” adeg.panel.values","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":"/reference/adeg.panel.values.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Panel function drawing a third variable into a two-dimensional scatterplot â€” adeg.panel.values","text":"information use panel functions, please see lattice package developed Deepayan Sarkar. symbols size, method size uses perceptual scaling (Tanimura et al. 2006).","code":""},{"path":"/reference/adeg.panel.values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Panel function drawing a third variable into a two-dimensional scatterplot â€” adeg.panel.values","text":"","code":"if(require(lattice, quietly = TRUE)) { param <- adegpar(\"ppoints\")[[1]] param$col <- adegpar(\"ppalette\")[[1L]]$quanti(2) z <- rnorm(10) xyplot(1:10 ~ 1:10, panel = function(x, y, ...){   adeg.panel.values(x, y, z, method = \"size\", symbol = \"square\", ppoints =   param, breaks = pretty(z, 4))}) }   if(require(lattice, quietly = TRUE)) { param$col <- adegpar()$ppalette$quali((length(pretty(z, 2)) - 1)) xyplot(1:10 ~ 1:10, panel = function(x, y, ...){   adeg.panel.values(x, y, z, method = \"color\", symbol = \"circle\",                      ppoints = param, breaks = pretty(z, 2))})  }"},{"path":"/reference/adegpar.html","id":null,"dir":"Reference","previous_headings":"","what":"Handling ADEg graphical parameters â€” adegpar","title":"Handling ADEg graphical parameters â€” adegpar","text":"adegpar can used set query graphical parameters used ADEg object display. inspired par function graphics package.","code":""},{"path":"/reference/adegpar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handling ADEg graphical parameters â€” adegpar","text":"","code":"adegpar(...)"},{"path":"/reference/adegpar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handling ADEg graphical parameters â€” adegpar","text":"... empty, return value named list containing current settings. string characters, corresponding sub-list parameters return information. list containing keys values, corresponding changes current settings made.","code":""},{"path":"/reference/adegpar.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Handling ADEg graphical parameters â€” adegpar","text":"graphical parameters control apparency graphic.   Calls can made using either list list (e.g. plabels = list(col = \"red\")) list grouping keys \".\" (e.g. plabels.col = \"red\"). Parameters re-used needed ADEg object.   set globally, meaning using adegpar, created objects afterwards affected.","code":""},{"path":"/reference/adegpar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Handling ADEg graphical parameters â€” adegpar","text":"Several parameters used create complete plot accessible adegpar.  p1d: parameters one-dimension graphic, object class inherited \"ADEg.S1\" \"ADEg.C1\" horizontal: logical indicating plot horizontal reverse: logical indicating bottom plot bottom (horizontal TRUE)          left device (horizontal FALSE). FALSE, graphical display bottom top          (horizontal TRUE) right device (horizontal FALSE). rug: list dedicated tick marks draw: logical indicating rugs drawn tck: size rug (ticks) proportion reference line origin device (0.5 default) margin: draw reference line (0.07 default) line: logical indicating reference line drawn using porigin arguments parrows: arrows' parameters. see panel.arrows information angle: angle shaft arrow edge arrow head ends: kind arrows drawn. Can first, last length: length edges arrow head paxes: axis' parameters. Mostly inspired xyplot function lattice package aspectratio: character string control physical aspect ratio graphic (drawing panel specifically).         iso isometric scales, fill drawing big possible xy banking rule draw: logical indicating axis (tick marks labels) drawn around graphic x: list used creation x-axis trellis object. See xyplot information draw: logical indicating x-axis (tick marks labels) drawn around graphic y: list x draw parameters pbackground: background's parameters col: background color box: logical indicating box drawn surrounding plot pellipses: ellipses' drawing parameters alpha: value 0 1 controlling ellipses' background transparency axes: list dedicated ellipses' axis draw: logical indicating whether ellipses' axis drawn col: ellipses' axis color lty: line type ellipses' axis lwd: line width ellipses' axis border: ellipses's border color lty: line type ellipses' border lwd: line width ellipses' border col: ellipses' background color pgrid: grid's drawing parameters draw: logical indicating grid drawn background col: grid's line color lty: line type grid line lwd: line width grid line nint: integer indicating number grid intervals expected text: list dedicated grid legend text cex: text size grid legend col: text color grid legend pos: character string (topright, topleft, bottomleft, bottomright) vector length 2            indicating text position grid legend. vector, default unit npc (normalized parent coordinates). plabels: labels' drawing parameters alpha: value 0 1 controlling label transparency cex: labels' text size col: labels' text color srt: labels' text orientation. can horizontal, vertical angle indication degrees optim: logical indicating algorithm used avoid labels' overlapping outside limits boxes: label's boxes parameters draw: logical indicating labels framed alpha: value 0 1 controlling labels' boxes transparency border: boxes' border color col: boxes' background color lty: line type boxes' border lwd: line width boxes' border plegend: legend's drawing parameters (used object class inherited T.value S2.value) drawKey: logical indicating legend         drawn. Legend can provided key argument         automatically generated *.class *.value         functions drawColorKey: logical indicating color         legend drawn (*.image functions) size: size legend plines: lines' drawing parameters col: lines color lty: lines type lwd: lines width pnb: drawing parameters neighbourhood graph edge: edge's drawing parameters col: edge color lty: line type edge lwd: line width edge node: node's drawing parameters pch: node's symbol type cex: node's symbol size col: node's symbol color alpha: value 0 1 controlling node's symbol transparency porigin: drawing parameters origin's lines. See panel.lines information draw: logical indicating vertical horizontal lines drawn indicate origin include: logical indicating origin included drawing limits origin: two-length vector indicating origin coordinates alpha: value 0 1 controlling origin's lines transparency col: color origin's lines lty: origin's line type lwd: origin's line width ppalette: function taking one integer argument indicating number expecting colors (example using colorRampPalette) quanti: adegpar()$ppalette$quanti(n) returns n colors shaded grey white quali: adegpar()$ppalette$quali(n, name) returns n differentiated colors. name argument passed brewer.pal function          RColorBrewer package must Accent, Dark2, Paired, Pastel1, Pastel2, Set1 (default value), Set2 Set3.         n equal 2, values 'white' 'black' colors returned can quite visible display. ppoints: points' drawing paameters alpha: value 0 1 controlling points transparency cex: points size col: points color pch: points type fill: points' background color (filled points type) ppolygons: polygons' drawing parameters (used example draw convex hull       S2.class Gaussian curves C1.gauss objects). See lpolygon information. border: polygon's border color col: polygon's background color lty: line type polygon border lwd: line width polygon border alpha: value 0 1 controlling polygons' background transparency pSp: drawing parameters spatial object col: spatial object's background color border: spatial object's border color lty: line type spatial object border lwd: line width spatial object border alpha: value 0 1 controlling spatial object transparency psub: subtitle's drawing parameters cex: text size subtitle col: text color subtitle position: character string (topright, topleft, bottomleft, bottomright) vector length 2            indicating text position subtitle. vector, default unit npc (normalized parent coordinates). text: character string display ptable: table graphic, object class inherited ADEg.T x: x-axis parameters srt: text rotation pos: position axis. can top bottom. Otherwise axis labels' axis drawn tck: ticks size adj: justification labels y: x list, y-axis str, tck, adj pos: position axis. can left right. Otherwise axis labels' axis drawn margin: margin surrounding drawing panel. numbers indicate bottom, left, top right margins.         Results obtained passing margin padding argument lattice. Please see          layout.heights layout.widths parameters lattice package information","code":""},{"path":"/reference/adegpar.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Handling ADEg graphical parameters â€” adegpar","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/adegpar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Handling ADEg graphical parameters â€” adegpar","text":"","code":"oldparamadeg <- adegpar()      X <- data.frame(x = runif(50, -1, 2), y = runif(50, -1, 2)) s.label(X)  names(adegpar()) #>  [1] \"p1d\"         \"parrows\"     \"paxes\"       \"pbackground\" \"pellipses\"   #>  [6] \"pgrid\"       \"plabels\"     \"plegend\"     \"plines\"      \"pnb\"         #> [11] \"porigin\"     \"ppalette\"    \"ppoints\"     \"ppolygons\"   \"pSp\"         #> [16] \"psub\"        \"ptable\"      adegpar(\"paxes.draw\", \"psub.cex\") #> $paxes #> $paxes$draw #> [1] FALSE #>  #>  #> $psub #> $psub$cex #> [1] 1 #>  #>  adegpar()$pback$col #> [1] \"white\" adegpar(\"paxes.draw\" = TRUE, \"psu.ce\" = 3, \"pback.col\" = \"grey85\") s.label(X)   adegpar(oldparamadeg)"},{"path":"/reference/adegraphics-internal.html","id":null,"dir":"Reference","previous_headings":"","what":"For internal use only â€” internals","title":"For internal use only â€” internals","text":"Internal classes, methods functions. users.","code":""},{"path":"/reference/adegraphics-internal.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"For internal use only â€” internals","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":"/reference/adegraphics-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Graphical objects for ade4 functions (and more) â€” adegraphics-package","title":"Graphical objects for ade4 functions (and more) â€” adegraphics-package","text":"package created replace graphics functionalities   ade4 package offer customizable representations data   result analysis. Graphics objects S4 class, can displayed also stored   latter modifications.   modifications can graphical changes, also superposition   juxtaposition various graphical objects (creating type object).   object contain graphical parameters instructions   display (calls, positions, etc.) data set used.   Sometimes data heavy, due size example. Two storing   systems exist: full storage: data assigned object's slot. names position: data names (string, obtained using       deparse(substitute)) frame position (using       sys.nframe()) stored. full data can       retrieve two informations (data objects       still environment) new system based lattice package grid graphics.","code":""},{"path":"/reference/adegraphics-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Graphical objects for ade4 functions (and more) â€” adegraphics-package","text":"lot classes implemented.   Two superclass structures architecture class.   Simple complex graphics distinguished former version: ADEg class provides simple graphics using one kind data       (time, data frame) one representation method       (points, labels, arrows...) ADEgS class provides complex graphics making juxtaposition,        superposition /insertion several simple graphics. 5 subclasses inherits superclass abstract ADEg: ADEg.S1: one-dimensional plot ADEg.S2: bi-dimensional plot ADEg.C1: one-dimensional data plotted 2-D ADEg.T: table plot ADEg.Tr: triangle plot","code":""},{"path":"/reference/adegraphics-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Graphical objects for ade4 functions (and more) â€” adegraphics-package","text":"AurÃ©lie Siberchicot, Alice Julien-LaferriÃ¨re, Anne-BÃ©atrice Dufour, Jean Thioulouse StÃ©phane Dray (2017). adegraphics: S4   Lattice-Based Package Representation Multivariate Data. R Journal. 9:2. 198--212.   https://journal.r-project.org/archive/2017/RJ-2017-042/index.html","code":""},{"path":[]},{"path":"/reference/adegraphics-package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Graphical objects for ade4 functions (and more) â€” adegraphics-package","text":"","code":"showClass(\"ADEg\") #> Virtual Class \"ADEg\" [package \"adegraphics\"] #>  #> Slots: #>                                                                         #> Name:   trellis.par     adeg.par lattice.call       g.args        stats #> Class:         list         list         list         list         list #>                                  #> Name:        s.misc         Call #> Class:         list         call #>  #> Extends: \"ADEgORtrellis\", \"ADEgORADEgSORtrellis\" #>  #> Known Subclasses:  #> Class \"ADEg.C1\", directly #> Class \"ADEg.S1\", directly #> Class \"ADEg.S2\", directly #> Class \"ADEg.T\", directly #> Class \"ADEg.Tr\", directly #> Class \"C1.barchart\", by class \"ADEg.C1\", distance 2 #> Class \"C1.curve\", by class \"ADEg.C1\", distance 2 #> Class \"C1.density\", by class \"ADEg.C1\", distance 2 #> Class \"C1.gauss\", by class \"ADEg.C1\", distance 2 #> Class \"C1.dotplot\", by class \"ADEg.C1\", distance 2 #> Class \"C1.hist\", by class \"ADEg.C1\", distance 2 #> Class \"C1.interval\", by class \"ADEg.C1\", distance 2 #> Class \"S1.boxplot\", by class \"ADEg.S1\", distance 2 #> Class \"S1.class\", by class \"ADEg.S1\", distance 2 #> Class \"S1.distri\", by class \"ADEg.S1\", distance 2 #> Class \"S1.label\", by class \"ADEg.S1\", distance 2 #> Class \"S1.match\", by class \"ADEg.S1\", distance 2 #> Class \"S2.arrow\", by class \"ADEg.S2\", distance 2 #> Class \"S2.class\", by class \"ADEg.S2\", distance 2 #> Class \"S2.corcircle\", by class \"ADEg.S2\", distance 2 #> Class \"S2.density\", by class \"ADEg.S2\", distance 2 #> Class \"S2.distri\", by class \"ADEg.S2\", distance 2 #> Class \"S2.image\", by class \"ADEg.S2\", distance 2 #> Class \"S2.label\", by class \"ADEg.S2\", distance 2 #> Class \"S2.logo\", by class \"ADEg.S2\", distance 2 #> Class \"S2.match\", by class \"ADEg.S2\", distance 2 #> Class \"S2.traject\", by class \"ADEg.S2\", distance 2 #> Class \"S2.value\", by class \"ADEg.S2\", distance 2 #> Class \"T.image\", by class \"ADEg.T\", distance 2 #> Class \"T.value\", by class \"ADEg.T\", distance 2 #> Class \"C1.curves\", by class \"ADEg.C1\", distance 3 #> Class \"T.cont\", by class \"ADEg.T\", distance 3 #> Class \"Tr.class\", by class \"ADEg.Tr\", distance 2 #> Class \"Tr.label\", by class \"ADEg.Tr\", distance 2 #> Class \"Tr.match\", by class \"ADEg.Tr\", distance 2 #> Class \"Tr.traject\", by class \"ADEg.Tr\", distance 2   showClass(\"ADEgS\") #> Class \"ADEgS\" [package \"adegraphics\"] #>  #> Slots: #>                                                #> Name:   ADEglist positions       add      Call #> Class:      list    matrix    matrix      call #>  #> Extends: \"ADEgORADEgSORtrellis\""},{"path":"/reference/cbindADEg.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine ADEg objects by columns or rows â€” cbindADEg","title":"Combine ADEg objects by columns or rows â€” cbindADEg","text":"Take sequence ADEg, ADEgS trellis arguments combine columns rows, respectively.","code":""},{"path":"/reference/cbindADEg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine ADEg objects by columns or rows â€” cbindADEg","text":"","code":"cbindADEg(g1, g2, ..., plot = FALSE) rbindADEg(g1, g2, ..., plot = FALSE)"},{"path":"/reference/cbindADEg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine ADEg objects by columns or rows â€” cbindADEg","text":"g1 object class ADEg, ADEgS trellis g2 object class ADEg, ADEgS trellis ... objects class ADEg, ADEgS trellis plot logical indicating graphics displayed","code":""},{"path":"/reference/cbindADEg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine ADEg objects by columns or rows â€” cbindADEg","text":"ADEgS object","code":""},{"path":"/reference/cbindADEg.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Combine ADEg objects by columns or rows â€” cbindADEg","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/cbindADEg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine ADEg objects by columns or rows â€” cbindADEg","text":"","code":"data(jv73, package = \"ade4\") pca1 <- ade4::dudi.pca(jv73$morpho, scannf = FALSE) g1 <- s.label(pca1$li, plabels.optim = TRUE, plot = FALSE) g2 <- s.class(pca1$li, jv73$fac.riv, starSize = 0, ellipseSize = 0, chullSize = 1,    ppolygons.alpha = 0.4, col = rainbow(12), ppoints.cex = 0, plot = FALSE) g3 <- s.corcircle(pca1$co, pbackground.box = FALSE, plot = FALSE) g4 <- rbindADEg(cbindADEg(g1, g2), cbindADEg(superpose(g1, g2), g3), plot = TRUE)"},{"path":"/reference/changelatticetheme.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the lattice theme used for adegraphics â€” changelatticetheme","title":"Change the lattice theme used for adegraphics â€” changelatticetheme","text":"function allows modify default theme existing adegraphics objects.   created theme also affects previously created objects.","code":""},{"path":"/reference/changelatticetheme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the lattice theme used for adegraphics â€” changelatticetheme","text":"","code":"changelatticetheme(...)"},{"path":"/reference/changelatticetheme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the lattice theme used for adegraphics â€” changelatticetheme","text":"... lattice parameters, used trellis.par.set provided      trellis.par.get. empty, reset theme adegraphics one.","code":""},{"path":"/reference/changelatticetheme.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Change the lattice theme used for adegraphics â€” changelatticetheme","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":"/reference/changelatticetheme.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Change the lattice theme used for adegraphics â€” changelatticetheme","text":"adegraphics theme removes margins, sets transparent background grey regions. development creation various themes adegraphics.","code":""},{"path":[]},{"path":"/reference/changelatticetheme.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change the lattice theme used for adegraphics â€” changelatticetheme","text":"","code":"if(require(lattice, quietly = TRUE)) {   show.settings()   changelatticetheme(list(superpose.symbol = list(pch = c(21, 22, 35), cex = 1)))   show.settings()   show.settings()[1] }"},{"path":"/reference/getcall-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Method for ADEg and ADEgS objects â€” getcall-methods","title":"Method for ADEg and ADEgS objects â€” getcall-methods","text":"getcall returns call used create object.","code":""},{"path":"/reference/getcall-methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Method for ADEg and ADEgS objects â€” getcall-methods","text":"signature(object = \"ADEg\") returns slot Call object ADEg signature(object = \"ADEgS\") returns slot Call object ADEgS","code":""},{"path":"/reference/getcall-methods.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Method for ADEg and ADEgS objects â€” getcall-methods","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":"/reference/insert.html","id":null,"dir":"Reference","previous_headings":"","what":"Insert a graphic into an existing one â€” insert","title":"Insert a graphic into an existing one â€” insert","text":"function inserts first graphic previously created /displayed one.","code":""},{"path":"/reference/insert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Insert a graphic into an existing one â€” insert","text":"","code":"insert(graphics, oldgraphics, posi = c(\"bottomleft\", \"bottomright\", \"topleft\",    \"topright\"), ratio = 0.2, inset = 0.0, plot = TRUE, which, dispatch = FALSE)"},{"path":"/reference/insert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Insert a graphic into an existing one â€” insert","text":"graphics object class ADEg, ADEgS trellis oldgraphics object class ADEg, ADEgS missing. oldgraphics missing,     graphics added current device. posi character value two-length numeric vector (normalized parent coordinates npc 0 1) indicating      position olgraphics added graphics ratio numeric value 0 1 indicating size olgraphics regarding plot region inset inset graph drawn regarding plot region.      can two-length vector giving inset x y. atomic, inset used x y. plot logical indicating graphics displayed numeric value vector values used oldgraphics ADEgS object,      indicating -th sub-graphic oldgraphics graphics added. dispatch logical used graphics oldgraphics ADEgS objects length,      indicating graphics added one one int oldgraphics. used graphics oldgraphics      created facets option.","code":""},{"path":"/reference/insert.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Insert a graphic into an existing one â€” insert","text":"object class \"ADEgS\".","code":""},{"path":"/reference/insert.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Insert a graphic into an existing one â€” insert","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/insert.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Insert a graphic into an existing one â€” insert","text":"","code":"data(deug, package = \"ade4\") dd1 <- ade4::dudi.pca(deug$tab, scannf = FALSE, nf = 4) g1 <- s.label(dfxy = dd1$li, labels = rownames(dd1$li), plabels = list(cex = 0.75), plot = FALSE) g2 <- s1d.barchart(score = dd1$eig, plot = FALSE,    ppolygons = list(col = c(rep(\"black\", 2), rep(\"grey\", 2), rep(\"white\", 5))),    p1d = list(horizontal = FALSE), psub = list(position = \"topright\", text = \"Eigenvalues\"),    pgrid = list(draw = FALSE), pbackground = list(box = TRUE), xlim = c(0.5, 9.5)) g1  g3 <- insert(g2, plot = FALSE)  mat <- g3@positions mat[2, ] <- c(0.8, 0, 1, 0.2) update(g3, positions = mat, plot = FALSE) print(g3) ## square == NULL  print(g3, square = TRUE)  print(g3, square = FALSE)   g4 <- insert(g2, g1, posi = \"topleft\")   data(jv73, package = \"ade4\") pca1 <- ade4::dudi.pca(jv73$morpho, scannf = FALSE) g5 <- s.value(jv73$xy, pca1$li[, 1:2], porigin.include = FALSE, plot = FALSE) g6 <- s.corcircle(pca1$co, pbackground.box = FALSE, plot = FALSE) g7 <- insert(g6, g5, posi = c(0.3, 0.4, 0.5, 0.6))"},{"path":"/reference/layout2position.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform a layout matrix into a position one â€” layout2position","title":"Transform a layout matrix into a position one â€” layout2position","text":"function transforms layout's informations position matrix useful   ADEgS lattice graphics.","code":""},{"path":"/reference/layout2position.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform a layout matrix into a position one â€” layout2position","text":"","code":"layout2position(mat, widths = rep(1, NCOL(mat)), heights = rep(1, NROW(mat)), ng,  square = FALSE)"},{"path":"/reference/layout2position.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform a layout matrix into a position one â€” layout2position","text":"mat matrix indicating location figures display     (value must 0 positive integer) two-length vector indicating number rows      columns corresponding layout. widths vector relative values columns' widths device. sum must equal number columns. heights vector relative values rows' heights device. sum must equal number rows. ng value number positions needed (.e. number graphics plot) square logical indicating graphics isometric plot","code":""},{"path":"/reference/layout2position.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform a layout matrix into a position one â€” layout2position","text":"four-columns matrix indicating coordinates (normalized parent coordinates npc)    top-right bottom-left hand corners displayed figure device.","code":""},{"path":"/reference/layout2position.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Transform a layout matrix into a position one â€” layout2position","text":"function strongly inspired layout function graphics package.","code":""},{"path":"/reference/layout2position.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Transform a layout matrix into a position one â€” layout2position","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/layout2position.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform a layout matrix into a position one â€” layout2position","text":"","code":"layout2position(mat = rbind(c(0, 0, 1), c(2, 2, 1))) #>           [,1] [,2]      [,3] [,4] #> [1,] 0.6666667    0 1.0000000  1.0 #> [2,] 0.0000000    0 0.6666667  0.5 layout2position(mat = cbind(c(0, 0, 1), c(2, 2, 1)), widths = c(0.5, 1.5)) #>      [,1]      [,2] [,3]      [,4] #> [1,] 0.00 0.0000000    1 0.3333333 #> [2,] 0.25 0.3333333    1 1.0000000"},{"path":"/reference/panel-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods panel for ADEg objects â€” panel-methods","title":"Methods panel for ADEg objects â€” panel-methods","text":"method panel displays specific graphical components.","code":""},{"path":"/reference/panel-methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Methods panel for ADEg objects â€” panel-methods","text":"signature(object = \"C1.barchart\") draws bar charts labels signature(object = \"C1.curve\") draws points curves signature(object = \"C1.curves\") draws multiple points curves signature(object = \"C1.density\") draws density curves signature(object = \"C1.dotplot\") draws segments dots signature(object = \"C1.gauss\") draws Gauss curves level names curve signature(object = \"C1.hist\") draws rectangles signature(object = \"C1.interval\") draws segments polygons signature(object = \"S1.boxplot\") draws box--wiskers diagrams, mean points labels signature(object = \"S1.class\") draws labels lines matching score values signature(object = \"S1.distri\") draws mean points segments matching labels signature(object = \"S1.label\") draws labels links score points signature(object = \"S1.match\") draws score points matching segments labels signature(object = \"S2.arrow\") draws points, arrows labels signature(object = \"S2.class\") draws ellipses, convex hulls, stars, labels points signature(object = \"S2.corcircle\") draws arrows, labels axes signature(object = \"S2.density\") draws densities external points signature(object = \"S2.distri\") draws ellipses, stars, labels points signature(object = \"S2.image\") draws raster image signature(object = \"S2.label\") draws points labels signature(object = \"S2.logo\") displays logos signature(object = \"S2.match\") draws arrows labels signature(object = \"S2.traject\") draws points, arrows labels signature(object = \"S2.value\") draws symbols signature(object = \"T.cont\") draws mean points regression lines signature(object = \"T.image\") draws raster image signature(object = \"T.value\") draws symbols signature(object = \"Tr.class\") draws arrows, labels points signature(object = \"Tr.label\") draws lines, labels points signature(object = \"Tr.match\") draws arrows, labels points signature(object = \"Tr.traject\") draws arrows, labels points","code":""},{"path":"/reference/panel-methods.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Methods panel for ADEg objects â€” panel-methods","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":"/reference/plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods to display the outputs of an analysis performed with ade4 â€” plot","title":"Methods to display the outputs of an analysis performed with ade4 â€” plot","text":"S3 methods display outputs analysis performed ade4","code":""},{"path":"/reference/plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods to display the outputs of an analysis performed with ade4 â€” plot","text":"","code":"# S3 method for foucart kplot(object, xax = 1, yax = 2, which.tab = 1:length(object$blo), pos = -1,    storeData = TRUE, plot = TRUE, ...) # S3 method for mcoa kplot(object, xax = 1, yax = 2, which.tab = 1:nrow(object$cov2),    option = c(\"points\", \"axis\", \"columns\"), pos = -1, storeData = TRUE, plot = TRUE, ...) # S3 method for mfa kplot(object, xax = 1, yax = 2, which.tab = 1:length(object$blo), traject = FALSE,    permute = FALSE, pos = -1, storeData = TRUE, plot = TRUE, ...) # S3 method for mbpcaiv kplot(object, xax = 1, yax = 2, which.tab = 1:length(object$blo), pos = -1, storeData = TRUE, plot = TRUE, ...) # S3 method for pta kplot(object, xax = 1, yax = 2, which.tab = 1:nrow(object$RV), which.graph = 1:4,    pos = -1, storeData = TRUE, plot = TRUE, ...) # S3 method for sepan kplot(object, xax = 1, yax = 2, which.tab = 1:length(object$blo), permute = FALSE,    traject = FALSE, posieig = \"bottomleft\", pos = -1, storeData = TRUE, plot = TRUE, ...) kplotsepan.coa(object, xax = 1, yax = 2, which.tab = 1:length(object$blo),    permute = FALSE, posieig = \"bottomleft\", pos = -1, storeData = TRUE, plot = TRUE, ...) # S3 method for statis kplot(object, xax = 1, yax = 2, which.tab = 1:length(object$tab.names), traject = FALSE,    arrow = TRUE, class = NULL, pos = -1, storeData = TRUE, plot = TRUE, ...)  # S3 method for acm plot(x, xax = 1, yax = 2, pos = -1, storeData = TRUE, plot = TRUE, ...) # S3 method for betcoi plot(x, xax = 1, yax = 2, pos = -1, storeData = TRUE, plot = TRUE, ...) # S3 method for betdpcoa plot(x, xax = 1, yax = 2, pos = -1, storeData = TRUE, plot = TRUE, ...) # S3 method for betwitdpcoa plot(x, xax = 1, yax = 2, pos = -1, storeData = TRUE, plot = TRUE, ...) # S3 method for betrlq plot(x, xax = 1, yax = 2, pos = -1, storeData = TRUE, plot = TRUE, ...) # S3 method for between plot(x, xax = 1, yax = 2, pos = -1, storeData = TRUE, plot = TRUE, ...) # S3 method for coinertia plot(x, xax = 1, yax = 2, pos = -1, storeData = TRUE, plot = TRUE, ...) # S3 method for discrimin plot(x, xax = 1, yax = 2, pos = -1, storeData = TRUE, plot = TRUE, ...) # S3 method for dpcoa plot(x, xax = 1, yax = 2, pos = -1, storeData = TRUE, plot = TRUE, ...) # S3 method for fca plot(x, xax = 1, yax = 2, pos = -1, storeData = TRUE, plot = TRUE, ...) # S3 method for foucart plot(x, xax = 1, yax = 2, pos = -1, storeData = TRUE, plot = TRUE, ...) # S3 method for krandboot plot(x, pos = -1, storeData = TRUE, plot = TRUE, ...) # S3 method for krandxval plot(x, pos = -1, storeData = TRUE, plot = TRUE, ...) # S3 method for mcoa plot(x, xax = 1, yax = 2, pos = -1, storeData = TRUE, plot = TRUE, ...) # S3 method for mfa plot(x, xax = 1, yax = 2, pos = -1, storeData = TRUE, plot = TRUE, ...) # S3 method for multiblock plot(x, xax = 1, yax = 2, pos = -1, storeData = TRUE, plot = TRUE, ...) # S3 method for multispati plot(x, xax = 1, yax = 2, pos = -1, storeData = TRUE, plot = TRUE, ...) # S3 method for niche plot(x, xax = 1, yax = 2, pos = -1, storeData = TRUE, plot = TRUE, ...) # S3 method for pcaiv plot(x, xax = 1, yax = 2, pos = -1, storeData = TRUE, plot = TRUE, ...) # S3 method for pta plot(x, xax = 1, yax = 2, pos = -1, storeData = TRUE, plot = TRUE, ...) # S3 method for procuste plot(x, xax = 1, yax = 2, pos = -1, storeData = TRUE, plot = TRUE, ...) # S3 method for randboot plot(x, pos = -1, storeData = TRUE, plot = TRUE, ...) # S3 method for randxval plot(x, pos = -1, storeData = TRUE, plot = TRUE, ...) # S3 method for rlq plot(x, xax = 1, yax = 2, pos = -1, storeData = TRUE, plot = TRUE, ...) # S3 method for sepan plot(x, pos = -1, storeData = TRUE, plot = TRUE, ...) # S3 method for statis plot(x, xax = 1, yax = 2, pos = -1, storeData = TRUE, plot = TRUE, ...) # S3 method for witcoi plot(x, xax = 1, yax = 2, pos = -1, storeData = TRUE, plot = TRUE, ...) # S3 method for witdpcoa plot(x, xax = 1, yax = 2, pos = -1, storeData = TRUE, plot = TRUE, ...) # S3 method for within plot(x, xax = 1, yax = 2, pos = -1, storeData = TRUE, plot = TRUE, ...) # S3 method for witrlq plot(x, xax = 1, yax = 2, pos = -1, storeData = TRUE, plot = TRUE, ...) # S3 method for bcaloocv plot(x, xax = 1, yax = 2, pos = -1, storeData = TRUE, plot = TRUE, ...) # S3 method for discloocv plot(x, xax = 1, yax = 2, pos = -1, storeData = TRUE, plot = TRUE, ...)  # S3 method for dudi scatter(x, xax = 1, yax = 2, permute = FALSE, posieig = \"topleft\", prop = FALSE,    density.plot = ifelse(permute, ncol(x$tab) > 1000, nrow(x$tab) > 1000), plot = TRUE,    storeData = TRUE, pos = -1, ...) # S3 method for coa scatter(x, xax = 1, yax = 2, method = 1:3, posieig = \"topleft\", pos = -1,    storeData = TRUE, plot = TRUE, ...) # S3 method for pco scatter(x, xax = 1, yax = 2, posieig = \"topleft\", pos = -1, storeData = TRUE,    plot = TRUE, ...) # S3 method for nipals scatter(x, xax = 1, yax = 2, posieig = \"topleft\", pos = -1, storeData = TRUE,    plot = TRUE, ...)  # S3 method for acm score(x, xax = 1, which.var = NULL, type = c(\"points\", \"boxplot\"), pos = -1,    storeData = TRUE, plot = TRUE, ...) # S3 method for mix score(x, xax = 1, which.var = NULL, type = c(\"points\", \"boxplot\"), pos = -1,    storeData = TRUE, plot = TRUE, ...)  # S3 method for pca score(x, xax = 1, which.var = NULL, pos = -1, storeData = TRUE, plot = TRUE, ...)  # S3 method for dudi screeplot(x, col.kept = \"grey\", col = \"white\", pos = -1, plot = TRUE, ...)  # S3 method for dudi biplot(x, pos = -1, plot = TRUE, ...)"},{"path":"/reference/plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods to display the outputs of an analysis performed with ade4 â€” plot","text":"object, x objects used select method xax integer (vector) indicating column(s) object x () plotted x-axis yax integer (vector) indicating column(s) object x () plotted y-axis .tab numeric vector (used kplot.*) containing numbers tables used analysis option string characters (used kplot.mfa) indicating drawing option:     points plot projected scattergram onto co-inertia axes,     axis projections inertia axes onto co-inertia axes,     columns projections variables onto synthetic variables planes. .graph integer 1 4 (used kplot.pta) indicating drawing option.     table .tab, drawn:     1 projections principal axes,     2 projections rows,     3 projections columns,     4 projections principal components onto planes compromise. permute logical value (used kplot.sepan, kplotsepan.coa scatter.dudi).     FALSE, rows plotted points density surface columns arrows. TRUE, opposite. traject logical value (used kplot.sepan kplot.statis)      indicating whether trajectories rows drawn natural order posieig character value two-length numeric vector (normalized parent coordinates npc 0 1)      none value indicating position eigenvalues bar plot (used kplot.sepan, kplotsepan.coa scatter.*). arrow logical value (used kplot.statis) indicating whether column factorial diagrams plotted class NULL, factor length equal number total columns K-tables (used kplot.statis) prop logical value (used scatter.dudi) indicating size arrows' labels proportional analysis score. density.plot logical value  (used scatter.dudi)indicating points displayed density surface (using s.density). method integer 1 3 (used scatter.coa) indicating drawing option. drawn:     1 rows columns coordinates lambda variance,     2 rows variance 1 columns averaging,     3 columns variance 1 rows averaging. .var numbers kept columns analysis, otherwise columns (used score.*) type string characters (used score.acm score.mix) indicating points (points) boxplot (boxplot) used represent levels factors col.kept one color value color kept axes barchart (used screeplot.dudi) col one color value color axes barchart (used screeplot.dudi) plot logical indicating graphics displayed storeData logical indicating data stored     returned object. FALSE, names data     arguments stored pos integer indicating position     environment data stored, relative environment     function called. Useful storeData     FALSE ... additional graphical parameters (see     adegpar trellis.par.get)","code":""},{"path":"/reference/plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Methods to display the outputs of an analysis performed with ade4 â€” plot","text":"Returns ADEg ADEgS object.   result displayed plot TRUE.","code":""},{"path":"/reference/plot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Methods to display the outputs of an analysis performed with ade4 â€” plot","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":"/reference/plot.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Methods to display the outputs of an analysis performed with ade4 â€” plot","text":"See ade4 website: <URL: http://pbil.univ-lyon1.fr/ADE-4/>","code":""},{"path":"/reference/plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Methods to display the outputs of an analysis performed with ade4 â€” plot","text":"","code":"cat(\"To run the example on 'topic'\\n\") #> To run the example on 'topic' cat(\"Type in your R console: example(topic, package = 'ade4') \\n\") #> Type in your R console: example(topic, package = 'ade4')"},{"path":"/reference/plot.inertia.html","id":null,"dir":"Reference","previous_headings":"","what":"Display the decomposition of inertia which measure the contributions of \n  rows/columns in mutivariate methods â€” plot.inertia","title":"Display the decomposition of inertia which measure the contributions of \n  rows/columns in mutivariate methods â€” plot.inertia","text":"S3 method display decomposition inertia (inertia object)    measure contributions rows/columns mutivariate methods    (dudi objects ade4)","code":""},{"path":"/reference/plot.inertia.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display the decomposition of inertia which measure the contributions of \n  rows/columns in mutivariate methods â€” plot.inertia","text":"","code":"# S3 method for inertia plot(x, xax = 1, yax = 2, threshold = 0.1,    contrib = c(\"abs\", \"rel\"), type = c(\"label\", \"cross\", \"ellipse\", \"both\"),    ellipseSize = 1.5, posieig = \"none\", plot = TRUE,    storeData = TRUE, pos = -1, ...) # S3 method for inertia score(x, xax = 1, threshold = 0.1, contrib = c(\"abs\", \"rel\"),    posieig = \"none\", pos = -1, storeData = TRUE, plot = TRUE, ...)"},{"path":"/reference/plot.inertia.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display the decomposition of inertia which measure the contributions of \n  rows/columns in mutivariate methods â€” plot.inertia","text":"x object dudi class; must output      correspondance analysis (coa object). xax integer indicating column x plotted x-axis yax integer indicating column x plotted y-axis.     yax equal xax, one-dimensional graph display. threshold numeric value containing contribution threshold      (0 1) points drawn graphic. Low      contribution points represented grey point without label.      contributions displayed single axis, dotted line      describes contribution threshold. contrib character value indicating contributions plotted:      abs absolute contributions (rows/columns involved factor     axis/map construction) rel relative contribution (quality     rows/columns representation factor axis/map). type character value indicating type represents contribution.    Labels size (label), crosses size(cross) ellipses size    (ellipse) can proportional contributions. type    , crosses ellipses sizes proportional    contributions. ellipseSize positive number ellipse size type      ellipse posieig character value two-length numeric vector (normalized      parent coordinates npc 0 1) none value indicating      position eigenvalues bar plot. plot logical indicating graphics displayed storeData logical indicating data stored     returned object. FALSE, names data     arguments stored pos integer indicating position     environment data stored, relative environment     function called. Useful storeData     FALSE ... additional graphical parameters (see     adegpar trellis.par.get)","code":""},{"path":"/reference/plot.inertia.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display the decomposition of inertia which measure the contributions of \n  rows/columns in mutivariate methods â€” plot.inertia","text":"Returns ADEgS object.   result displayed plot TRUE.","code":""},{"path":"/reference/plot.inertia.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Display the decomposition of inertia which measure the contributions of \n  rows/columns in mutivariate methods â€” plot.inertia","text":"ClÃ©ment Claustre, Anne-BÃ©atrice Dufour, AurÃ©lie Siberchicot    aurelie.siberchicot@univ-lyon1.fr StÃ©phane Dray","code":""},{"path":"/reference/plot.inertia.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display the decomposition of inertia which measure the contributions of \n  rows/columns in mutivariate methods â€” plot.inertia","text":"","code":"# First example data(bf88, package = \"ade4\") coa1 <- ade4::dudi.coa(bf88$S1, scannf = FALSE, nf = 3)  ###### row=T / col=F res11 <- ade4::inertia(coa1, row = TRUE, col = FALSE, nf = 3) g111 <- plot(res11, threshold = 0.06)  g112 <- plot(res11, threshold = 0.06, xax = 1, yax = 3)  g12 <- plot(res11, threshold = 0.06, plabels.boxes.draw = TRUE, plines.lwd = 0,   light_row.ppoints.cex = 0, posieig = \"bottomleft\") #> Error in plot.inertia(res11, threshold = 0.06, plabels.boxes.draw = TRUE,     plines.lwd = 0, light_row.ppoints.cex = 0, posieig = \"bottomleft\"): object 'coa1' not found g13 <- score(res11, threshold = 0.06)  names(g13) #> [1] \"light_row\"    \"heavy_row\"    \"contribution\" g14 <- score(res11, xax = 2, threshold = 0.06)   ###### row=F / col=T res12 <- ade4::inertia(coa1, row = FALSE, col = TRUE, nf = 2) res12$col.abs #>          Axis1      Axis2       Axis3 #> Pol  0.8743973  5.1626961 90.27575579 #> Bur  7.8110473 26.3922063  9.14870165 #> Pro 90.4867942  0.8961601  0.01369376 #> Cor  0.8277612 67.5489375  0.56184880 idx <- which(res12$col.abs[, 1]/100 >= 0.1 | res12$col.abs[, 2]/100 >= 0.1) rownames(res12$col.abs[idx, ]) #> [1] \"Bur\" \"Pro\" \"Cor\" coa1$co[idx, ] #>          Comp1      Comp2       Comp3 #> Bur  0.3532161  0.6219892 -0.30249951 #> Pro -3.0848713  0.2941009  0.03003066 #> Cor  0.1552816 -1.3438037  0.10123630 g15 <- plot(res12)  g16 <- score(res12, threshold = 0.08)  g17 <- score(res12, threshold = 0.07)    ######################################## ######################################## # Second example data(housetasks, package = \"ade4\") coa2 <- ade4::dudi.coa(housetasks, scann = FALSE)  ###### row=T / col=F res21 <- ade4::inertia(coa2, row = TRUE, col = FALSE) g21 <- plot(res21)  g22 <- score(res21)  g23 <- score(res21, xax = 2)   ###### row=F / col=T res22 <- ade4::inertia(coa2, row = FALSE, col = TRUE) g24 <- plot(res22, plabels.cex = 2)  names(g24) #> [1] \"light_col\" \"heavy_col\" g25 <- plot(res22, posieig = \"topleft\") #> Error in plot.inertia(res22, posieig = \"topleft\"): object 'coa2' not found names(g25) #> Error in eval(expr, envir, enclos): object 'g25' not found g26 <- plot(res22, heavy_col.plabels.box.draw = TRUE,    light_col.ppoints.col = \"purple\")  g27 <- plot(res22, type = \"both\")  g28 <- plot(res22, type = \"ellipse\", ellipseSize = 3, plabels.col = \"black\",    pellipse.col = \"purple\", pellipses.border = \"black\")"},{"path":"/reference/plotEig.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a barchart of eigen values â€” plotEig","title":"Plot a barchart of eigen values â€” plotEig","text":"function represents simplified barchart adapted display eigen values.    bar color depends whether axis displayed, kept .","code":""},{"path":"/reference/plotEig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a barchart of eigen values â€” plotEig","text":"","code":"plotEig(eigvalue, nf, xax = 1, yax = 2, col.plot = \"black\", col.kept = \"grey\",    col = \"white\", facets = NULL, plot = TRUE, storeData = FALSE, pos = -1, ...)"},{"path":"/reference/plotEig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a barchart of eigen values â€” plotEig","text":"eigvalue numeric vector eigenvalues nf number retained factors, NULL provided xax integer indicating factor plotted x-axis yax integer indicating factor plotted y-axis col.plot color value fill bar corresponding displayed factors col.kept color value fill bar corresponding kept displayed factors col color value fill bar corresponding factors facets factor splitting rows dfxy subsets     data represented different sub-graphics plot logical indicating graphics displayed storeData logical indicating data stored     returned object. FALSE, names data     arguments stored pos integer indicating position     environment data stored, relative environment     function called. Useful storeData     FALSE ... additional graphical parameters (see     adegpar trellis.par.get)","code":""},{"path":"/reference/plotEig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a barchart of eigen values â€” plotEig","text":"object class ADEg (subclass C1.barchart). result displayed plot TRUE.","code":""},{"path":"/reference/plotEig.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot a barchart of eigen values â€” plotEig","text":"Graphical parameters bars available ppolygons adegpar.   appropriated graphical parameters p1d also available.","code":""},{"path":"/reference/plotEig.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot a barchart of eigen values â€” plotEig","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/plotEig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a barchart of eigen values â€” plotEig","text":"","code":"data(microsatt, package = \"ade4\")   w <- ade4::dudi.coa(data.frame(t(microsatt$tab)), scann = FALSE, nf = 3)   g1 <- s.label(w$co, plot = FALSE)   g2 <- plotEig(w$eig, w$nf, psub = list(text = \"Eigenvalues\"), pbackground = list(box = TRUE),      plot = FALSE)   G <- insert(g2, g1, posi = \"bottomright\", ratio = 0.25)"},{"path":"/reference/prepare-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods prepare for ADEg objects â€” prepare-methods","title":"Methods prepare for ADEg objects â€” prepare-methods","text":"method prepare performs first calculus needed display.","code":""},{"path":"/reference/prepare-methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Methods prepare for ADEg objects â€” prepare-methods","text":"signature(object = \"ADEg.C1\") performs calculations display object (e.g. limits, grid axis calculations) signature(object = \"C1.barchart\") calls parent method (prepare ADEg.C1) modifies graphical parameters used default signature(object = \"C1.curve\") calls parent method (prepare ADEg.C1) modifies graphical parameters used default signature(object = \"C1.density\") calls parent method (prepare ADEg.C1), modifies graphical parameters used default        calculates density curves according numeric score values' categories signature(object = \"C1.dotplot\") calls parent method (prepare ADEg.C1) modifies graphical parameters used default signature(object = \"C1.gauss\") calls parent method (prepare ADEg.C1), modifies graphical parameters used default        calculates Gauss curves according numeric score values' categories (using weighted mean standard deviation) signature(object = \"C1.hist\") calls parent method (prepare ADEg.C1), modifies graphical parameters used default        calculates boundaries height cells signature(object = \"C1.interval\") calls parent method (prepare ADEg.C1) modifies graphical parameters used default signature(object = \"ADEg.S1\") performs calculations display object (e.g. limits, grid axis calculations) signature(object = \"S1.boxplot\") calls parent method (prepare ADEg.S1) modifies graphical parameters used default signature(object = \"S1.class\") calls parent method (prepare ADEg.S1) modifies graphical parameters used default signature(object = \"S1.distri\") calls parent method (prepare ADEg.S1), modifies graphical parameters used default calculates weighted mean standard deviation signature(object = \"S1.label\") calls parent method (prepare ADEg.S1) modifies graphical parameters used default signature(object = \"S1.match\") calls parent method (prepare ADEg.S1) modifies graphical parameters used default signature(object = \"ADEg.S2\") performs calculations display object (e.g. limits, grid axis calculations) signature(object = \"S2.arrow\") calls parent method (prepare ADEg.S2), modifies graphical parameters used default calculates limits signature(object = \"S2.class\") calls parent method (prepare ADEg.S2), modifies graphical parameters used default calculates ellipses, convex hulls centroids signature(object = \"S2.corcircle\") calls parent method (prepare ADEg.S2), modifies graphical parameters used default prepares drawn grid signature(object = \"S2.density\") calls parent method (prepare ADEg.S2), modifies graphical parameters used default calculates densities signature(object = \"S2.distri\") calls parent method (prepare ADEg.S2), modifies graphical parameters used default calculates ellipses centroids signature(object = \"S2.image\") calls parent method (prepare ADEg.S2), modifies graphical parameters used default calculates grid expansion limits signature(object = \"S2.label\") calls parent method (prepare ADEg.S2) modifies graphical parameters used default signature(object = \"S2.logo\") calls parent method (prepare ADEg.S2) modifies graphical parameters used default signature(object = \"S2.match\") calls parent method (prepare ADEg.S2) modifies graphical parameters used default signature(object = \"S2.traject\") calls parent method (prepare ADEg.S2) modifies graphical parameters used default signature(object = \"S2.value\") calls parent method (prepare ADEg.S2), modifies graphical parameters used default calculates limits signature(object = \"ADEg.T\") performs calculations display object (e.g. limits, grid axis calculations) signature(object = \"T.image\") calls parent method (prepare ADEg.T) modifies graphical parameters used default calculates limits grid signature(object = \"T.value\") calls parent method (prepare ADEg.T) modifies graphical parameters used default calculates limits grid signature(object = \"ADEg.Tr\") performs calculations display object (e.g. limits, grid axis calculations) signature(object = \"Tr.class\") calls parent method (prepare ADEg.Tr), modifies graphical parameters used default calculated ellipses, convex hulls centroids signature(object = \"Tr.label\") calls parent method (prepare ADEg.Tr) modifies graphical parameters used default signature(object = \"Tr.match\") calls parent method (prepare ADEg.Tr), modifies graphical parameters used default defines mean point axis signature(object = \"Tr.traject\") calls parent method (prepare ADEg.Tr) modifies graphical parameters used default","code":""},{"path":"/reference/prepare-methods.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Methods prepare for ADEg objects â€” prepare-methods","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":"/reference/s.Spatial.html","id":null,"dir":"Reference","previous_headings":"","what":"Mapping of a Spatial* object â€” s.Spatial","title":"Mapping of a Spatial* object â€” s.Spatial","text":"function represents background map linked data .","code":""},{"path":"/reference/s.Spatial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mapping of a Spatial* object â€” s.Spatial","text":"","code":"s.Spatial(spObj, col = TRUE, nclass = 5, scale = TRUE, plot = TRUE,    storeData = TRUE, pos = -1, ...)"},{"path":"/reference/s.Spatial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mapping of a Spatial* object â€” s.Spatial","text":"spObj object deriving class Spatial (package sp) col logical color fill background color spObj nclass spObj contains data, desired number     intervals splitting data (using pretty) scale logical indicating numeric variables     scaled plot logical indicating graphics displayed storeData logical indicating data stored     returned object. FALSE, names data     arguments stored pos integer indicating position     environment data stored, relative environment     function called. Useful storeData     FALSE ... additional graphical parameters (see     adegpar trellis.par.get)","code":""},{"path":"/reference/s.Spatial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mapping of a Spatial* object â€” s.Spatial","text":"object class ADEg (subclass S2.label) ADEgS (spObj contains one column ). result displayed plot TRUE.","code":""},{"path":"/reference/s.Spatial.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Mapping of a Spatial* object â€” s.Spatial","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/s.Spatial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mapping of a Spatial* object â€” s.Spatial","text":"","code":"data(elec88, package = \"ade4\") ## mapping without data g1 <- s.Spatial(elec88$Spatial)   if (FALSE) {   if(require(sp, quietly = TRUE)) {     ## mapping with data     obj <- SpatialPolygonsDataFrame(Sr = elec88$Spatial, data = elec88$tab)     g2 <- s.Spatial(obj)     g3 <- s.Spatial(obj, nclass = 2, col = c(\"red\", \"blue\"))   } }"},{"path":"/reference/s.arrow.html","id":null,"dir":"Reference","previous_headings":"","what":"2-D scatter plot with arrows â€” s.arrow","title":"2-D scatter plot with arrows â€” s.arrow","text":"function represents two dimensional scatter plot arrows linking points origin.","code":""},{"path":"/reference/s.arrow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"2-D scatter plot with arrows â€” s.arrow","text":"","code":"s.arrow(dfxy, xax = 1, yax = 2, labels = row.names(as.data.frame(dfxy)),    facets = NULL, plot = TRUE, storeData = TRUE, add = FALSE, pos = -1, ...)"},{"path":"/reference/s.arrow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"2-D scatter plot with arrows â€” s.arrow","text":"dfxy data frame used produce plot xax integer (vector) indicating column(s) dfxy () plotted x-axis yax integer (vector) indicating column(s) dfxy () plotted y-axis labels character vector containing labels arrows facets factor splitting rows dfxy subsets     data represented different sub-graphics plot logical indicating graphics displayed storeData logical indicating data stored     returned object. FALSE, names data     arguments stored add logical. TRUE, graphic superposed graphics     already plotted current device pos integer indicating position     environment data stored, relative environment     function called. Useful storeData     FALSE ... additional graphical parameters (see     adegpar trellis.par.get)","code":""},{"path":"/reference/s.arrow.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"2-D scatter plot with arrows â€” s.arrow","text":"origin arrows can specified using adegpar parameters: porigin.   Graphical parameters points arrows available parrows ppoints adegpar.","code":""},{"path":"/reference/s.arrow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"2-D scatter plot with arrows â€” s.arrow","text":"object class ADEg (subclass S2.arrow) ADEgS (add TRUE /   facets vectors xax/yax used). result displayed plot TRUE.","code":""},{"path":"/reference/s.arrow.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"2-D scatter plot with arrows â€” s.arrow","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/s.arrow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"2-D scatter plot with arrows â€” s.arrow","text":"","code":"data(doubs, package = \"ade4\")  dudi1 <- ade4::dudi.pca(doubs$env, scale = TRUE, scannf = FALSE, nf = 3) dudi2 <- ade4::dudi.pca(doubs$fish, scale = TRUE, scannf = FALSE, nf = 2) coin1 <- ade4::coinertia(dudi1, dudi2, scannf = FALSE, nf = 2) g11 <- s.arrow(coin1$l1, plabels.cex = 0.87, plot = FALSE) g12 <- s.arrow(coin1$c1, plabels.cex = 1, plabels.col = \"red\", plot = FALSE) g1 <- superpose(g12, g11, plot = TRUE)   xy <- cbind(rnorm(50), rnorm(50)) g2 <- s.arrow(xy, plabels.cex = 0.9, plines = list(lwd = 1.5), parrows.angle = 20)  update(g2, plines = list(col = rainbow(5)))"},{"path":"/reference/s.class.html","id":null,"dir":"Reference","previous_headings":"","what":"2-D scatter plot with a partition in classes (levels of a factor) â€” s.class","title":"2-D scatter plot with a partition in classes (levels of a factor) â€” s.class","text":"function represents two dimensional scatter plot grouping points class.   Classes represented ellipses, stars /convex hulls.","code":""},{"path":"/reference/s.class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"2-D scatter plot with a partition in classes (levels of a factor) â€” s.class","text":"","code":"s.class(dfxy, fac, xax = 1, yax = 2, wt = rep(1, NROW(fac)), labels = levels(fac),   ellipseSize = 1.5, starSize = 1, chullSize = NULL, col = NULL, facets = NULL,   plot = TRUE, storeData = TRUE, add = FALSE, pos = -1, ...)"},{"path":"/reference/s.class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"2-D scatter plot with a partition in classes (levels of a factor) â€” s.class","text":"dfxy data frame used produce plot fac factor (matrix factors) splitting rows dfxy xax integer (vector) indicating column(s) dfxy () plotted x-axis yax integer (vector) indicating column(s) dfxy () plotted y-axis wt vector weights fac labels character vector containing class' labels ellipseSize positive number ellipse size starSize number 0 1 size stars segments joining stars' center      (centroids) matching points chullSize NULL vector numbers 0 1 fraction points included convex hull col color colors vector color points, ellipses, labels, lines polygons facets factor splitting rows dfxy subsets     data represented different sub-graphics plot logical indicating graphics displayed storeData logical indicating data stored     returned object. FALSE, names data     arguments stored add logical. TRUE, graphic superposed graphics     already plotted current device pos integer indicating position     environment data stored, relative environment     function called. Useful storeData     FALSE ... additional graphical parameters (see     adegpar trellis.par.get)","code":""},{"path":"/reference/s.class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"2-D scatter plot with a partition in classes (levels of a factor) â€” s.class","text":"Graphical parameters ellipses, stars convex hulls available pellipses, plines ppolygons adegpar.","code":""},{"path":"/reference/s.class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"2-D scatter plot with a partition in classes (levels of a factor) â€” s.class","text":"object class ADEg (subclass S2.class) ADEgS (add TRUE /   facets multidimensional fac vectors xax/yax used). result displayed plot TRUE.","code":""},{"path":"/reference/s.class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"2-D scatter plot with a partition in classes (levels of a factor) â€” s.class","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/s.class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"2-D scatter plot with a partition in classes (levels of a factor) â€” s.class","text":"","code":"xy <- cbind.data.frame(x = runif(200, -1, 1), y = runif(200, -1, 1)) posi <- factor(xy$x > 0) : factor(xy$y > 0) coul <- c(\"black\", \"red\", \"green\", \"blue\") s.class(xy, fac = posi, col = coul, psub.text = \"example s.class\", pellipses.col = coul)   s.class(xy, fac = posi, ppoints.cex = 1.5, ellipseSize = 0, starSize = 0,   ppolygons = list(border = 4:1, col = 1:4, lty = 1:4, lwd = 2, alpha = 0.4),   chullSize = c(1, 0.5))   s.class(xy, fac = posi, facets = posi, ppoints.cex = 1.5, ellipseSize = 0, starSize = 0,   ppolygons = list(border = 4:1, col = 1:4, lty = 1:4, lwd = 2, alpha = 0.4),   chullSize = c(1, 0.5)) #> Error in multi.facets.S2(thecall, sortparameters$adepar, samelimits = sortparameters$g.args$samelimits): object 'xy' not found    if (FALSE) {  s.class(xy, fac = posi, col = coul, psub.text = \"example s.class\", pellipses.col = coul,    plabels.cex = 0, key = list(space = \"left\"))     data(banque, package = \"ade4\") dudi1 <- ade4::dudi.acm(banque, scannf = FALSE) col <- rainbow(length(levels(banque[, 20]))) g1 <- s.label(dudi1$li, psub = list(text = \"Factorial map from ACM\", cex = 1.5,    position = \"topleft\"), plot = FALSE) g2 <- s.class(dudi1$li, banque[, 20], psub = list(text = names(banque)[20], cex = 1.5,    position = \"bottomright\"), ellipseSize = 0, starSize = 0.5, pgrid.text.cex = 0, plot = FALSE) g3 <- s.class(dudi1$li, banque[, 20], starSize = 0, ellipseSize = 2, pgrid.text.cex = 0,    plabels.cex = 1.5, plot = FALSE) g4 <- s.class(dudi1$li, banque[, 20], psub = list(text = names(banque)[20],    position = \"topright\"), pgrid.text.cex = 0, col = col, pellipses.lwd = 1.5, plot = FALSE) G1 <- ADEgS(c(g1, g2, g3, g4), layout = c(2, 2)) G2 <- s.class(dudi1$li, banque, psub = list(position = \"topleft\"), pgrid.text.cex = 0,    starSize = 0, ppoints.cex = 0) }"},{"path":"/reference/s.corcircle.html","id":null,"dir":"Reference","previous_headings":"","what":"Correlation circle â€” s.corcircle","title":"Correlation circle â€” s.corcircle","text":"function produces correlation circle.","code":""},{"path":"/reference/s.corcircle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Correlation circle â€” s.corcircle","text":"","code":"s.corcircle(dfxy, xax = 1, yax = 2, labels = row.names(as.data.frame(dfxy)),    fullcircle = TRUE, facets = NULL, plot = TRUE, storeData = TRUE,    add = FALSE, pos = -1, ...)"},{"path":"/reference/s.corcircle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Correlation circle â€” s.corcircle","text":"dfxy data frame used produce plot labels vector containing points' labels xax integer (vector) indicating column(s) dfxy () plotted x-axis yax integer (vector) indicating column(s) dfxy () plotted y-axis fullcircle logical include complete circle (limits c(-1, 1)) facets factor splitting rows dfxy subsets     data represented different sub-graphics plot logical indicating graphics displayed storeData logical indicating data stored     returned object. FALSE, names data     arguments stored add logical. TRUE, graphic superposed graphics     already plotted current device pos integer indicating position     environment data stored, relative environment     function called. Useful storeData     FALSE ... additional graphical parameters (see     adegpar trellis.par.get)","code":""},{"path":"/reference/s.corcircle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Correlation circle â€” s.corcircle","text":"object class ADEg (subclass S2.corcircle) ADEgS (add TRUE /   facets vectors xax/yax used). result displayed plot TRUE.","code":""},{"path":"/reference/s.corcircle.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Correlation circle â€” s.corcircle","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/s.corcircle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Correlation circle â€” s.corcircle","text":"","code":"data (olympic, package = \"ade4\") dudi1 <- ade4::dudi.pca(olympic$tab, scannf = FALSE) g1 <- s.corcircle(dudi1$co)  g2 <- s.corcircle(dudi1$co, fullcircle = FALSE, pback.col = \"grey\")"},{"path":"/reference/s.density.html","id":null,"dir":"Reference","previous_headings":"","what":"2-D scatter plot with kernel density estimation â€” s.density","title":"2-D scatter plot with kernel density estimation â€” s.density","text":"function represents two dimensional scatter plot points distribution.   Densities' representation based levelplot graphic lattice   (density's surface, filled colors /contour lines).","code":""},{"path":"/reference/s.density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"2-D scatter plot with kernel density estimation â€” s.density","text":"","code":"s.density(dfxy, xax = 1, yax = 2, bandwidth = NULL, gridsize = c(450L, 450L),    nrpoints = 300, threshold = 0.1, col = NULL, contour = FALSE, region = !contour,    nclass = 8, facets = NULL, plot = TRUE, storeData = TRUE, add = FALSE, pos = -1, ...)"},{"path":"/reference/s.density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"2-D scatter plot with kernel density estimation â€” s.density","text":"dfxy data frame used produce plot xax integer (vector) indicating column(s) dfxy () plotted x-axis yax integer (vector) indicating column(s) dfxy () plotted y-axis bandwidth bandwidth density calculations passed parameters bkde2D function KernSmooth package gridsize grid dimension nrpoints number points density image threshold value 0 1 draw densities greater threshold. density visible whether equal 1 col color colors vector color densities contour logical draw contour lines region logical fill grid regions col nclass number class density facets factor splitting rows dfxy subsets     data represented different sub-graphics plot logical indicating graphics displayed storeData logical indicating data stored     returned object. FALSE, names data     arguments stored add logical. TRUE, graphic superposed graphics     already plotted current device pos integer indicating position     environment data stored, relative environment     function called. Useful storeData     FALSE ... additional graphical parameters (see     adegpar trellis.par.get)","code":""},{"path":"/reference/s.density.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"2-D scatter plot with kernel density estimation â€” s.density","text":"Density calculation made using kde2d function KernSmooth package.","code":""},{"path":"/reference/s.density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"2-D scatter plot with kernel density estimation â€” s.density","text":"object class ADEg (subclass S2.density) ADEgS (add TRUE /   facets vectors xax/yax used). result displayed plot TRUE.","code":""},{"path":"/reference/s.density.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"2-D scatter plot with kernel density estimation â€” s.density","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/s.density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"2-D scatter plot with kernel density estimation â€” s.density","text":"","code":"xx2 <- c(rnorm(50000, 1, 1), rnorm(50000, -1, 1)) yy2 <- c(rnorm(50000, -1, 0.5), rnorm(50000, 1, 0.5)) s.density(cbind(xx2, yy2), paxes.draw = TRUE, gridsize = c(200, 200), region = TRUE,    contour = TRUE, plabels.cex = 0, threshold = 0.05, nclass = 3,    col = colorRampPalette(c(\"lightgrey\", \"black\"))(100))"},{"path":"/reference/s.distri.html","id":null,"dir":"Reference","previous_headings":"","what":"2-D scatter plot with means/standard deviations computed using an external table of weights â€” s.distri","title":"2-D scatter plot with means/standard deviations computed using an external table of weights â€” s.distri","text":"function represents two dimensional scatter plot frequency distribution.   Class defined ellipses /stars.","code":""},{"path":"/reference/s.distri.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"2-D scatter plot with means/standard deviations computed using an external table of weights â€” s.distri","text":"","code":"s.distri(dfxy, dfdistri, xax = 1, yax = 2, starSize = 1,    ellipseSize = 1.5, col = NULL, facets = NULL, plot = TRUE,    storeData = TRUE, add = FALSE, pos = -1, ...)"},{"path":"/reference/s.distri.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"2-D scatter plot with means/standard deviations computed using an external table of weights â€” s.distri","text":"dfxy data frame used produce plot dfdistri data frame containing mass distribution columns xax integer (vector) indicating column(s) dfxy () plotted x-axis yax integer (vector) indicating column(s) dfxy () plotted y-axis starSize NULL number 0 1 size stars segments joining stars' center      (centroids) matching points ellipseSize NULL number 0 1 ellipse size col color colors vector color points, ellipses, labels, lines polygons facets factor splitting rows dfxy subsets     data represented different sub-graphics plot logical indicating graphics displayed storeData logical indicating data stored     returned object. FALSE, names data     arguments stored add logical. TRUE, graphic superposed graphics     already plotted current device pos integer indicating position     environment data stored, relative environment     function called. Useful storeData     FALSE ... additional graphical parameters (see     adegpar trellis.par.get)","code":""},{"path":"/reference/s.distri.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"2-D scatter plot with means/standard deviations computed using an external table of weights â€” s.distri","text":"object class ADEg (subclass S2.distri) ADEgS (add TRUE /   facets vectors xax/yax used). result displayed plot TRUE.","code":""},{"path":"/reference/s.distri.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"2-D scatter plot with means/standard deviations computed using an external table of weights â€” s.distri","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/s.distri.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"2-D scatter plot with means/standard deviations computed using an external table of weights â€” s.distri","text":"","code":"data(rpjdl, package = \"ade4\") xy <- ade4::dudi.coa(rpjdl$fau, scan = FALSE)$li j <- c(1, 5, 8, 20, 21, 23, 26, 33, 36, 44, 47, 49) dfdistri <- rpjdl$fau[, j] coli <- colorRampPalette(c(\"blue\", \"red\", \"orange\"))(49)[j]  s.distri(xy, dfdistri, ellipseSize = 1, starSize = 0, porigin.include = FALSE,    pellipses = list(col = coli, alpha = 0.3), plabels.cex = 0)"},{"path":"/reference/s.image.html","id":null,"dir":"Reference","previous_headings":"","what":"2-D scatter plot with loess estimation of an additional numeric score (levelplot) â€” s.image","title":"2-D scatter plot with loess estimation of an additional numeric score (levelplot) â€” s.image","text":"function represents two dimensional scatter plot continuous convex colored surface   /contour lines representing third variable.","code":""},{"path":"/reference/s.image.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"2-D scatter plot with loess estimation of an additional numeric score (levelplot) â€” s.image","text":"","code":"s.image(dfxy, z, xax = 1, yax = 2, span = 0.5, gridsize = c(80L, 80L),    contour = TRUE, region = TRUE, outsideLimits = NULL, breaks = NULL,   nclass = 8, col = NULL, facets = NULL,    plot = TRUE, storeData = TRUE, add = FALSE, pos = -1, ...)"},{"path":"/reference/s.image.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"2-D scatter plot with loess estimation of an additional numeric score (levelplot) â€” s.image","text":"dfxy data frame used produce plot z vector (matrix) values dfxy rows xax integer (vector) indicating column(s) dfxy () plotted x-axis yax integer (vector) indicating column(s) dfxy () plotted y-axis span value control degree smoothing gridsize 1 2-length vector indicating cell numbers (horizontally vertically) grid colored surface contour logical draw contour lines region logical fill inter-contour regions breaks vector values split z. NULL, pretty(z, nclass) used. nclass integer number desired intervals, ignored     breaks missing. outsideLimits specific limits surface set polygons. must SpatialPolygons object. Hole authorized. col color colors vector used colored cells facets factor splitting rows dfxy subsets     data represented different sub-graphics plot logical indicating graphics displayed storeData logical indicating data stored     returned object. FALSE, names data     arguments stored add logical. TRUE, graphic superposed graphics     already plotted current device pos integer indicating position     environment data stored, relative environment     function called. Useful storeData     FALSE ... additional graphical parameters (see     adegpar trellis.par.get)","code":""},{"path":"/reference/s.image.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"2-D scatter plot with loess estimation of an additional numeric score (levelplot) â€” s.image","text":"object class ADEg (subclass S2.image) ADEgS (add TRUE /   facets multidimensional z vectors xax/yax used). result displayed plot TRUE.","code":""},{"path":"/reference/s.image.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"2-D scatter plot with loess estimation of an additional numeric score (levelplot) â€” s.image","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/s.image.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"2-D scatter plot with loess estimation of an additional numeric score (levelplot) â€” s.image","text":"","code":"df1 <- data.frame(expand.grid(-3:3, -3:3)) names(df1) <- c(\"x\", \"y\") z1 <- (1 / sqrt(2)) * exp(-(df1$x ^ 2 + df1$y ^ 2) / 2) g1 <- s.image(df1, z1)   # add a continuous color bar as legend # update(g1, plegend.drawColorKey = TRUE)  g2 <- s.image(df1, z1, gridsize = 50)   g3 <- s.image(df1, z1, gridsize = 100)  ## g4 <- s.image(df1, z1, gridsize = 1000, plot = FALSE)  if (FALSE) {   if(require(splancs, quietly = TRUE) & require(sp, quietly = TRUE)) {     Sr1 <- Polygon(cbind(c(0, 1, 2, 1, 2, 0, -2, -1, -2, -1, 0),        c(2.5, 1.5, 2, 0, -2, -1, -2, 0, 2, 1.5, 2.5)))     Sr2 <- Polygon(cbind(c(-0.5, 0.5, 0.5, -0.5, -0.5), c(0, 0, 1 ,1, 0)), hole = TRUE)     Srs2 <- Polygons(list(Sr1, Sr2), ID = \"star and hole\")     SPp <- SpatialPolygons(list(Srs2))     df2 <- cbind(c(rnorm(2000, 1, 0.25), rnorm(3000, -1, 1.5)), c(rnorm(2000, 1, 0.5),        rnorm(3000, -1, 3)))     z2 <- c(rnorm(2000, 12, 1), rnorm(3000, 1, 2))     g5 <- s.image(df2, z2, outsideLimits = SPp, grid = 200, xlim = c(-2.5, 2.5),        ylim = c(-2, 3), ppalette.quanti = colorRampPalette(c(grey(0.1), grey(0.9))))        data(t3012, package = \"ade4\")       g6 <- s.image(t3012$xy, ade4::scalewt(t3012$temp), porigin.include = FALSE)     g7 <- s.image(t3012$xy, ade4::scalewt(t3012$temp), outsideLimits = t3012$Spatial,        Sp = t3012$Spatial)   } }"},{"path":"/reference/s.label.html","id":null,"dir":"Reference","previous_headings":"","what":"2-D scatter plot with labels â€” s.label","title":"2-D scatter plot with labels â€” s.label","text":"function represents two dimensional scatter plot associating labels points.","code":""},{"path":"/reference/s.label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"2-D scatter plot with labels â€” s.label","text":"","code":"s.label(dfxy, labels = rownames(dfxy), xax = 1, yax = 2,   facets = NULL, plot = TRUE, storeData = TRUE, add = FALSE,    pos = -1, ...)"},{"path":"/reference/s.label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"2-D scatter plot with labels â€” s.label","text":"dfxy data frame used produce plot labels vector character strings points' labels xax integer (vector) indicating column(s) dfxy () plotted x-axis yax integer (vector) indicating column(s) dfxy () plotted y-axis facets factor splitting rows dfxy subsets     data represented different sub-graphics plot logical indicating graphics displayed storeData logical indicating data stored     returned object. FALSE, names data     arguments stored add logical. TRUE, graphic superposed graphics     already plotted current device pos integer indicating position     environment data stored, relative environment     function called. Useful storeData     FALSE ... additional graphical parameters (see     adegpar trellis.par.get)","code":""},{"path":"/reference/s.label.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"2-D scatter plot with labels â€” s.label","text":"object class ADEg (subclass S2.label) ADEgS (add TRUE /   facets vectors xax/yax used). result displayed plot TRUE.","code":""},{"path":"/reference/s.label.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"2-D scatter plot with labels â€” s.label","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/s.label.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"2-D scatter plot with labels â€” s.label","text":"","code":"x0 <- runif(50, -2, 2) y0 <- runif(50, -2, 2) z <- x0 ^ 2 + y0 ^ 2 g1 <- s.label(data.frame(x0, y0), label = as.character(z < 1), paxes.draw = TRUE,    axis.text = list(col = \"grey\"))     data(mafragh, package = \"ade4\") g2 <- s.label(mafragh$xy, nb = mafragh$nb, paxes.draw = FALSE)   data(irishdata, package = \"ade4\") g3 <- s.label(irishdata$xy.utm, Sp = irishdata$Spatial.contour)     ## update irishdata$xy.utm call to irishdata$xy  if (FALSE) data(atlas, package = \"ade4\")   g4 <- s.label(atlas$xy, lab = atlas$names.district, Sp = atlas$Spatial.contour) #> Error in s.label(atlas$xy, lab = atlas$names.district, Sp = atlas$Spatial.contour): non convenient selection for dfxy (can not be converted to dataframe)   g5 <- s.label(atlas$xy, lab = atlas$names.district, Sp = atlas$Spatial) #> Error in s.label(atlas$xy, lab = atlas$names.district, Sp = atlas$Spatial): non convenient selection for dfxy (can not be converted to dataframe)"},{"path":"/reference/s.logo.html","id":null,"dir":"Reference","previous_headings":"","what":"2-D scatter plot with logos (bitmap objects) â€” s.logo","title":"2-D scatter plot with logos (bitmap objects) â€” s.logo","text":"function represents two dimensional scatter plot associating logos points.","code":""},{"path":"/reference/s.logo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"2-D scatter plot with logos (bitmap objects) â€” s.logo","text":"","code":"s.logo(dfxy, logos, xax = 1, yax = 2, facets = NULL,    plot = TRUE, storeData = TRUE, add = FALSE, pos = -1, ...)"},{"path":"/reference/s.logo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"2-D scatter plot with logos (bitmap objects) â€” s.logo","text":"dfxy data frame used produce plot logos list containing picture use point xax integer (vector) indicating column(s) dfxy () plotted x-axis yax integer (vector) indicating column(s) dfxy () plotted y-axis facets factor splitting rows dfxy subsets     data represented different sub-graphics plot logical indicating graphics displayed storeData logical indicating data stored     returned object. FALSE, names data     arguments stored add logical. TRUE, graphic superposed graphics     already plotted current device pos integer indicating position     environment data stored, relative environment     function called. Useful storeData     FALSE ... additional graphical parameters (see     adegpar trellis.par.get)","code":""},{"path":"/reference/s.logo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"2-D scatter plot with logos (bitmap objects) â€” s.logo","text":"object class ADEg (subclass S2.logo) ADEgS (add TRUE /   facets vectors xax/yax used). result displayed plot TRUE.","code":""},{"path":"/reference/s.logo.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"2-D scatter plot with logos (bitmap objects) â€” s.logo","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/s.logo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"2-D scatter plot with logos (bitmap objects) â€” s.logo","text":"","code":"data(ggtortoises, package = \"ade4\") g1 <- s.logo(ggtortoises$pop,    ggtortoises$ico[as.character(ggtortoises$pop$carap)],    pori.incl = FALSE, ppoints.cex = 0.5) #> Loading required package: pixmap g1 <- s.label(ggtortoises$pop, add = TRUE, plabels.boxes.alpha = 0)   g2 <- s.label(ggtortoises$misc, pgrid.draw = FALSE,    porigin.include = FALSE, paxes.draw = FALSE,    Sp = ggtortoises$Spatial, pback.col = \"lightblue\", pSp.col = \"white\") g2 <- s.logo(ggtortoises$pop, ggtortoises$ico[as.character(ggtortoises$pop$carap)],    ppoints.cex = 0.5, add = TRUE)   data(capitales, package = \"ade4\") g3 <- s.logo(capitales$xy[sort(rownames(capitales$xy)), ], capitales$logo,    Sp = capitales$Spatial, pback.col = \"lightblue\", pSp.col = \"white\",    pgrid.draw = FALSE)"},{"path":"/reference/s.match.html","id":null,"dir":"Reference","previous_headings":"","what":"2-D scatter plot of the matching between two sets of coordinates â€” s.match","title":"2-D scatter plot of the matching between two sets of coordinates â€” s.match","text":"function represents two dimensional scatter plot linking paired coordinates.","code":""},{"path":"/reference/s.match.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"2-D scatter plot of the matching between two sets of coordinates â€” s.match","text":"","code":"s.match(dfxy1, dfxy2, xax = 1, yax = 2, labels =   row.names(as.data.frame(dfxy1)), arrows = TRUE,    facets = NULL, plot = TRUE, storeData = TRUE,    add = FALSE, pos = -1, ...)"},{"path":"/reference/s.match.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"2-D scatter plot of the matching between two sets of coordinates â€” s.match","text":"dfxy1 data frame, first system coordinates, used produce plot dfxy2 data frame, second system coordinates, many rows dfxy1, used produce plot. labels vector character strings containing matches' labels xax integer (vector) indicating column(s) dfxy () plotted x-axis yax integer (vector) indicating column(s) dfxy () plotted y-axis arrows logical draw arrows facets factor splitting rows dfxy subsets     data represented different sub-graphics plot logical indicating graphics displayed storeData logical indicating data stored     returned object. FALSE, names data     arguments stored add logical. TRUE, graphic superposed graphics     already plotted current device pos integer indicating position     environment data stored, relative environment     function called. Useful storeData     FALSE ... additional graphical parameters (see     adegpar trellis.par.get)","code":""},{"path":"/reference/s.match.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"2-D scatter plot of the matching between two sets of coordinates â€” s.match","text":"object class ADEg (subclass S2.match) ADEgS (add TRUE /   facets vectors xax/yax used). result displayed plot TRUE.","code":""},{"path":"/reference/s.match.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"2-D scatter plot of the matching between two sets of coordinates â€” s.match","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/s.match.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"2-D scatter plot of the matching between two sets of coordinates â€” s.match","text":"","code":"X <- data.frame(x = runif(50, -1, 2), y = runif(50, -1, 2)) Y <- X + rnorm(100, sd = 0.3) g1 <- s.match(X, Y, arr = TRUE, ppoints.cex = 2, ppoints.col = c(\"blue\", \"green\"))   data(doubs, package = \"ade4\") dudi1 <- ade4::dudi.pca(doubs$env, scale = TRUE, scannf = FALSE, nf = 3) dudi2 <- ade4::dudi.pca(doubs$fish, scale = FALSE, scannf = FALSE, nf = 2) coin1 <- ade4::coinertia(dudi1, dudi2, scannf = FALSE, nf = 2) g2 <- s.match(dfxy1 = coin1$mX, dfxy2 = coin1$mY)"},{"path":"/reference/s.traject.html","id":null,"dir":"Reference","previous_headings":"","what":"2-D scatter plot with trajectories â€” s.traject","title":"2-D scatter plot with trajectories â€” s.traject","text":"function represents two dimensional scatter plot trajectories.","code":""},{"path":"/reference/s.traject.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"2-D scatter plot with trajectories â€” s.traject","text":"","code":"s.traject(dfxy, fac = gl(1, nrow(dfxy)), order, labels = levels(fac),    xax = 1, yax = 2, col = NULL, facets = NULL, plot = TRUE,    storeData = TRUE, add = FALSE, pos = -1, ...)"},{"path":"/reference/s.traject.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"2-D scatter plot with trajectories â€” s.traject","text":"dfxy data frame used produce plot fac factor (matrix factors) splitting rows dfxy order vector containing drawing order trajectories. vector length equal factor. labels vector character strings containing trajectories' labels xax integer (vector) indicating column(s) dfxy () plotted x-axis yax integer (vector) indicating column(s) dfxy () plotted y-axis col color colors vector color points, labels lines facets factor splitting rows dfxy subsets     data represented different sub-graphics plot logical indicating graphics displayed storeData logical indicating data stored     returned object. FALSE, names data     arguments stored add logical. TRUE, graphic superposed graphics     already plotted current device pos integer indicating position     environment data stored, relative environment     function called. Useful storeData     FALSE ... additional graphical parameters (see     adegpar trellis.par.get)","code":""},{"path":"/reference/s.traject.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"2-D scatter plot with trajectories â€” s.traject","text":"fac factor used display several trajectories: level fac specific trajectory.","code":""},{"path":"/reference/s.traject.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"2-D scatter plot with trajectories â€” s.traject","text":"object class ADEg (subclass S2.traject) ADEgS (add TRUE /   facets multidimensional fac vectors xax/yax used). result displayed plot TRUE.","code":""},{"path":"/reference/s.traject.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"2-D scatter plot with trajectories â€” s.traject","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/s.traject.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"2-D scatter plot with trajectories â€” s.traject","text":"","code":"rw <- function(a) {   x <- 0   for(i in 1:49) x <- c(x, x[length(x)] + runif(1, -1, 1))   x } x1 <- unlist(lapply(1:5, rw), use.names = FALSE) y1 <- unlist(lapply(1:5, rw), use.names = FALSE) z1 <- gl(5, 50) g1 <- s.traject(data.frame(x1, y1), z1, ppoints.pch = 19:23, plines.col = rainbow(5))   x2 <- unlist(lapply(1:2, rw), use.names = FALSE) y2 <- unlist(lapply(1:2, rw), use.names = FALSE) z2 <- gl(2, 50) g2 <- s.traject(data.frame(x2, y2), z2, ppoints.pch = 21:20, plines.col = 1:2)"},{"path":"/reference/s.value.html","id":null,"dir":"Reference","previous_headings":"","what":"2-D scatter plot with proportional symbols (bubble plot) â€” s.value","title":"2-D scatter plot with proportional symbols (bubble plot) â€” s.value","text":"function represents two dimensional scatter plot third value represented symbols.","code":""},{"path":"/reference/s.value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"2-D scatter plot with proportional symbols (bubble plot) â€” s.value","text":"","code":"s.value(dfxy, z, breaks = NULL, xax = 1, yax = 2, method = c(\"size\", \"color\"), symbol = c(\"square\", \"circle\", \"diamond\", \"uptriangle\", \"downtriangle\"), col = NULL, nclass = 4, center = 0, centerpar = NULL, facets = NULL, plot = TRUE, storeData = TRUE, add = FALSE, pos = -1, ...)"},{"path":"/reference/s.value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"2-D scatter plot with proportional symbols (bubble plot) â€” s.value","text":"dfxy data frame used produce plot z vector (matrix) many values rows dfxy breaks vector containing breaks used splitting z value. NULL, pretty(z, n) used. xax integer (vector) indicating column(s) dfxy () plotted x-axis yax integer (vector) indicating column(s) dfxy () plotted y-axis method color size value represent z.        color, palette color used symbols (one color per interval).     size, symbols proportional area used. Area 0 values     equals center (default 0). Two colors used, values less center larger center. symbol value symbol type col color colors vector color symbols.     method size, 2-length vector color expected.      method color, must many colors number class. nclass integer number desired intervals, ignored breaks missing. center center value method size centerpar logical list represent center value using elements      adegpar(\"ppoints\") list facets factor splitting rows dfxy subsets     data represented different sub-graphics plot logical indicating graphics displayed storeData logical indicating data stored     returned object. FALSE, names data     arguments stored add logical. TRUE, graphic superposed graphics     already plotted current device pos integer indicating position     environment data stored, relative environment     function called. Useful      storeData FALSE ... additional graphical parameters (see     adegpar trellis.par.get)","code":""},{"path":"/reference/s.value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"2-D scatter plot with proportional symbols (bubble plot) â€” s.value","text":"object class ADEg (subclass S2.value) ADEgS (add TRUE /   facets multidimensional z vectors xax/yax used). result displayed plot TRUE.","code":""},{"path":"/reference/s.value.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"2-D scatter plot with proportional symbols (bubble plot) â€” s.value","text":"symbol size, method size, use perceptual scaling (Tanimura et al. 2006) .","code":""},{"path":"/reference/s.value.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"2-D scatter plot with proportional symbols (bubble plot) â€” s.value","text":"Tanimura, S. Kuroiwa, C. Mizota, T. 2006 Proportional symbol   mapping R Journal Statistical Software 15, 1--7","code":""},{"path":"/reference/s.value.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"2-D scatter plot with proportional symbols (bubble plot) â€” s.value","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/s.value.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"2-D scatter plot with proportional symbols (bubble plot) â€” s.value","text":"","code":"data(rpjdl, package = \"ade4\") fau.coa <- ade4::dudi.coa(rpjdl$fau, scan = FALSE, nf = 3) g1 <- s.value(fau.coa$li, fau.coa$li[,3])  update(g1, key = list(space = \"right\", columns = 1))  g2 <- s.value(fau.coa$li, fau.coa$li[,3], method = \"color\", plegend.size = 0.8)  g3 <- s.value(fau.coa$li, fau.coa$li[,3], plegend.size = 0.8, symbol = \"square\",    method = \"color\",  col = colorRampPalette(c(\"yellow\", \"blue\"))(6))  g4 <- s.value(fau.coa$li, fau.coa$li[,3], plot = FALSE) g5 <- s.value(fau.coa$li, fau.coa$li[, 3], center = 0, method = \"size\",    symbol = \"circle\", col = c(\"yellow\", \"red\"), plot = FALSE) g6 <- ADEgS(c(g4, g5), positions = layout2position(matrix(c(1, 2), 1, 2)),    add = matrix(0, ncol = 2, nrow = 2))        data(irishdata, package = \"ade4\") irq0 <- data.frame(scale(irishdata$tab, scale = TRUE)) g7 <- s.value(irishdata$xy.utm, irq0, Sp = irishdata$Spatial.contour, paxes.draw = FALSE,    pgrid.draw = FALSE, pSp.alpha = 0.4)"},{"path":"/reference/s1d.barchart.html","id":null,"dir":"Reference","previous_headings":"","what":"1-D plot of a numeric score by bars â€” s1d.barchart","title":"1-D plot of a numeric score by bars â€” s1d.barchart","text":"function represents score using chart rectangular bars length proportional score.","code":""},{"path":"/reference/s1d.barchart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"1-D plot of a numeric score by bars â€” s1d.barchart","text":"","code":"s1d.barchart(score, labels = NULL, at = 1:NROW(score), sort = FALSE,   facets = NULL, plot = TRUE, storeData = TRUE, add = FALSE, pos = -1, ...)"},{"path":"/reference/s1d.barchart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"1-D plot of a numeric score by bars â€” s1d.barchart","text":"score numeric vector (data frame) used produce plot labels labels' names drawn top bars numeric vector used index sort logical indicating score sorted ascending order facets factor splitting score subsets     data represented different sub-graphics plot logical indicating graphics displayed storeData logical indicating data stored     returned object. FALSE, names data     arguments stored add logical. TRUE, graphic superposed graphics     already plotted current device pos integer indicating position     environment data stored, relative environment     function called. Useful storeData     FALSE ... additional graphical parameters (see     adegpar trellis.par.get)","code":""},{"path":"/reference/s1d.barchart.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"1-D plot of a numeric score by bars â€” s1d.barchart","text":"Graphical parameters bars available ppolygons adegpar.   appropriated graphical parameters p1d also available.","code":""},{"path":"/reference/s1d.barchart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"1-D plot of a numeric score by bars â€” s1d.barchart","text":"object class ADEg (subclass C1.barchart) ADEgS (add TRUE /   facets data frame score used). result displayed plot TRUE.","code":""},{"path":"/reference/s1d.barchart.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"1-D plot of a numeric score by bars â€” s1d.barchart","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/s1d.barchart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"1-D plot of a numeric score by bars â€” s1d.barchart","text":"","code":"data(rpjdl, package = \"ade4\") rpjdl.coa <- ade4::dudi.coa(rpjdl$fau, scannf = FALSE, nf = 4) s1d.barchart(rpjdl.coa$eig, p1d.horizontal = FALSE, ppolygons.col = \"grey\")"},{"path":"/reference/s1d.boxplot.html","id":null,"dir":"Reference","previous_headings":"","what":"1-D box plot of a numeric score partitioned in classes (levels of a factor) â€” s1d.boxplot","title":"1-D box plot of a numeric score partitioned in classes (levels of a factor) â€” s1d.boxplot","text":"function represents link variable set qualitative variables using box--whisker plots.","code":""},{"path":"/reference/s1d.boxplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"1-D box plot of a numeric score partitioned in classes (levels of a factor) â€” s1d.boxplot","text":"","code":"s1d.boxplot(score, fac = gl(1, NROW(score)), at = 1:nlevels(fac), col = NULL,    facets = NULL, plot = TRUE, storeData = TRUE, add = FALSE, pos = -1, ...)"},{"path":"/reference/s1d.boxplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"1-D box plot of a numeric score partitioned in classes (levels of a factor) â€” s1d.boxplot","text":"score numeric vector (data frame) used produce plot fac factor (matrix factors) split score numeric vector used index col color colors vector points, labels, lines polygons according factor level.      Colors recycled whether one color factor level. facets factor splitting score subsets     data represented different sub-graphics plot logical indicating graphics displayed storeData logical indicating data stored     returned object. FALSE, names data     arguments stored add logical. TRUE, graphic superposed graphics     already plotted current device pos integer indicating position     environment data stored, relative environment     function called. Useful storeData     FALSE ... additional graphical parameters (see     adegpar trellis.par.get)","code":""},{"path":"/reference/s1d.boxplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"1-D box plot of a numeric score partitioned in classes (levels of a factor) â€” s1d.boxplot","text":"Graphical parameters rugs available plines adegpar ones boxes ppolygons.   appropriated graphical parameters p1d also available.","code":""},{"path":"/reference/s1d.boxplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"1-D box plot of a numeric score partitioned in classes (levels of a factor) â€” s1d.boxplot","text":"object class ADEg (subclass S1.boxplot) ADEgS (add TRUE /   facets data frame score data frame fac used). result displayed plot TRUE.","code":""},{"path":"/reference/s1d.boxplot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"1-D box plot of a numeric score partitioned in classes (levels of a factor) â€” s1d.boxplot","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/s1d.boxplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"1-D box plot of a numeric score partitioned in classes (levels of a factor) â€” s1d.boxplot","text":"","code":"data(banque, package = \"ade4\") banque.acm <- ade4::dudi.acm(banque, scan = FALSE, nf = 4) s1d.boxplot(banque.acm$l1[, 1], banque[, 2], psub.text = names(banque)[2],    psub.position = \"topleft\", col = c(\"red\", \"blue\", \"green\", \"purple\", \"orange\"))  s1d.boxplot(banque.acm$l1[,1], banque[, 1:6], psub.position = \"topleft\")"},{"path":"/reference/s1d.class.html","id":null,"dir":"Reference","previous_headings":"","what":"1-D plot of a numeric score partitioned in classes (levels of a factor) â€” s1d.class","title":"1-D plot of a numeric score partitioned in classes (levels of a factor) â€” s1d.class","text":"function represents link scores values matching labeled classes.","code":""},{"path":"/reference/s1d.class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"1-D plot of a numeric score partitioned in classes (levels of a factor) â€” s1d.class","text":"","code":"s1d.class(score, fac, wt = rep(1, NROW(fac)), labels = levels(fac), at = 0.5,    poslabel = c(\"regular\", \"value\"), col = NULL, facets = NULL, plot = TRUE,    storeData = TRUE, add = FALSE, pos = -1, ...)"},{"path":"/reference/s1d.class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"1-D plot of a numeric score partitioned in classes (levels of a factor) â€” s1d.class","text":"score numeric vector (data frame) used produce plot fac factor (matrix factors) split score wt vector weights score labels labels' names drawn class numeric vector used index poslabel label position class (level fac), can regular value.      regular, labels evenly spaced.      value, labels placed weighted mean class. col color colors vector points, labels lines according factor level.      Colors recycled whether one color factor level. facets factor splitting score subsets     data represented different sub-graphics plot logical indicating graphics displayed storeData logical indicating data stored     returned object. FALSE, names data     arguments stored add logical. TRUE, graphic superposed graphics     already plotted current device pos integer indicating position     environment data stored, relative environment     function called. Useful      storeData FALSE ... additional graphical parameters (see     adegpar trellis.par.get)","code":""},{"path":"/reference/s1d.class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"1-D plot of a numeric score partitioned in classes (levels of a factor) â€” s1d.class","text":"weighted means class available object slot stats using object@stats$means.   Graphical parameters rugs available plines adegpar.   appropriated graphical parameters p1d also available.","code":""},{"path":"/reference/s1d.class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"1-D plot of a numeric score partitioned in classes (levels of a factor) â€” s1d.class","text":"object class ADEg (subclass S1.class) ADEgS (add TRUE /   facets data frame score data frame fac used). result displayed plot TRUE.","code":""},{"path":"/reference/s1d.class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"1-D plot of a numeric score partitioned in classes (levels of a factor) â€” s1d.class","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/s1d.class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"1-D plot of a numeric score partitioned in classes (levels of a factor) â€” s1d.class","text":"","code":"data(meau, package = \"ade4\") envpca <- ade4::dudi.pca(meau$env, scannf = FALSE)  g1 <- s1d.class(envpca$li[, 1], meau$design$season, poslabel = \"value\", col = 1:4, plot = FALSE) g2 <- s1d.class(envpca$li[, 1], meau$design$season, poslabel = \"regular\", col = 1:6,    p1d.reverse = TRUE, plot = FALSE) ADEgS(c(g1, g2), layout = c(2, 1))   g3 <- s1d.class(envpca$li[, 1], meau$design$season, poslabel = \"value\", col = 1:4,    plabels.cex = 0, key = list(space = \"bottom\"))"},{"path":"/reference/s1d.curve.html","id":null,"dir":"Reference","previous_headings":"","what":"1-D plot of a numeric score linked by curves â€” s1d.curve","title":"1-D plot of a numeric score linked by curves â€” s1d.curve","text":"function represents score using points linked curves.","code":""},{"path":"/reference/s1d.curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"1-D plot of a numeric score linked by curves â€” s1d.curve","text":"","code":"s1d.curve(score, at = 1:NROW(score), facets = NULL, plot = TRUE,    storeData = TRUE, add = FALSE, pos = -1, ...)"},{"path":"/reference/s1d.curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"1-D plot of a numeric score linked by curves â€” s1d.curve","text":"score numeric vector (data frame) used produce plot numeric vector used index facets factor splitting score subsets     data represented different sub-graphics plot logical indicating graphics displayed storeData logical indicating data stored     returned object. FALSE, names data     arguments stored add logical. TRUE, graphic superposed graphics     already plotted current device pos integer indicating position     environment data stored, relative environment     function called. Useful storeData     FALSE ... additional graphical parameters (see     adegpar trellis.par.get)","code":""},{"path":"/reference/s1d.curve.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"1-D plot of a numeric score linked by curves â€” s1d.curve","text":"Graphical parameters lines points available plines ppoints adegpar.   appropriated graphical parameters p1d also available.","code":""},{"path":"/reference/s1d.curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"1-D plot of a numeric score linked by curves â€” s1d.curve","text":"object class ADEg (subclass C1.curve) ADEgS (add TRUE /   facets data frame score used). result displayed plot TRUE.","code":""},{"path":"/reference/s1d.curve.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"1-D plot of a numeric score linked by curves â€” s1d.curve","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/s1d.curve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"1-D plot of a numeric score linked by curves â€” s1d.curve","text":"","code":"data(rpjdl, package = \"ade4\") rpjdl.coa <- ade4::dudi.coa(rpjdl$fau, scannf = FALSE, nf = 4) s1d.curve(rpjdl.coa$eig)   set.seed(40) score1 <- rnorm(10) s1d.curve(score1)"},{"path":"/reference/s1d.curves.html","id":null,"dir":"Reference","previous_headings":"","what":"1-D plot of multiple scores linked by curves â€” s1d.curves","title":"1-D plot of multiple scores linked by curves â€” s1d.curves","text":"function represents multiple scores using points linked curves.","code":""},{"path":"/reference/s1d.curves.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"1-D plot of multiple scores linked by curves â€” s1d.curves","text":"","code":"s1d.curves(score, at = 1:NROW(score), facets = NULL, plot = TRUE,    storeData = TRUE, add = FALSE, pos = -1, ...)"},{"path":"/reference/s1d.curves.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"1-D plot of multiple scores linked by curves â€” s1d.curves","text":"score numeric matrix (data frame) used produce plot numeric vector used index facets factor splitting score subsets     data represented different sub-graphics plot logical indicating graphics displayed storeData logical indicating data stored     returned object. FALSE, names data     arguments stored add logical. TRUE, graphic superposed graphics     already plotted current device pos integer indicating position     environment data stored, relative environment     function called. Useful storeData     FALSE ... additional graphical parameters (see     adegpar trellis.par.get)","code":""},{"path":"/reference/s1d.curves.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"1-D plot of multiple scores linked by curves â€” s1d.curves","text":"Graphical parameters lines points available plines ppoints adegpar.   appropriated graphical parameters p1d also available.","code":""},{"path":"/reference/s1d.curves.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"1-D plot of multiple scores linked by curves â€” s1d.curves","text":"object class ADEg (subclass C1.curves) ADEgS (add TRUE /   facets used). result displayed plot TRUE.","code":""},{"path":"/reference/s1d.curves.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"1-D plot of multiple scores linked by curves â€” s1d.curves","text":"Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/s1d.curves.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"1-D plot of multiple scores linked by curves â€” s1d.curves","text":"","code":"scores <- matrix(1:50, nrow = 10) s1d.curves(scores)"},{"path":"/reference/s1d.density.html","id":null,"dir":"Reference","previous_headings":"","what":"1-D plot of a numeric score by density curves â€” s1d.density","title":"1-D plot of a numeric score by density curves â€” s1d.density","text":"function represents score density curve level factor.","code":""},{"path":"/reference/s1d.density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"1-D plot of a numeric score by density curves â€” s1d.density","text":"","code":"s1d.density(score, fac = gl(1, NROW(score)), kernel = c(\"normal\", \"box\",    \"epanech\", \"biweight\", \"triweight\"), bandwidth = NULL, gridsize = 450,    col = NULL, fill = TRUE, facets = NULL, plot = TRUE, storeData = TRUE,   add = FALSE, pos = -1, ...)"},{"path":"/reference/s1d.density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"1-D plot of a numeric score by density curves â€” s1d.density","text":"score numeric vector (data frame) used produce plot fac factor (matrix factors) split score kernel smoothing kernel used, see bkde bandwidth kernel bandwidth smoothing parameter gridsize number equally spaced points estimate density col logical, color colors vector labels, rugs, lines polygons according factor level.      Colors recycled whether one color factor level. fill logical yield polygons density curves filled facets factor splitting score subsets     data represented different sub-graphics plot logical indicating graphics displayed storeData logical indicating data stored     returned object. FALSE, names data     arguments stored add logical. TRUE, graphic superposed graphics     already plotted current device pos integer indicating position     environment data stored, relative environment     function called. Useful storeData     FALSE ... additional graphical parameters (see     adegpar trellis.par.get)","code":""},{"path":"/reference/s1d.density.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"1-D plot of a numeric score by density curves â€” s1d.density","text":"kernel, bandwidth gridsize passed parameters bkde function KernSmooth package. Graphical parameters rugs available plines adegpar ones density curves filled ppolygons.   appropriated graphical parameters p1d also available.","code":""},{"path":"/reference/s1d.density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"1-D plot of a numeric score by density curves â€” s1d.density","text":"object class ADEg (subclass C1.density) ADEgS (add TRUE /   facets data frame score data frame fac used). result displayed plot TRUE.","code":""},{"path":"/reference/s1d.density.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"1-D plot of a numeric score by density curves â€” s1d.density","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/s1d.density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"1-D plot of a numeric score by density curves â€” s1d.density","text":"","code":"score <- c(rnorm(1000, mean = -0.5, sd = 0.5), rnorm(1000, mean = 1)) fac <- rep(c(\"A\", \"B\"), each = 1000) s1d.density(score, fac, col = c(2, 4), p1d.reverse = TRUE)"},{"path":"/reference/s1d.distri.html","id":null,"dir":"Reference","previous_headings":"","what":"1-D plot of a numeric score by means/standard deviations computed\nusing an external table of weights â€” s1d.distri","title":"1-D plot of a numeric score by means/standard deviations computed\nusing an external table of weights â€” s1d.distri","text":"function represents set distributions numeric score using mean-standard deviation display","code":""},{"path":"/reference/s1d.distri.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"1-D plot of a numeric score by means/standard deviations computed\nusing an external table of weights â€” s1d.distri","text":"","code":"s1d.distri(score, dfdistri, labels = colnames(dfdistri), at = 1:NCOL(dfdistri),    yrank = TRUE, sdSize = 1, facets = NULL, plot = TRUE,    storeData = TRUE, add = FALSE, pos = -1, ...)"},{"path":"/reference/s1d.distri.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"1-D plot of a numeric score by means/standard deviations computed\nusing an external table of weights â€” s1d.distri","text":"score numeric vector (data frame) used produce plot dfdistri data frame containing mass distribution column class yrank logical draw distributions sorted means ascending order labels labels' names drawn distribution numeric vector used index sdSize numeric size standard deviation segments facets factor splitting score subsets     data represented different sub-graphics plot logical indicating graphics displayed storeData logical indicating data stored     returned object. FALSE, names data     arguments stored add logical. TRUE, graphic superposed graphics     already plotted current device pos integer indicating position     environment data stored, relative environment     function called. Useful storeData     FALSE ... additional graphical parameters (see     adegpar trellis.par.get)","code":""},{"path":"/reference/s1d.distri.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"1-D plot of a numeric score by means/standard deviations computed\nusing an external table of weights â€” s1d.distri","text":"Graphical parameters rugs available plines adegpar.   appropriated graphical parameters p1d also available.   weighted means standard deviations class available object slot stats using object@stats$means object@stats$sds.","code":""},{"path":"/reference/s1d.distri.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"1-D plot of a numeric score by means/standard deviations computed\nusing an external table of weights â€” s1d.distri","text":"object class ADEg (subclass S1.distri) ADEgS (add TRUE /   facets data frame score used). result displayed plot TRUE.","code":""},{"path":"/reference/s1d.distri.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"1-D plot of a numeric score by means/standard deviations computed\nusing an external table of weights â€” s1d.distri","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/s1d.distri.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"1-D plot of a numeric score by means/standard deviations computed\nusing an external table of weights â€” s1d.distri","text":"","code":"w <- seq(-1, 1, le = 200) distri <- data.frame(lapply(1:50,    function(x) sample(200:1) * ((w >= (- x / 50)) & (w <= x / 50)))) names(distri) <- paste(\"w\", 1:50, sep = \"\") g11 <- s1d.distri(w, distri, yrank = TRUE, sdS = 1.5, plot = FALSE) g12 <- s1d.distri(w, distri, yrank = FALSE, sdS = 1.5, plot = FALSE) G1 <- ADEgS(c(g11, g12), layout = c(1, 2))   data(rpjdl, package = \"ade4\") coa1 <- ade4::dudi.coa(rpjdl$fau, scannf = FALSE) G2 <- s1d.distri(coa1$li[,1], rpjdl$fau, labels = rpjdl$frlab,    plabels = list(cex = 0.8, boxes = list(draw = FALSE)))   if (FALSE) { g31 <- s1d.distri(coa1$l1[,1], rpjdl$fau, plabels = list(cex = 0.8, boxes = list(draw = FALSE)),    plot = FALSE) nsc1 <- ade4::dudi.nsc(rpjdl$fau, scannf = FALSE) g32 <- s1d.distri(nsc1$l1[,1], rpjdl$fau, plabels = list(cex = 0.8, boxes = list(draw = FALSE)),    plot = FALSE) g33 <- s.label(coa1$l1, plot = FALSE) g34 <- s.label(nsc1$l1, plot = FALSE) G3 <- ADEgS(c(g31, g32, g33, g34), layout = c(2, 2)) }"},{"path":"/reference/s1d.dotplot.html","id":null,"dir":"Reference","previous_headings":"","what":"1-D plot of a numeric score by dots â€” s1d.dotplot","title":"1-D plot of a numeric score by dots â€” s1d.dotplot","text":"function represents score using dots.","code":""},{"path":"/reference/s1d.dotplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"1-D plot of a numeric score by dots â€” s1d.dotplot","text":"","code":"s1d.dotplot(score, at = 1:NROW(score), facets = NULL, plot = TRUE,    storeData = TRUE, add = FALSE, pos = -1, ...)"},{"path":"/reference/s1d.dotplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"1-D plot of a numeric score by dots â€” s1d.dotplot","text":"score numeric vector (data frame) used produce plot numeric vector used index facets factor splitting score subsets     data represented different sub-graphics plot logical indicating graphics displayed storeData logical indicating data stored     returned object. FALSE, names data     arguments stored add logical. TRUE, graphic superposed graphics     already plotted current device pos integer indicating position     environment data stored, relative environment     function called. Useful storeData     FALSE ... additional graphical parameters (see     adegpar trellis.par.get)","code":""},{"path":"/reference/s1d.dotplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"1-D plot of a numeric score by dots â€” s1d.dotplot","text":"Graphical parameters segments dots available plines ppoints adegpar.   appropriated graphical parameters p1d also available.","code":""},{"path":"/reference/s1d.dotplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"1-D plot of a numeric score by dots â€” s1d.dotplot","text":"object class ADEg (subclass C1.dotplot) ADEgS (add TRUE /   facets data frame score used). result displayed plot TRUE.","code":""},{"path":"/reference/s1d.dotplot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"1-D plot of a numeric score by dots â€” s1d.dotplot","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/s1d.dotplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"1-D plot of a numeric score by dots â€” s1d.dotplot","text":"","code":"data(rpjdl, package = \"ade4\") rpjdl.coa <- ade4::dudi.coa(rpjdl$fau, scannf = FALSE, nf = 4) s1d.dotplot(rpjdl.coa$eig)   set.seed(40) score1 <- rnorm(10) s1d.dotplot(score1)"},{"path":"/reference/s1d.gauss.html","id":null,"dir":"Reference","previous_headings":"","what":"1-D plot of a numeric score by Gaussian curves â€” s1d.gauss","title":"1-D plot of a numeric score by Gaussian curves â€” s1d.gauss","text":"function represents score Gauss curve level factor.","code":""},{"path":"/reference/s1d.gauss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"1-D plot of a numeric score by Gaussian curves â€” s1d.gauss","text":"","code":"s1d.gauss(score, fac = gl(1, NROW(score)), wt = rep(1,   NROW(score)), steps = 200, col = NULL, fill = TRUE,   facets = NULL, plot = TRUE, storeData = TRUE, add =   FALSE, pos = -1, ...)"},{"path":"/reference/s1d.gauss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"1-D plot of a numeric score by Gaussian curves â€” s1d.gauss","text":"score numeric vector (data frame) used produce plot fac factor (matrix factors) split score wt vector weights score steps value number segments used draw Gauss curves col logical, color colors vector labels, rugs, lines polygons according factor level.      Colors recycled whether one color factor level. fill logical yield polygons Gauss curves filled facets factor splitting score subsets     data represented different sub-graphics plot logical indicating graphics displayed storeData logical indicating data stored     returned object. FALSE, names data     arguments stored add logical. TRUE, graphic superposed graphics     already plotted current device pos integer indicating position     environment data stored, relative environment     function called. Useful storeData     FALSE ... additional graphical parameters (see     adegpar trellis.par.get)","code":""},{"path":"/reference/s1d.gauss.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"1-D plot of a numeric score by Gaussian curves â€” s1d.gauss","text":"Graphical parameters rugs available plines adegpar ones Gauss curves filled ppolygons.   appropriated graphical parameters p1d also available.","code":""},{"path":"/reference/s1d.gauss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"1-D plot of a numeric score by Gaussian curves â€” s1d.gauss","text":"object class ADEg (subclass C1.gauss) ADEgS (add TRUE /   facets data frame score data frame fac used). result displayed plot TRUE.","code":""},{"path":"/reference/s1d.gauss.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"1-D plot of a numeric score by Gaussian curves â€” s1d.gauss","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/s1d.gauss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"1-D plot of a numeric score by Gaussian curves â€” s1d.gauss","text":"","code":"data(meau, package= \"ade4\") envpca <- ade4::dudi.pca(meau$env, scannf = FALSE) dffac <- cbind.data.frame(meau$design$season, meau$design$site) g1 <- s1d.gauss(envpca$li[, 1], fac = dffac, fill = TRUE, col = 1:6) #> Error in multi.variables.C1(thecall, \"fac\"): object 'envpca' not found update(g1, steps = 10) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'object' in selecting a method for function 'update': object 'g1' not found g2 <- s1d.gauss(envpca$li[, 1], dffac[, 2], ppoly.col = 1:4, paxes.draw = TRUE, ylim = c(0, 2),    fill = TRUE, p1d.hori = FALSE)"},{"path":"/reference/s1d.hist.html","id":null,"dir":"Reference","previous_headings":"","what":"1-D plot of a numeric score by bars â€” s1d.hist","title":"1-D plot of a numeric score by bars â€” s1d.hist","text":"function represents score using chart rectangular bars.","code":""},{"path":"/reference/s1d.hist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"1-D plot of a numeric score by bars â€” s1d.hist","text":"","code":"s1d.hist(score, breaks = NULL, nclass = round(log2(length(score)) + 1),    type = c(\"count\", \"density\", \"percent\"), right = TRUE, facets = NULL,    plot = TRUE, storeData = TRUE, add = FALSE, pos = -1, ...)"},{"path":"/reference/s1d.hist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"1-D plot of a numeric score by bars â€” s1d.hist","text":"score numeric vector (data frame) used produce plot breaks vector values split score. NULL, pretty(score, nclass) used. nclass integer number desired intervals, ignored breaks missing. type value among count, density, percent indicate unit cell height. right logical indicating histogram cells right-closed (left open) intervals. facets factor splitting score subsets     data represented different sub-graphics plot logical indicating graphics displayed storeData logical indicating data stored     returned object. FALSE, names data     arguments stored add logical. TRUE, graphic superposed graphics     already plotted current device pos integer indicating position     environment data stored, relative environment     function called. Useful storeData     FALSE ... additional graphical parameters (see     adegpar trellis.par.get)","code":""},{"path":"/reference/s1d.hist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"1-D plot of a numeric score by bars â€” s1d.hist","text":"Graphical parameters polygons available ppolygons adegpar.   appropriated graphical parameters p1d also available.","code":""},{"path":"/reference/s1d.hist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"1-D plot of a numeric score by bars â€” s1d.hist","text":"object class ADEg (subclass C1.hist) ADEgS (add TRUE /   facets data frame score used). result displayed plot TRUE.","code":""},{"path":"/reference/s1d.hist.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"1-D plot of a numeric score by bars â€” s1d.hist","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/s1d.hist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"1-D plot of a numeric score by bars â€” s1d.hist","text":"","code":"set.seed(40) score1 <- rnorm(1000) s1d.hist(score1)"},{"path":"/reference/s1d.interval.html","id":null,"dir":"Reference","previous_headings":"","what":"1-D plot of the interval between two numeric scores â€” s1d.interval","title":"1-D plot of the interval between two numeric scores â€” s1d.interval","text":"function represents interval two scores using either segments filled areas.","code":""},{"path":"/reference/s1d.interval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"1-D plot of the interval between two numeric scores â€” s1d.interval","text":"","code":"s1d.interval(score1, score2, at = 1:NROW(score1), method = c(\"bars\", \"area\"),    facets = NULL, plot = TRUE, storeData = TRUE, add = FALSE, pos = -1, ...)"},{"path":"/reference/s1d.interval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"1-D plot of the interval between two numeric scores â€” s1d.interval","text":"score1 numeric vector (data frame) used produce plot score2 numeric vector many values values (rows) score1 numeric vector used index method value, bars area, represent either segments areasbetween scores. facets factor splitting score subsets     data represented different sub-graphics plot logical indicating graphics displayed storeData logical indicating data stored     returned object. FALSE, names data     arguments stored add logical. TRUE, graphic superposed graphics     already plotted current device pos integer indicating position     environment data stored, relative environment     function called. Useful storeData     FALSE ... additional graphical parameters (see     adegpar trellis.par.get)","code":""},{"path":"/reference/s1d.interval.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"1-D plot of the interval between two numeric scores â€” s1d.interval","text":"Graphical parameters polygons, lines segment boundaries available respectively    ppolygons, plines parrows adegpar.   appropriated graphical parameters p1d also available.","code":""},{"path":"/reference/s1d.interval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"1-D plot of the interval between two numeric scores â€” s1d.interval","text":"object class ADEg (subclass C1.interval) ADEgS (add TRUE /   facets data frame score used). result displayed plot TRUE.","code":""},{"path":"/reference/s1d.interval.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"1-D plot of the interval between two numeric scores â€” s1d.interval","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/s1d.interval.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"1-D plot of the interval between two numeric scores â€” s1d.interval","text":"","code":"set.seed(40) sc1 <- rnorm(10) sc2 <- rnorm(10) s1d.interval(sc1, sc2, method = \"bars\")  s1d.interval(sc1, sc2, method = \"area\")"},{"path":"/reference/s1d.label.html","id":null,"dir":"Reference","previous_headings":"","what":"1-D plot of a numeric score with labels â€” s1d.label","title":"1-D plot of a numeric score with labels â€” s1d.label","text":"function represents numeric labeled score","code":""},{"path":"/reference/s1d.label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"1-D plot of a numeric score with labels â€” s1d.label","text":"","code":"s1d.label(score, labels = 1:NROW(score), at = 0.5, poslabel = c(\"regular\",   \"value\"), facets = NULL, plot = TRUE, storeData =   TRUE, add = FALSE, pos = -1, ...)"},{"path":"/reference/s1d.label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"1-D plot of a numeric score with labels â€” s1d.label","text":"score numeric vector (data frame) used produce plot labels labels' names drawn score value numeric vector used index poslabel label position, can regular value.      regular, labels evenly spaced.      value, labels placed weighted mean class. facets factor splitting score subsets     data represented different sub-graphics plot logical indicating graphics displayed storeData logical indicating data stored     returned object. FALSE, names data     arguments stored add logical. TRUE, graphic superposed graphics     already plotted current device pos integer indicating position     environment data stored, relative environment     function called. Useful storeData     FALSE ... additional graphical parameters (see     adegpar trellis.par.get)","code":""},{"path":"/reference/s1d.label.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"1-D plot of a numeric score with labels â€” s1d.label","text":"Graphical parameters rugs available plines adegpar.   appropriated graphical parameters p1d also available.","code":""},{"path":"/reference/s1d.label.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"1-D plot of a numeric score with labels â€” s1d.label","text":"object class ADEg (subclass S1.label) ADEgS (add TRUE /   facets data frame score used). result displayed plot TRUE.","code":""},{"path":"/reference/s1d.label.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"1-D plot of a numeric score with labels â€” s1d.label","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/s1d.label.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"1-D plot of a numeric score with labels â€” s1d.label","text":"","code":"data(meau, package = \"ade4\") envpca <- ade4::dudi.pca(meau$env, scannf = FALSE) g1 <- s1d.label(envpca$l1[, 1], row.names(envpca$l1), plot = FALSE) g2 <- s1d.label(envpca$co[, 1], row.names(envpca$co), p1d.reverse = TRUE, plot = FALSE) G <- ADEgS(c(g1, g2), layout = c(2, 1))"},{"path":"/reference/s1d.match.html","id":null,"dir":"Reference","previous_headings":"","what":"1-D plot of the matching between two numeric scores â€” s1d.match","title":"1-D plot of the matching between two numeric scores â€” s1d.match","text":"function represents paired scores evenly spaced labels.","code":""},{"path":"/reference/s1d.match.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"1-D plot of the matching between two numeric scores â€” s1d.match","text":"","code":"s1d.match(score1, score2, labels = 1:NROW(score1), at = 0.5,    facets = NULL, plot = TRUE, storeData = TRUE, add = FALSE,    pos = -1, ...)"},{"path":"/reference/s1d.match.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"1-D plot of the matching between two numeric scores â€” s1d.match","text":"score1 numeric vector (data frame) used produce plot score2 numeric vector used produce plot many values values (rows) score1 labels labels' names drawn score1 value numeric vector used index facets factor splitting score1 subsets         data represented different sub-graphics plot logical indicating graphics displayed storeData logical indicating data stored     returned object. FALSE, names data     arguments stored add logical. TRUE, graphic superposed graphics     already plotted current device pos integer indicating position     environment data stored, relative environment     function called. Useful storeData     FALSE ... additional graphical parameters (see     adegpar trellis.par.get)","code":""},{"path":"/reference/s1d.match.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"1-D plot of the matching between two numeric scores â€” s1d.match","text":"Graphical parameters rugs available plines adegpar.   appropriated graphical parameters p1d also available.","code":""},{"path":"/reference/s1d.match.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"1-D plot of the matching between two numeric scores â€” s1d.match","text":"object class ADEg (subclass S1.match) ADEgS (add TRUE /   facets data frame score data frame fac used). result displayed plot TRUE.","code":""},{"path":"/reference/s1d.match.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"1-D plot of the matching between two numeric scores â€” s1d.match","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/s1d.match.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"1-D plot of the matching between two numeric scores â€” s1d.match","text":"","code":"s1d.match(-5:5, 2 * (-5:5))"},{"path":"/reference/setlimits1D.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes limits for 1D and 2D displays. â€” setlimits1D","title":"Computes limits for 1D and 2D displays. â€” setlimits1D","text":"Computes limits 1D 2D displays adding 10% margins around extreme values.","code":""},{"path":"/reference/setlimits1D.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes limits for 1D and 2D displays. â€” setlimits1D","text":"","code":"setlimits1D(mini, maxi, origin, includeOr) setlimits2D(minX, maxX, minY, maxY, origin = c(0, 0), aspect.ratio = \"iso\", includeOr)"},{"path":"/reference/setlimits1D.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes limits for 1D and 2D displays. â€” setlimits1D","text":"mini smallest value unidimensional dataset maxi largest value unidimensional dataset minX smallest value first dimension bidimensional dataset maxX largest value first dimension bidimensional dataset minY smallest value second dimension bidimensional dataset maxY largest value second dimension bidimensional dataset origin value (setlimits1D) two-length vector (setlimits2D) indicating origin coordinate(s) aspect.ratio character string control physical aspect ratio graphic.         iso isometric scales, fill drawing big possible xy banking rule includeOr boolean value indicating whether origin included graphics window","code":""},{"path":"/reference/setlimits1D.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes limits for 1D and 2D displays. â€” setlimits1D","text":"setlimits1D returns two-length vector containing limits graphics window one axis.  setlimits2D returns two-length list first element, named xlim, contains two-length vector    containing limits graphics window first axis second, named ylim, contains limits    second axis.","code":""},{"path":"/reference/setlimits1D.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Computes limits for 1D and 2D displays. â€” setlimits1D","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":"/reference/setlimits1D.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Computes limits for 1D and 2D displays. â€” setlimits1D","text":"","code":"setlimits1D(mini = -2, maxi = 2, origin = 0, includeOr = TRUE) #> [1] -2.4  2.4 setlimits2D(minX = -2, maxX = 2, minY = -3, maxY = 4, origin = c(0, 0), includeOr = TRUE) #> $xlim #> [1] -4.2  4.2 #>  #> $ylim #> [1] -3.7  4.7 #>"},{"path":"/reference/sortparamADEg.html","id":null,"dir":"Reference","previous_headings":"","what":"Sort a sequence of graphical parameters â€” sortparamADEg","title":"Sort a sequence of graphical parameters â€” sortparamADEg","text":"Sort sequence graphical parameters several lists.","code":""},{"path":"/reference/sortparamADEg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sort a sequence of graphical parameters â€” sortparamADEg","text":"","code":"sortparamADEg(...) sortparamADEgS(..., graphsnames, nbsubgraphs = rep(1, length(graphsnames)))"},{"path":"/reference/sortparamADEg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sort a sequence of graphical parameters â€” sortparamADEg","text":"... sequence graphical parameters graphsnames sequence containing name simple graph ADEgS nbsubgraphs sequence containing number sub-graphs graph named graphsnames","code":""},{"path":"/reference/sortparamADEg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sort a sequence of graphical parameters â€” sortparamADEg","text":"sortparamADEg return list four lists named adepar, trellis, g.args rest.  sortparamADEgS return list many lists length graphsnames, .e., number    sub-graphs ADEgS. names lists graphsnames sub-list result  sortparamADEg function aplly sub-graph.","code":""},{"path":"/reference/sortparamADEg.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sort a sequence of graphical parameters â€” sortparamADEg","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":"/reference/sortparamADEg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sort a sequence of graphical parameters â€” sortparamADEg","text":"","code":"l1 <- sortparamADEg(xlab = \"x-axis label\", ylab = \"y-axis label\", plabels.cex = 1.5,    porigin.include = FALSE) length(l1) #> [1] 4 names(l1) #> [1] \"adepar\"  \"trellis\" \"g.args\"  \"rest\"       l2 <- sortparamADEgS(xlab = \"x-axis label\", eig.main = \"Eigenvalues\", row.ppoints.col = \"red\",   porigin.include = FALSE, graphsnames = c(\"row\", \"col\", \"eig\")) names(l2) #> [1] \"row\" \"col\" \"eig\" names(l2$row) #> [1] \"ppoints\" \"porigin\" \"xlab\"     l3 <- sortparamADEgS(xlab = \"x-axis label\", eig.main = \"Eigenvalues\", row.ppoints.col = \"pink\",   porigin.include = FALSE, graphsnames = c(\"row\", \"col\", \"eig\"), nbsubgraphs = c(1, 2, 1)) names(l3) #> [1] \"row\" \"col\" \"eig\" length(l3$row) #> [1] 3 length(l3$col) #> [1] 2"},{"path":"/reference/superpose.html","id":null,"dir":"Reference","previous_headings":"","what":"Superpose two graphics â€” superpose","title":"Superpose two graphics â€” superpose","text":"function superposes two graphics extends graphical constraints first graphic second one.","code":""},{"path":"/reference/superpose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Superpose two graphics â€” superpose","text":"","code":"superpose(g1, g2, which, plot = FALSE) # S4 method for ADEg +(e1, e2)"},{"path":"/reference/superpose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Superpose two graphics â€” superpose","text":"g1 object class ADEg, ADEgS trellis g2 object class ADEg, ADEgS trellis superposed g1 e1 object class ADEg ADEgS e2 object class ADEg ADEgS superposed e1 g1 ADEgS, ADEg used base superposition    (g2 superposed g1[[]]) plot logical indicating graphics displayed","code":""},{"path":"/reference/superpose.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Superpose two graphics â€” superpose","text":"created ADEgS object layout two graphical objects.    two objects superposed still graphical parameters created layout.   However, ADEgS displayed favour graphical parameters object :    displayed limits, grid, legend axes g1 (respectively e1) g2    (respectively e2) transparent background labels' boxes. superpose method defined : signature(g1 = \"ADEgS\", g2 = \"ADEg\", = \"numeric\",\tplot = \"logical\") signature(g1 = \"ADEgS\", g2 = \"ADEg\", = \"numeric\", plot = \"\") signature(g1 = \"ADEgS\", g2 = \"ADEg\", = \"missing\",\tplot = \"\"):        missing, last ADEg g1@ADEglist used base superposition. case, = length(g1) signature(g1 = \"ADEgORtrellis\", g2 = \"ADEgORtrellis\", = \"\", plot = \"\"):        g1 ADEg object, needed. signature(g1 = \"ADEgS\", g2 = \"ADEgS\", = \"missing\", plot = \"\") + method defined : signature(e1 = \"ADEg\", e2 = \"ADEg\"): superpose e2 e1 signature(e1 = \"ADEg\", e2 = \"ADEgS\"): superpose e2 e1 signature(e1 = \"ADEgS\", e2 = \"ADEg\"): calls + method signature        (e1 = \"ADEg\", e2 = \"ADEgS\").","code":""},{"path":"/reference/superpose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Superpose two graphics â€” superpose","text":"object class \"ADEgS\".","code":""},{"path":"/reference/superpose.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Superpose two graphics â€” superpose","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/superpose.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Superpose two graphics â€” superpose","text":"","code":"cha <- LETTERS[1:20] xy <- cbind.data.frame(runif(length(cha)), runif(length(cha))) g1 <- s.label(xy, labels = cha, ppoints.alpha = 0, pbackground.col = \"grey85\")  g2 <- s.label(xy, labels = cha, plabels.cex = 0, paxes.draw = TRUE, ppoints.pch = 4,    ppoints.col = \"red\")  g3 <- superpose(g1, g2, plot = TRUE)  g4 <- superpose(g2, g1, plot = TRUE)   data(jv73, package = \"ade4\") pca1 <- ade4::dudi.pca(jv73$morpho, scannf = FALSE) g5 <- s.label(pca1$li, plabels.optim = TRUE)  g6 <- s.class(pca1$li, jv73$fac.riv, starSize = 0, ellipseSize = 0, chullSize = 1,    ppolygons.alpha = 0.4, col = rainbow(12), ppoints.cex = 0)  g5 + g6   if (FALSE) g7 <- s.label(pca1$li, plabels.optim = TRUE, facets = jv73$fac.riv, plot = FALSE) g8 <- s.class(pca1$li, jv73$fac.riv, facets = jv73$fac.riv, starSize = 0, chullSize = 1,    ellipseSize = 0, ppolygons.alpha = 0.4, col = rainbow(12), ppoints.cex = 0, plot = FALSE) #> Error in multi.facets.S2(thecall, sortparameters$adepar, samelimits = sortparameters$g.args$samelimits): object 'pca1' not found g9 <- superpose(g7, g8, plot = TRUE) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'g1' in selecting a method for function 'superpose': object 'g7' not found"},{"path":"/reference/table.image.html","id":null,"dir":"Reference","previous_headings":"","what":"Heat map-like representation with colored cells â€” table.image","title":"Heat map-like representation with colored cells â€” table.image","text":"function represents two dimensional table plot cells colored according value.","code":""},{"path":"/reference/table.image.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heat map-like representation with colored cells â€” table.image","text":"","code":"table.image(dftab, coordsx = 1:ncol(as.matrix(dftab)), coordsy =   nrow(as.matrix(dftab)):1, labelsx, labelsy, nclass = 3,   breaks = NULL, col = NULL, plot = TRUE, storeData =   TRUE, add = FALSE, pos = -1, ...)"},{"path":"/reference/table.image.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heat map-like representation with colored cells â€” table.image","text":"dftab data frame, matrix, contingency table distance matrix used produce plot coordsx integer vector indicating columns dftab kept coordsy integer vector indicating rows dftab kept labelsx columns labels labelsy rows labels breaks vector values split dftab. NULL, pretty(dftab, nclass) used. nclass integer number desired intervals, ignored breaks missing. col color colors vector used cells plot logical indicating graphics displayed storeData logical indicating data stored     returned object. FALSE, names data     arguments stored add logical. TRUE, graphic superposed graphics     already plotted current device pos integer indicating position     environment data stored, relative environment     function called. Useful storeData     FALSE ... additional graphical parameters (see     adegpar trellis.par.get)","code":""},{"path":"/reference/table.image.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Heat map-like representation with colored cells â€” table.image","text":"object class ADEg (subclass T.image) ADEgS (add TRUE). result displayed plot TRUE.","code":""},{"path":"/reference/table.image.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Heat map-like representation with colored cells â€” table.image","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/table.image.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Heat map-like representation with colored cells â€” table.image","text":"","code":"tab <- as.table(matrix(rnorm(900), ncol = 30)) g1 <- table.image(tab)   # add a continuous color bar as legend # update(g1, plegend.drawColorKey = TRUE)  g2 <- table.image(tab, n = 100, coordsx = c(30, 1:29), plegend.drawKey = FALSE)   data(rpjdl, package = \"ade4\") X <- data.frame(t(rpjdl$fau)) Y <- data.frame(t(rpjdl$mil)) coa1 <- ade4::dudi.coa(X, scannf = FALSE) g3 <- table.image(Y, coordsx = rank(coa1$co[, 1]), coordsy = 1:8, nclas = 5,    labelsx = \"\", plegend.drawKey = FALSE)"},{"path":"/reference/table.value.html","id":null,"dir":"Reference","previous_headings":"","what":"Heat map-like representation with proportional symbols â€” table.value","title":"Heat map-like representation with proportional symbols â€” table.value","text":"function represents two dimensional table plot proportional colored squares circles value.","code":""},{"path":"/reference/table.value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heat map-like representation with proportional symbols â€” table.value","text":"","code":"table.value(dftab, coordsx = 1:ncol(as.matrix(dftab)), coordsy = nrow(as.matrix(dftab)):1, labelsx, labelsy, breaks = NULL, method = c(\"size\", \"color\"), symbol = c(\"square\", \"circle\", \"diamond\", \"uptriangle\", \"downtriangle\"), col = NULL, nclass = 3, center = 0, centerpar = NULL, plot = TRUE, storeData = TRUE, add = FALSE, pos = -1, ...)"},{"path":"/reference/table.value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heat map-like representation with proportional symbols â€” table.value","text":"dftab data frame, matrix, contingency table distance matrix used produce plot coordsx integer vector indicating columns dftab kept coordsy integer vector indicating rows dftab kept labelsx columns labels labelsy rows labels breaks vector values split dftab. NULL, pretty(dftab, nclass) used. method color size value represent z.        color, palette color used symbols (one color per interval).     size, symbols proportional area used. Area 0 values     equals center (default 0). Two colors used, values less center larger center. symbol value symbol type col color colors vector color symbols.     method size, 2-length vector color expected.      method color, must many colors number class nclass integer number desired intervals, ignored breaks missing. center center value method size centerpar logical list represent center value using elements      adegpar(\"ppoints\") list plot logical indicating graphics displayed storeData logical indicating data stored     returned object. FALSE, names data     arguments stored add logical. TRUE, graphic superposed graphics     already plotted current device pos integer indicating position     environment data stored, relative environment     function called. Useful storeData     FALSE ... additional graphical parameters (see     adegpar trellis.par.get)","code":""},{"path":"/reference/table.value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Heat map-like representation with proportional symbols â€” table.value","text":"object class ADEg (subclass T.cont dftab table object,    otherwise subclass T.value) ADEgS (add TRUE). result displayed plot TRUE.","code":""},{"path":"/reference/table.value.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Heat map-like representation with proportional symbols â€” table.value","text":"symbol size, method size, use perceptual scaling (Tanimura et al. 2006) .","code":""},{"path":"/reference/table.value.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Heat map-like representation with proportional symbols â€” table.value","text":"Tanimura, S. Kuroiwa, C. Mizota, T. 2006 Proportional symbol   mapping R Journal Statistical Software 15, 1--7","code":""},{"path":"/reference/table.value.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Heat map-like representation with proportional symbols â€” table.value","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/table.value.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Heat map-like representation with proportional symbols â€” table.value","text":"","code":"## data.frame data(olympic, package = \"ade4\") w <- olympic$tab w <- data.frame(scale(w)) wpca <- ade4::dudi.pca(w, scann = FALSE) g1 <- table.value(w, ppoints.cex = 0.5, axis.line = list(col = \"darkblue\"),    axis.text = list(col = \"darkgrey\"))     # update the legend position update(g1, key = list(space = \"left\"))  update(g1, key = list(columns = 1))   g2 <- table.value(w, coordsy = rank(wpca$li[, 1]), ppoints.cex = 0.5,    axis.line = list(col = \"darkblue\"), axis.text = list(col = \"darkgrey\"))  g3 <- table.value(w, coordsy = wpca$li[, 1], coordsx = wpca$co[, 1], ppoints.cex = 0.5,    axis.line = list(col = \"darkblue\"), axis.text = list(col = \"darkgrey\"))   ## distance data(eurodist) g5 <- table.value(eurodist, symbol = \"circle\",    ptable.margin = list(bottom = 5, top = 16, left = 5, right = 16))   if (FALSE) { ## table data(rpjdl, package = \"ade4\") w <- data.frame(t(rpjdl$fau)) wcoa <- ade4::dudi.coa(w, scann = FALSE) g6 <- table.value(as.table(as.matrix(w)), meanY = TRUE, coordsx = wcoa$c1[,1],    coordsy = rank(wcoa$l1[,1]), ppoints.cex = 0.2, labelsx = \"\", col = \"black\") }"},{"path":"/reference/triangle.class.html","id":null,"dir":"Reference","previous_headings":"","what":"Ternary plot with a partition in classes (levels of a factor) â€” triangle.class","title":"Ternary plot with a partition in classes (levels of a factor) â€” triangle.class","text":"function represents three dimensional scatter plot partition classes (levels factor).","code":""},{"path":"/reference/triangle.class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ternary plot with a partition in classes (levels of a factor) â€” triangle.class","text":"","code":"triangle.class(dfxyz, fac, wt = rep(1, NROW(fac)), labels = levels(fac),    col = NULL, ellipseSize = 1, starSize = 1, chullSize = NULL, adjust = TRUE,    min3d = NULL, max3d = NULL, showposition = TRUE, facets = NULL, plot = TRUE,    storeData = TRUE, add = FALSE, pos = -1, ...)"},{"path":"/reference/triangle.class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ternary plot with a partition in classes (levels of a factor) â€” triangle.class","text":"dfxyz three columns data frame used produce plot fac factor (matrix factors) splitting rows dfxyz wt vector weights fac labels character vector containing class' labels col logical, color colors vector color points, ellipses, labels, lines polygons ellipseSize positive number ellipse size starSize number 0 1 size stars segments joining stars' center      (centroids) matching points chullSize NULL vector numbers 0 1 fraction points included convex hull adjust logical adjust device limits smaller equilateral triangle containing values min3d vector three values triangular minimal limits max3d vector three values triangular maximal limits showposition logical indicating whether used triangle shown complete one facets factor splitting rows dfxyz subsets     data represented different sub-graphics plot logical indicating graphics displayed storeData logical indicating data stored     returned object. FALSE, names data     arguments stored add logical. TRUE, graphic superposed graphics     already plotted current device pos integer indicating position     environment data stored, relative environment     function called. Useful storeData     FALSE ... additional graphical parameters (see     adegpar trellis.par.get)","code":""},{"path":"/reference/triangle.class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ternary plot with a partition in classes (levels of a factor) â€” triangle.class","text":"object class ADEg (subclass Tr.class) ADEgS (showposition TRUE,    add TRUE /facets used). result displayed plot TRUE.","code":""},{"path":"/reference/triangle.class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Ternary plot with a partition in classes (levels of a factor) â€” triangle.class","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/triangle.class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ternary plot with a partition in classes (levels of a factor) â€” triangle.class","text":"","code":"data(euro123, package = \"ade4\") fac1 <- euro123$plan$an df1 <- rbind.data.frame(euro123$in78, euro123$in86, euro123$in97) triangle.class(df1, fac = fac1, showposition = TRUE, col = c(1, 2, 3))  triangle.class(df1, fac = fac1, showposition = FALSE, plabels.cex = 0, col = c(1, 2, 3),    key = list(space = \"left\"))"},{"path":"/reference/triangle.label.html","id":null,"dir":"Reference","previous_headings":"","what":"Ternary plot with labels â€” triangle.label","title":"Ternary plot with labels â€” triangle.label","text":"function represents three dimensional scatter plot labels.","code":""},{"path":"/reference/triangle.label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ternary plot with labels â€” triangle.label","text":"","code":"triangle.label(dfxyz, labels = rownames(dfxyz), adjust = TRUE, min3d = NULL,    max3d = NULL, addaxes = FALSE, addmean = FALSE, meanpar = NULL, axespar = NULL,    showposition = TRUE, facets = NULL, plot = TRUE, storeData = TRUE, add = FALSE,    pos = -1, ...)"},{"path":"/reference/triangle.label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ternary plot with labels â€” triangle.label","text":"dfxyz three columns data frame used produce plot labels character vector containing labels points adjust logical adjust device limits smaller equilateral triangle containing values min3d vector three values triangular minimal limits max3d vector three values triangular maximal limits addaxes logical draw principal axes addmean logical plot mean meanpar list represent mean points using pch, cex col axespar list represent axes lines using col, lwd lty showposition logical indicating whether used triangle shown complete one facets factor splitting rows dfxyz subsets     data represented different sub-graphics plot logical indicating graphics displayed storeData logical indicating data stored     returned object. FALSE, names data     arguments stored add logical. TRUE, graphic superposed graphics     already plotted current device pos integer indicating position     environment data stored, relative environment     function called. Useful storeData     FALSE ... additional graphical parameters (see     adegpar trellis.par.get)","code":""},{"path":"/reference/triangle.label.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ternary plot with labels â€” triangle.label","text":"object class ADEg (subclass Tr.label) ADEgS (showposition TRUE,    add TRUE /facets used). result displayed plot TRUE.","code":""},{"path":"/reference/triangle.label.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Ternary plot with labels â€” triangle.label","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/triangle.label.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ternary plot with labels â€” triangle.label","text":"","code":"data(euro123, package = \"ade4\") df <- rbind.data.frame(euro123$in78, euro123$in86, euro123$in97) row.names(df) <- paste(row.names(euro123$in78), rep(c(1, 2, 3), rep(12, 3)), sep = \"\") g1 <- triangle.label(df, label = row.names(df), showposition = TRUE, plot = FALSE) g2 <- triangle.label(euro123$in78, plabels.cex = 0, ppoints.cex = 2, addmean = TRUE,    show = FALSE, plot = FALSE) g3 <- triangle.label(euro123$in86, labels = row.names(euro123$in78), plabels.cex = 0.8,    plot = FALSE) g4 <- triangle.label(rbind.data.frame(euro123$in78, euro123$in86), plabels.cex = 0.8,    addaxes = TRUE, psub.te = \"Principal axis\", psub.cex = 1.5, psub.pos = \"topright\", plot = FALSE) G <- ADEgS(c(g1, g2, g3, g4), layout = c(2, 2))"},{"path":"/reference/triangle.match.html","id":null,"dir":"Reference","previous_headings":"","what":"Ternary plot of the matching between two sets of coordinates â€” triangle.match","title":"Ternary plot of the matching between two sets of coordinates â€” triangle.match","text":"function represents three dimensional scatter plot paired coordinates.","code":""},{"path":"/reference/triangle.match.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ternary plot of the matching between two sets of coordinates â€” triangle.match","text":"","code":"triangle.match(dfxyz1, dfxyz2, labels = row.names(as.data.frame(dfxyz1)),    min3d = NULL, max3d = NULL, adjust = TRUE, showposition = TRUE, facets = NULL,    plot = TRUE, storeData = TRUE, add = FALSE, pos = -1, ...)"},{"path":"/reference/triangle.match.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ternary plot of the matching between two sets of coordinates â€” triangle.match","text":"dfxyz1 three columns data frame, first system coordinates, used produce plot dfxyz2 three columns data frame, second system coordinates, many rows dfxyz1, used produce plot. labels vector character strings containing matches' labels adjust logical adjust device limits smaller equilateral triangle containing values min3d vector three values triangular minimal limits max3d vector three values triangular maximal limits showposition logical indicating whether used triangle shown complete one facets factor splitting rows dfxyz subsets     data represented different sub-graphics plot logical indicating graphics displayed storeData logical indicating data stored     returned object. FALSE, names data     arguments stored add logical. TRUE, graphic superposed graphics     already plotted current device pos integer indicating position     environment data stored, relative environment     function called. Useful storeData     FALSE ... additional graphical parameters (see     adegpar trellis.par.get)","code":""},{"path":"/reference/triangle.match.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ternary plot of the matching between two sets of coordinates â€” triangle.match","text":"object class ADEg (subclass Tr.match) ADEgS (showposition TRUE,    add TRUE /facets used). result displayed plot TRUE.","code":""},{"path":"/reference/triangle.match.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Ternary plot of the matching between two sets of coordinates â€” triangle.match","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/triangle.match.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ternary plot of the matching between two sets of coordinates â€” triangle.match","text":"","code":"data(euro123, package = \"ade4\") triangle.match(euro123$in78, euro123$in86, plabels.cex = 0.8)"},{"path":"/reference/triangle.traject.html","id":null,"dir":"Reference","previous_headings":"","what":"Ternary plot with trajectories â€” triangle.traject","title":"Ternary plot with trajectories â€” triangle.traject","text":"function represents three dimensional scatter plot trajectories.","code":""},{"path":"/reference/triangle.traject.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ternary plot with trajectories â€” triangle.traject","text":"","code":"triangle.traject(dfxyz, fac = gl(1, nrow(dfxyz)), order, labels = levels(fac),    col = NULL, adjust = TRUE, min3d = NULL, max3d = NULL, showposition = TRUE,    facets = NULL, plot = TRUE, storeData = TRUE, add = FALSE, pos = -1, ...)"},{"path":"/reference/triangle.traject.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ternary plot with trajectories â€” triangle.traject","text":"dfxyz three columns data frame, first system coordinates, used produce plot fac factor (matrix factors) splitting rows dfxyz order vector containing drawing order trajectories. vector length equal factor. labels vector character strings containing trajectories' labels col color colors vector color points, labels lines adjust logical adjust device limits smaller equilateral triangle containing values min3d vector three values triangular minimal limits max3d vector three values triangular maximal limits showposition logical indicating whether used triangle shown complete one facets factor splitting rows dfxyz subsets     data represented different sub-graphics plot logical indicating graphics displayed storeData logical indicating data stored     returned object. FALSE, names data     arguments stored add logical. TRUE, graphic superposed graphics     already plotted current device pos integer indicating position     environment data stored, relative environment     function called. Useful storeData     FALSE ... additional graphical parameters (see     adegpar trellis.par.get)","code":""},{"path":"/reference/triangle.traject.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Ternary plot with trajectories â€” triangle.traject","text":"fac factor used display several trajectories: level fac specific trajectory.","code":""},{"path":"/reference/triangle.traject.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ternary plot with trajectories â€” triangle.traject","text":"object class ADEg (subclass Tr.traject) ADEgS (showposition TRUE,    add TRUE /facets used). result displayed plot TRUE.","code":""},{"path":"/reference/triangle.traject.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Ternary plot with trajectories â€” triangle.traject","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/triangle.traject.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ternary plot with trajectories â€” triangle.traject","text":"","code":"exo1 <- matrix(c(51.88, 32.55, 15.57, 44.94, 34.59, 20.47, 25.95, 39.15, 34.9,   37.87, 43.19, 18.94, 34.2, 43.32, 22.48, 16.13, 42.18, 41.69,   7.76, 70.93, 21.31, 6.22, 65.96, 27.82, 6.44, 57.06, 36.5,   37.24, 32.45, 30.31, 16.09, 31.22, 52.69, 6.54, 24.68, 68.78),    ncol = 3, byr = TRUE) exo1 <- as.data.frame(exo1) names(exo1) <- c(\"agr\", \"ouv\", \"ter\") com <- as.factor(rep(c(\"Gig\", \"Lun\", \"Gan\", \"Mat\"), c(3, 3, 3, 3))) rec <- as.factor(rep(c(\"68\", \"75\", \"82\"), 4)) row.names(exo1) <- paste(com, rec, sep = \"\") tri1 <- triangle.traject(exo1)"},{"path":"/reference/zoom.html","id":null,"dir":"Reference","previous_headings":"","what":"Zoom in or out â€” zoom","title":"Zoom in or out â€” zoom","text":"function performs zoom ADEg.S1 ADEg.S2 displayed object.","code":""},{"path":"/reference/zoom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zoom in or out â€” zoom","text":"","code":"zoom(object, zoom, center)"},{"path":"/reference/zoom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zoom in or out â€” zoom","text":"object ADEg.S1 ADEg.S2 object zoom numeric value zoom (zoom > 1) (zoom < 1) center numeric value (object ADEg.S1 object) two-length vector (object ADEg.S2 object)      reference point zoom (). missing, displayed center point used.","code":""},{"path":"/reference/zoom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zoom in or out â€” zoom","text":"Updated display zoom.","code":""},{"path":"/reference/zoom.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Zoom in or out â€” zoom","text":"Alice Julien-Laferriere, Aurelie Siberchicot aurelie.siberchicot@univ-lyon1.fr Stephane Dray","code":""},{"path":[]},{"path":"/reference/zoom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zoom in or out â€” zoom","text":"","code":"data(olympic, package = \"ade4\") dudi1 <- ade4::dudi.pca(olympic$tab, scan = FALSE) g <- s.corcircle(dudi1$co, lab = names(olympic$tab), fullcircle = TRUE, psub.text = \"data:olympic\")  zoom(g, 0.5)  zoom(g, 2, center = c(-0.4, 0.8))"}]
